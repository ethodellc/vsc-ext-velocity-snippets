{
  "$UtilMethods.isSet(any var): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isSet",
      "$UtilMethods.isSet"
    ],
    "body": [
      "\\$UtilMethods.isSet(\\$${1:var})"
    ],
    "description": "True if not null and not empty."
  },
  "$alternator.make(boolean auto, List list | Object[]): Alternator": {
    "prefix": [
      "$",
      "alternator.make",
      "$alternator.make"
    ],
    "body": [
      "\\$alternator.make(${1:auto}, ${2:list})"
    ],
    "description": "Make an automatic Alternator from a List."
  },
  "$alternator.make(List list | Object[]): Alternator": {
    "prefix": [
      "$",
      "alternator.make",
      "$alternator.make"
    ],
    "body": [
      "\\$alternator.make(${1:list})"
    ],
    "description": "Make an Alternator from a List."
  },
  "$date.format(String format, Object obj): String": {
    "prefix": [
      "$",
      "date.format",
      "$date.format"
    ],
    "body": [
      "\\$date.format(${1:format}, ${2:obj})"
    ],
    "description": "Converts the specified object to a date and returns a formatted string representing that date in the locale returned by getLocale()."
  },
  "$date.format(String format, Object obj, Locale locale): String": {
    "prefix": [
      "$",
      "date.format",
      "$date.format"
    ],
    "body": [
      "\\$date.format(${1:format}, ${2:obj}, ${3:locale})"
    ],
    "description": "Converts the specified object to a date and returns a formatted string representing that date in the specified Locale."
  },
  "$date.format(String format, Object obj, Locale locale, TimeZone timezone): String": {
    "prefix": [
      "$",
      "date.format",
      "$date.format"
    ],
    "body": [
      "\\$date.format(${1:format}, ${2:obj}, ${3:locale}, ${4:timezone})"
    ],
    "description": "Returns a formatted string representing the specified date, Locale, and TimeZone."
  },
  "$date.get(String format): String": {
    "prefix": [
      "$",
      "date.get",
      "$date.get"
    ],
    "body": [
      "\\$date.get(${1:format})"
    ],
    "description": "Returns a formatted string representing the date and/or time given by getDate() in standard, localized patterns."
  },
  "$date.getCalendar(): Calendar": {
    "prefix": [
      "$",
      "date.getCalendar",
      "$date.getCalendar"
    ],
    "body": [
      "\\$date.getCalendar()"
    ],
    "description": "Returns a Calendar instance created using the timezone and locale returned by getTimeZone() and getLocale()."
  },
  "$date.getDate(): Date": {
    "prefix": [
      "$",
      "date.getDate",
      "$date.getDate"
    ],
    "body": [
      "\\$date.getDate()"
    ],
    "description": "Returns a Date derived from the result of getCalendar()."
  },
  "$date.getDateFormat(): DateFormat": {
    "prefix": [
      "$",
      "date.getDateFormat",
      "$date.getDateFormat"
    ],
    "body": [
      "\\$date.getDateFormat()"
    ],
    "description": "Returns a DateFormat instance for the specified format, Locale, and TimeZone."
  },
  "$date.getDay(): Integer": {
    "prefix": [
      "$",
      "date.getDay",
      "$date.getDay"
    ],
    "body": [
      "\\$date.getDay()"
    ],
    "description": "Returns the day (of the month) value of the date returned by getCalendar()."
  },
  "$date.getDay(Object date): Integer": {
    "prefix": [
      "$",
      "date.getDay",
      "$date.getDay"
    ],
    "body": [
      "\\$date.getDay(${1:date})"
    ],
    "description": "Returns the day (of the month) value of the date returned by getCalendar()."
  },
  "$date.getFormat(): String": {
    "prefix": [
      "$",
      "date.getFormat",
      "$date.getFormat"
    ],
    "body": [
      "\\$date.getFormat()"
    ],
    "description": "Return the pattern or style to be used for formatting dates when none is specified."
  },
  "$date.getLocale(): Locale": {
    "prefix": [
      "$",
      "date.getLocale",
      "$date.getLocale"
    ],
    "body": [
      "\\$date.getLocale()"
    ],
    "description": "This implementation returns the default locale."
  },
  "$date.getMonth(): Integer": {
    "prefix": [
      "$",
      "date.getMonth",
      "$date.getMonth"
    ],
    "body": [
      "\\$date.getMonth()"
    ],
    "description": "Returns the month value of the date returned by getCalendar()."
  },
  "$date.getMonth(Object date): Integer": {
    "prefix": [
      "$",
      "date.getMonth",
      "$date.getMonth"
    ],
    "body": [
      "\\$date.getMonth(${1:date})"
    ],
    "description": "Returns the month value of the specified date."
  },
  "$date.getSystemCalendar(): Calendar": {
    "prefix": [
      "$",
      "date.getSystemCalendar",
      "$date.getSystemCalendar"
    ],
    "body": [
      "\\$date.getSystemCalendar()"
    ],
    "description": ""
  },
  "$date.getSystemDate(): Date": {
    "prefix": [
      "$",
      "date.getSystemDate",
      "$date.getSystemDate"
    ],
    "body": [
      "\\$date.getSystemDate()"
    ],
    "description": ""
  },
  "$date.getTimeZone(): TimeZone": {
    "prefix": [
      "$",
      "date.getTimeZone",
      "$date.getTimeZone"
    ],
    "body": [
      "\\$date.getTimeZone()"
    ],
    "description": "This implementation returns the default TimeZone."
  },
  "$date.getValue([Int|Object] field, Object date): Integer": {
    "prefix": [
      "$",
      "date.getValue",
      "$date.getValue"
    ],
    "body": [
      "\\$date.getValue(${1:field}, ${2:date})"
    ],
    "description": "Returns the specified value of the specified date, or null if the field or date is invalid."
  },
  "$date.getValue(Object field): Integer": {
    "prefix": [
      "$",
      "date.getValue",
      "$date.getValue"
    ],
    "body": [
      "\\$date.getValue(${1:field})"
    ],
    "description": "Return the specified value of the date returned by getCalendar() or null if the field is invalid."
  },
  "$date.getYear(): Integer": {
    "prefix": [
      "$",
      "date.getYear",
      "$date.getYear"
    ],
    "body": [
      "\\$date.getYear()"
    ],
    "description": "Returns the year value of the date returned by getCalendar()."
  },
  "$date.getYear(Object date): Integer": {
    "prefix": [
      "$",
      "date.getYear",
      "$date.getYear"
    ],
    "body": [
      "\\$date.getYear(${1:date})"
    ],
    "description": "Returns the year value of the specified date."
  },
  "$date.toCalendar(Object obj): Calendar": {
    "prefix": [
      "$",
      "date.toCalendar",
      "$date.toCalendar"
    ],
    "body": [
      "\\$date.toCalendar(${1:obj})"
    ],
    "description": "Converts an object to an instance of Calendar using the locale returned by getLocale() if necessary."
  },
  "$date.toCalendar(Object obj, Locale locale): Calendar": {
    "prefix": [
      "$",
      "date.toCalendar",
      "$date.toCalendar"
    ],
    "body": [
      "\\$date.toCalendar(${1:obj}, ${2:locale})"
    ],
    "description": "Converts an object to an instance of Calendar using the locale returned by getLocale() if necessary."
  },
  "$date.toDate(Object obj): Date": {
    "prefix": [
      "$",
      "date.toDate",
      "$date.toDate"
    ],
    "body": [
      "\\$date.toDate(${1:date})"
    ],
    "description": "Converts an object to an instance of Date using the format returned by getFormat(),the Locale returned by getLocale(), and the TimeZone returned by getTimeZone() if the object is not already an instance of Date, Calendar, or Long."
  },
  "$date.toDate(String format, Object obj): Date": {
    "prefix": [
      "$",
      "date.toDate",
      "$date.toDate"
    ],
    "body": [
      "\\$date.toDate(${1:format}, ${2:obj})"
    ],
    "description": "Converts an object to an instance of Date using the specified format,the Locale returned by getLocale(), and the TimeZone returned by getTimeZone() if the object is not already an instance of Date, Calendar, or Long."
  },
  "$date.toDate(String format, Object obj, Locale locale): Date": {
    "prefix": [
      "$",
      "date.toDate",
      "$date.toDate"
    ],
    "body": [
      "\\$date.toDate(${1:format}, ${2:obj}, ${3:locale})"
    ],
    "description": "Converts an object to an instance of Date using the specified format and Locale if the object is not already an instance of Date, Calendar, or Long."
  },
  "$date.toDate(String format, Object obj, Locale locale, TimeZone timezone)": {
    "prefix": [
      "$",
      "date.toDate",
      "$date.toDate"
    ],
    "body": [
      "\\$date.toDate(${1:format}, ${2:obj}, ${3:locale}, ${4:timezone})"
    ],
    "description": "Converts an object to an instance of Date using the specified format, Locale, and TimeZone if the object is not already an instance of Date, Calendar, or Long."
  },
  "$esc.getB(): String": {
    "prefix": [
      "$",
      "esc.getB",
      "$esc.getB"
    ],
    "body": [
      "\\$esc.getB()"
    ],
    "description": "Renders a backslash (\\)."
  },
  "$esc.getBackslash(): String": {
    "prefix": [
      "$",
      "esc.getBackslash",
      "$esc.getBackslash"
    ],
    "body": [
      "\\$esc.getBackslash()"
    ],
    "description": "Renders a backslash (\\)."
  },
  "$esc.getD(): String": {
    "prefix": [
      "$",
      "esc.getD",
      "$esc.getD"
    ],
    "body": [
      "\\$esc.getD()"
    ],
    "description": "Renders a dollar sign ($)."
  },
  "$esc.getDollar(): String": {
    "prefix": [
      "$",
      "esc.getDollar",
      "$esc.getDollar"
    ],
    "body": [
      "\\$esc.getDollar()"
    ],
    "description": "Renders a dollar sign ($)."
  },
  "$esc.getE(): String": {
    "prefix": [
      "$",
      "esc.getE",
      "$esc.getE"
    ],
    "body": [
      "\\$esc.getE()"
    ],
    "description": "Renders an exclamation mark (!)."
  },
  "$esc.getExclamation(): String": {
    "prefix": [
      "$",
      "esc.getExclamation",
      "$esc.getExclamation"
    ],
    "body": [
      "\\$esc.getExclamation()"
    ],
    "description": "Renders an exclamation mark (!)."
  },
  "$esc.getH(): String": {
    "prefix": [
      "$",
      "esc.getH",
      "$esc.getH"
    ],
    "body": [
      "\\$esc.getH()"
    ],
    "description": "Renders a hash (#)."
  },
  "$esc.getHash(): String": {
    "prefix": [
      "$",
      "esc.getHash",
      "$esc.getHash"
    ],
    "body": [
      "\\$esc.getHash()"
    ],
    "description": "Renders a hash (#)."
  },
  "$esc.getQ(): String": {
    "prefix": [
      "$",
      "esc.getQ",
      "$esc.getQ"
    ],
    "body": [
      "\\$esc.getQ()"
    ],
    "description": "Renders a double quotation mark (\")."
  },
  "$esc.getQuote(): String": {
    "prefix": [
      "$",
      "esc.getQuote",
      "$esc.getQuote"
    ],
    "body": [
      "\\$esc.getQuote()"
    ],
    "description": "Renders a double quotation mark (\")."
  },
  "$esc.getSingleQuote(): String": {
    "prefix": [
      "$",
      "esc.getSingleQuote",
      "$esc.getSingleQuote"
    ],
    "body": [
      "\\$esc.getSingleQuote()"
    ],
    "description": "Renders a single quotation mark (')."
  },
  "$esc.getS(): String": {
    "prefix": [
      "$",
      "esc.getS",
      "$esc.getS"
    ],
    "body": [
      "\\$esc.getS()"
    ],
    "description": "Renders a single quotation mark (')."
  },
  "$esc.html(Object string): String": {
    "prefix": [
      "$",
      "esc.html",
      "$esc.html"
    ],
    "body": [
      "\\$esc.html(${1:string})"
    ],
    "description": "Escapes the characters in a String using HTML entities."
  },
  "$esc.java(Object string): String": {
    "prefix": [
      "$",
      "esc.java",
      "$esc.java"
    ],
    "body": [
      "\\$esc.java(${1:string})"
    ],
    "description": "Escapes the characters in a String using Java String rules."
  },
  "$esc.javascript(Object string): String": {
    "prefix": [
      "$",
      "esc.javascript",
      "$esc.javascript"
    ],
    "body": [
      "\\$esc.javascript(${1:string})"
    ],
    "description": "Escapes the characters in a String using JavaScript String rules."
  },
  "$esc.sql(Object string): String": {
    "prefix": [
      "$",
      "esc.sql",
      "$esc.sql"
    ],
    "body": [
      "\\$esc.sql(${1:string})"
    ],
    "description": "Escapes the characters in a String to be suitable to pass to an SQL query."
  },
  "$esc.xml(Object string): String": {
    "prefix": [
      "$",
      "esc.xml",
      "$esc.xml"
    ],
    "body": [
      "\\$esc.xml(${1:string})"
    ],
    "description": "Escapes the characters in a String using XML entities."
  },
  "$mill.hasMore(): boolean": {
    "prefix": [
      "$",
      "mill.hasMore",
      "$mill.hasMore"
    ],
    "body": [
      "\\$mill.hasMore()"
    ],
    "description": "Returns true if there are more elements in the wrapped list."
  },
  "$mill.hasNext(): boolean": {
    "prefix": [
      "$",
      "mill.hasNext",
      "$mill.hasNext"
    ],
    "body": [
      "\\$mill.hasNext()"
    ],
    "description": "Returns true if there are more elements in the list and more() was called."
  },
  "$mill.more(): Object": {
    "prefix": [
      "$",
      "mill.more",
      "$mill.more"
    ],
    "body": [
      "\\$mill.more()"
    ],
    "description": "Asks for the next element in the list."
  },
  "$mill.next(): Object": {
    "prefix": [
      "$",
      "mill.next",
      "$mill.next"
    ],
    "body": [
      "\\$mill.next()"
    ],
    "description": "Gets the next object in the list."
  },
  "$mill.remove(): void": {
    "prefix": [
      "$",
      "mill.remove",
      "$mill.remove"
    ],
    "body": [
      "\\$mill.remove()"
    ],
    "description": "Removes the current element from the list."
  },
  "$mill.reset(): void": {
    "prefix": [
      "$",
      "mill.reset",
      "$mill.reset"
    ],
    "body": [
      "\\$mill.reset()"
    ],
    "description": "Resets the wrapper so that it starts over at the beginning of the list."
  },
  "$mill.stop(): void": {
    "prefix": [
      "$",
      "mill.stop",
      "$mill.stop"
    ],
    "body": [
      "\\$mill.stop()"
    ],
    "description": "Puts a condition to break out of the loop."
  },
  "$mill.wrap(Object list): IteratorTool": {
    "prefix": [
      "$",
      "mill.wrap()",
      "$mill.wrap()"
    ],
    "body": [
      "\\$mill.wrap(${1:list})"
    ],
    "description": "Wraps a list with the tool."
  },
  "$listTool.contains(Object list, Object element): Boolean": {
    "prefix": [
      "$",
      "listTool.contains",
      "$listTool.contains"
    ],
    "body": [
      "\\$listTool.contains(${1:list}, ${2:element})"
    ],
    "description": "Checks if a List/array contains a certain element."
  },
  "$listTool.get(Object list, int index): Object": {
    "prefix": [
      "$",
      "listTool.get",
      "$listTool.get"
    ],
    "body": [
      "\\$listTool.get(${1:list}, ${2:index})"
    ],
    "description": "Gets the specified element of a List/array."
  },
  "$listTool.isArray(Object object): boolean": {
    "prefix": [
      "$",
      "listTool.isArray",
      "$listTool.isArray"
    ],
    "body": [
      "\\$listTool.isArray(${1:object})"
    ],
    "description": "Checks if an object is an array."
  },
  "$listTool.isEmpty(Object list): Boolean": {
    "prefix": [
      "$",
      "listTool.isEmpty",
      "$listTool.isEmpty"
    ],
    "body": [
      "\\$listTool.isEmpty(${1:list})"
    ],
    "description": "Checks if a List/array is empty."
  },
  "$listTool.isList(Object object): boolean": {
    "prefix": [
      "$",
      "listTool.isList",
      "$listTool.isList"
    ],
    "body": [
      "\\$listTool.isList(${1:object})"
    ],
    "description": "Checks if an object is a List."
  },
  "$listTool.set(Object list, int index, Object value): Object": {
    "prefix": [
      "$",
      "listTool.set",
      "$listTool.set"
    ],
    "body": [
      "\\$listTool.set(${1:list}, ${2:index}, ${3:value})"
    ],
    "description": "Sets the specified element of a List/array."
  },
  "$listTool.size(Object list): Integer": {
    "prefix": [
      "$",
      "listTool.size",
      "$listTool.size"
    ],
    "body": [
      "\\$listTool.size(${1:list})"
    ],
    "description": "Gets the size of a List/array."
  },
  "$math.abs(Object num): Number": {
    "prefix": [
      "$",
      "math.abs",
      "$math.abs"
    ],
    "body": [
      "\\$math.abs(${1:num})"
    ],
    "description": ""
  },
  "$math.add(Object num1, Object num2): Number ": {
    "prefix": [
      "$",
      "math.add",
      "$math.add"
    ],
    "body": [
      "\\$math.add(${1:num1}, ${1:num2}) "
    ],
    "description": ""
  },
  "$math.ceil(Object num): Integer": {
    "prefix": [
      "$",
      "math.ceil",
      "$math.ceil"
    ],
    "body": [
      "\\$math.ceil(${1:num})"
    ],
    "description": ""
  },
  "$math.div(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.div",
      "$math.div"
    ],
    "body": [
      "\\$math.div(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.floor(Object num): Integer": {
    "prefix": [
      "$",
      "math.floor",
      "$math.floor"
    ],
    "body": [
      "\\$math.floor(${1:num})"
    ],
    "description": ""
  },
  "$math.getAverage(Collection collection): Number": {
    "prefix": [
      "$",
      "math.getAverage",
      "$math.getAverage"
    ],
    "body": [
      "\\$math.getAverage(${1:collection})"
    ],
    "description": "Get the average of the values"
  },
  "$math.getAverage(Collection collection | Object[] array, String field): Number": {
    "prefix": [
      "$",
      "math.getAverage",
      "$math.getAverage"
    ],
    "body": [
      "\\$math.getAverage(${1:collection}, ${2:field})"
    ],
    "description": "Get the average of the values from a list"
  },
  "$math.getAverage(double[] | long[] | Object[] values): Number": {
    "prefix": [
      "$",
      "math.getAverage",
      "$math.getAverage"
    ],
    "body": [
      "\\$math.getAverage(${1:values})"
    ],
    "description": "Get the average of the values in an array of double values"
  },
  "$math.getRandom(): Double": {
    "prefix": [
      "$",
      "math.getRandom",
      "$math.getRandom"
    ],
    "body": [
      "\\$math.getRandom()"
    ],
    "description": ""
  },
  "$math.getTotal(Collection collection | double[] values | long[] values | Object[] array): Number": {
    "prefix": [
      "$",
      "math.getTotal",
      "$math.getTotal"
    ],
    "body": [
      "\\$math.getTotal(${1:values})"
    ],
    "description": "Get the sum of the values"
  },
  "$math.getTotal(Collection collection | Object[] array, String field): Number": {
    "prefix": [
      "$",
      "math.getTotal",
      "$math.getTotal"
    ],
    "body": [
      "\\$math.getTotal(${1:collection}, ${2:field})"
    ],
    "description": "Get the sum of the values from a list"
  },
  "$math.idiv(Object num1, Object num2): Integer": {
    "prefix": [
      "$",
      "math.idiv",
      "$math.idiv"
    ],
    "body": [
      "\\$math.idiv(${1:num1}, ${2:num2})"
    ],
    "description": "Does integer division on the int values of the specified numbers."
  },
  "$math.matchType(Number in, double out): protected Number": {
    "prefix": [
      "$",
      "math.matchType",
      "$math.matchType"
    ],
    "body": [
      "\\$math.matchType(${1:in}, ${2:out})"
    ],
    "description": ""
  },
  "$math.matchType(Number in1, Number in2, double out): protected Number": {
    "prefix": [
      "$",
      "math.matchType",
      "$math.matchType"
    ],
    "body": [
      "\\$math.matchType(${1:in1}, ${2:in2}, ${3:out})"
    ],
    "description": "Takes the original argument(s) and returns the resulting value as an instance of the best matching type (Integer, Long, or Double)."
  },
  "$math.max(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.max",
      "$math.max"
    ],
    "body": [
      "\\$math.max(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.min(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.min",
      "$math.min"
    ],
    "body": [
      "\\$math.min(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.mod(Object num1, Object num2): Integer": {
    "prefix": [
      "$",
      "math.mod",
      "$math.mod"
    ],
    "body": [
      "\\$math.mod(${1:num1}, ${2:num2})"
    ],
    "description": "Does integer modulus on the int values of the specified numbers."
  },
  "$math.mul(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.mul",
      "$math.mul"
    ],
    "body": [
      "\\$math.mul(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.parseNumber(String value): protected Number": {
    "prefix": [
      "$",
      "math.parseNumber",
      "$math.parseNumber"
    ],
    "body": [
      "\\$math.parseNumber(${1:value})"
    ],
    "description": "Converts an object into a Number (if it can) This is used as the base for all numeric parsing methods."
  },
  "$math.pow(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.pow",
      "$math.pow"
    ],
    "body": [
      "\\$math.pow(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.random(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.random",
      "$math.random"
    ],
    "body": [
      "\\$math.random(${1:num1}, ${2:num2})"
    ],
    "description": "This returns a random Number within the specified range."
  },
  "$math.round(Object num): Integer": {
    "prefix": [
      "$",
      "math.round",
      "$math.round"
    ],
    "body": [
      "\\$math.round(${1:num})"
    ],
    "description": "Rounds a number to the nearest whole Integer"
  },
  "$math.sub(Object num1, Object num2): Number": {
    "prefix": [
      "$",
      "math.sub",
      "$math.sub"
    ],
    "body": [
      "\\$math.sub(${1:num1}, ${2:num2})"
    ],
    "description": ""
  },
  "$math.toDouble(Object num): Double": {
    "prefix": [
      "$",
      "math.toDouble",
      "$math.toDouble"
    ],
    "body": [
      "\\$math.toDouble(${1:num})"
    ],
    "description": "Converts an object with a numeric value into a Double Valid formats are Number or a String representation of a number."
  },
  "$math.toInteger(Object num): Integer": {
    "prefix": [
      "$",
      "math.toInteger",
      "$math.toInteger"
    ],
    "body": [
      "\\$math.toInteger(${1:num})"
    ],
    "description": "Converts an object with a numeric value into an Integer Valid formats are Number or a String representation of a number."
  },
  "$math.toNumber(Object num): Number": {
    "prefix": [
      "$",
      "math.toNumber",
      "$math.toNumber"
    ],
    "body": [
      "\\$math.toNumber(${1:num})"
    ],
    "description": "Converts an object with a numeric value into a Number Valid formats are Number or a String representation of a number."
  },
  "$number.format(Object obj): String": {
    "prefix": [
      "$",
      "number.format",
      "$number.format"
    ],
    "body": [
      "\\$number.format(${1:obj})"
    ],
    "description": "Converts the specified object to a number and formats it according to the pattern or style returned by getFormat()."
  },
  "$number.format(String format, Object obj): String": {
    "prefix": [
      "$",
      "number.format",
      "$number.format"
    ],
    "body": [
      "\\$number.format(${1:format}, ${2:obj})"
    ],
    "description": "Converts the specified object to a number and returns a formatted string representing that number in the locale returned by getLocale()."
  },
  "$number.format(String format, Object obj, Locale locale): String": {
    "prefix": [
      "$",
      "number.format",
      "$number.format"
    ],
    "body": [
      "\\$number.format(${1:format}, ${2:obj}, ${3:locale})"
    ],
    "description": "Converts the specified object to a number and returns a formatted string representing that number in the specified Locale."
  },
  "$number.getFormat(): String": {
    "prefix": [
      "$",
      "number.getFormat",
      "$number.getFormat"
    ],
    "body": [
      "\\$number.getFormat()"
    ],
    "description": "Return the pattern or style to be used for formatting numbers when none is specified."
  },
  "$number.getLocale(): Locale": {
    "prefix": [
      "$",
      "number.getLocale",
      "$number.getLocale"
    ],
    "body": [
      "\\$number.getLocale()"
    ],
    "description": "This implementation returns the default locale."
  },
  "$number.getNumberFormat(int numberStyle | String format, Locale locale): NumberFormat": {
    "prefix": [
      "$",
      "number.getNumberFormat",
      "$number.getNumberFormat"
    ],
    "body": [
      "\\$number.getNumberFormat(${1:numberStyle|format}, ${2:locale})"
    ],
    "description": "Returns a NumberFormat instance for the specified number style (or format) and Locale."
  },
  "$number.getStyleAsInt(String style): protected int": {
    "prefix": [
      "$",
      "number.getStyleAsInt",
      "$number.getStyleAsInt"
    ],
    "body": [
      "\\$number.getStyleAsInt(${1:style})"
    ],
    "description": "Checks a string to see if it matches one of the standard NumberFormat style patterns: NUMBER, CURRENCY, PERCENT, INTEGER, or DEFAULT."
  },
  "$number.toNumber(Object obj): Number": {
    "prefix": [
      "$",
      "number.toNumber",
      "$number.toNumber"
    ],
    "body": [
      "\\$number.toNumber(${1:obj})"
    ],
    "description": "Converts an object to an instance of Number using the format returned by getFormat() and the Locale returned by getLocale() if the object is not already an instance of Number."
  },
  "$number.toNumber(String format, Object obj): Number": {
    "prefix": [
      "$",
      "number.toNumber",
      "$number.toNumber"
    ],
    "body": [
      "\\$number.toNumber(${1:format}, ${2:obj})"
    ],
    "description": "Converts an object to an instance of Number using the specified format and the Locale returned by getLocale() if the object is not already an instance of Number."
  },
  "$number.toNumber(String format, Object obj, Locale locale): Number": {
    "prefix": [
      "$",
      "number.toNumber",
      "$number.toNumber"
    ],
    "body": [
      "\\$number.toNumber(${1:format}, ${2:obj}, ${3:locale})"
    ],
    "description": "Converts an object to an instance of Number using the specified format and Localeif the object is not already an instance of Number."
  },
  "$render.eval(Context ctx, String vtl): String": {
    "prefix": [
      "$",
      "render.eval",
      "$render.eval"
    ],
    "body": [
      "\\$render.eval(${1:ctx}, ${2:vtl})"
    ],
    "description": "Evaluates a String containing VTL using the current context, and returns the result as a String."
  },
  "$render.getParseDepth(): int": {
    "prefix": [
      "$",
      "render.getParseDepth",
      "$render.getParseDepth"
    ],
    "body": [
      "\\$render.getParseDepth()"
    ],
    "description": "Get the maximum number of loops allowed when recursing."
  },
  "$render.internalRecurse(Context ctx, String vtl, int count): protected String": {
    "prefix": [
      "$",
      "render.internalRecurse",
      "$render.internalRecurse"
    ],
    "body": [
      "\\$render.internalRecurse(${1:ctx}, ${2:vtl}, ${3:count})"
    ],
    "description": ""
  },
  "$render.recurse(Context ctx, String vtl): String": {
    "prefix": [
      "$",
      "render.recurse",
      "$render.recurse"
    ],
    "body": [
      "\\$render.recurse(${1:ctx}, ${2:vtl})"
    ],
    "description": "Recursively evaluates a String containing VTL using the current context, and returns the result as a String."
  },
  "$render.setParseDepth(int depth): void": {
    "prefix": [
      "$",
      "render.setParseDepth",
      "$render.setParseDepth"
    ],
    "body": [
      "\\$render.setParseDepth(${1:depth})"
    ],
    "description": "Set the maximum number of loops allowed when recursing."
  },
  "$render.setVelocityEngine(VelocityEngine ve): void": {
    "prefix": [
      "$",
      "render.setVelocityEngine",
      "$render.setVelocityEngine"
    ],
    "body": [
      "\\$render.setVelocityEngine(${1:ve})"
    ],
    "description": "DESCRIPTION"
  },
  "$sorter.getComparable(Object object, String property): protected static Comparable": {
    "prefix": [
      "$",
      "sorter.getComparable",
      "$sorter.getComparable"
    ],
    "body": [
      "\\$sorter.getComparable(${1:object}, ${2:property})"
    ],
    "description": "Safely retrieves the comparable value for the specified property from the specified object."
  },
  "$sorter.internalSort(List list, List properties): protected Collection": {
    "prefix": [
      "$",
      "sorter.internalSort",
      "$sorter.internalSort"
    ],
    "body": [
      "\\$sorter.internalSort(${1:list}, ${2:properties})"
    ],
    "description": ""
  },
  "$sorter.sort(Collection collection | map | Object[]): Collection": {
    "prefix": [
      "$",
      "sorter.sort",
      "$sorter.sort"
    ],
    "body": [
      "\\$sorter.sort(${1:collection|map|object[]})"
    ],
    "description": ""
  },
  "$sorter.sort(Map map | Object[], List properties | String property): Collection": {
    "prefix": [
      "$",
      "sorter.sort",
      "$sorter.sort"
    ],
    "body": [
      "\\$sorter.sort(${1:map|list}, ${2:properties|property})"
    ],
    "description": ""
  },
  "$parser.exists(String key): boolean": {
    "prefix": [
      "$",
      "parser.exists",
      "$parser.exists"
    ],
    "body": [
      "\\$parser.exists(${1:key})"
    ],
    "description": "Convenience method for checking whether a certain parameter exists."
  },
  "$parser.get(String key): String": {
    "prefix": [
      "$",
      "parser.get",
      "$parser.get"
    ],
    "body": [
      "\\$parser.get(${1:key})"
    ],
    "description": "Convenience method for use in Velocity templates."
  },
  "$parser.getBoolean(String key): Boolean": {
    "prefix": [
      "$",
      "parser.getBoolean",
      "$parser.getBoolean"
    ],
    "body": [
      "\\$parser.getBoolean(${1:key})"
    ],
    "description": ""
  },
  "$parser.getBoolean(String key, Boolean | boolean alternate): Boolean | boolean": {
    "prefix": [
      "$",
      "parser.getBoolean",
      "$parser.getBoolean"
    ],
    "body": [
      "\\$parser.getBoolean(${1:key}, ${2:alternate})"
    ],
    "description": ""
  },
  "$parser.getBooleans(String key): Boolean[]": {
    "prefix": [
      "$",
      "parser.getBooleans",
      "$parser.getBooleans"
    ],
    "body": [
      "\\$parser.getBooleans(${1:key})"
    ],
    "description": ""
  },
  "$parser.getDouble(String key, double alternate): double": {
    "prefix": [
      "$",
      "parser.getDouble",
      "$parser.getDouble"
    ],
    "body": [
      "\\$parser.getDouble(${1:key}, ${2:alternate})"
    ],
    "description": ""
  },
  "$parser.getDoubles(String key): double[]": {
    "prefix": [
      "$",
      "parser.getDoubles",
      "$parser.getDoubles"
    ],
    "body": [
      "\\$parser.getDoubles(${1:key})"
    ],
    "description": ""
  },
  "$parser.getInt(String key, int alternate): int": {
    "prefix": [
      "$",
      "parser.getInt",
      "$parser.getInt"
    ],
    "body": [
      "\\$parser.getInt(${1:key}, ${2:alternate})"
    ],
    "description": ""
  },
  "$parser.getInts(String key): int[]": {
    "prefix": [
      "$",
      "parser.getInts",
      "$parser.getInts"
    ],
    "body": [
      "\\$parser.getInts(${1:key})"
    ],
    "description": ""
  },
  "$parser.getNumber(String key): Number": {
    "prefix": [
      "$",
      "parser.getNumber",
      "$parser.getNumber"
    ],
    "body": [
      "\\$parser.getNumber(${1:key})"
    ],
    "description": ""
  },
  "$parser.getNumber(String key, Number alternate): Number": {
    "prefix": [
      "$",
      "parser.getNumber",
      "$parser.getNumber"
    ],
    "body": [
      "\\$parser.getNumber(${1:key}, ${2:alternate})"
    ],
    "description": ""
  },
  "$parser.getNumbers(String key): Number[]": {
    "prefix": [
      "$",
      "parser.getNumbers",
      "$parser.getNumbers"
    ],
    "body": [
      "\\$parser.getNumbers(${1:key})"
    ],
    "description": ""
  },
  "$parser.getSource(): protected Map": {
    "prefix": [
      "$",
      "parser.getSource()",
      "$parser.getSource()"
    ],
    "body": [
      "\\$parser.getSource()"
    ],
    "description": ""
  },
  "$parser.getString(String key): String": {
    "prefix": [
      "$",
      "parser.getString",
      "$parser.getString"
    ],
    "body": [
      "\\$parser.getString(${1:key})"
    ],
    "description": ""
  },
  "$parser.getString(String key, String alternate): String": {
    "prefix": [
      "$",
      "parser.getString",
      "$parser.getString"
    ],
    "body": [
      "\\$parser.getString(${1:key}, ${2:alternate})"
    ],
    "description": ""
  },
  "$parser.getStrings(String key): String[]": {
    "prefix": [
      "$",
      "parser.getStrings",
      "$parser.getStrings"
    ],
    "body": [
      "\\$parser.getStrings(${1:key})"
    ],
    "description": ""
  },
  "$parser.parseBoolean(String value): protected Boolean": {
    "prefix": [
      "$",
      "parser.parseBoolean",
      "$parser.parseBoolean"
    ],
    "body": [
      "\\$parser.parseBoolean(${1:value})"
    ],
    "description": "Converts a parameter value into a Boolean Sub-classes can override to allow for customized boolean parsing."
  },
  "$parser.parseNumber(String value): protected Number": {
    "prefix": [
      "$",
      "parser.parseNumber",
      "$parser.parseNumber"
    ],
    "body": [
      "\\$parser.parseNumber(${1:value})"
    ],
    "description": "Converts a parameter value into a Number This is used as the base for all numeric parsing methods."
  },
  "$parser.setSource(Map source): void": {
    "prefix": [
      "$",
      "parser.setSource",
      "$parser.setSource"
    ],
    "body": [
      "\\$parser.setSource(${1:source})"
    ],
    "description": ""
  },
  "$CASTool.isCASUserLoggedIn(User user, HttpServletRequest req): boolean": {
    "prefix": [
      "$",
      "CASTool.isCASUserLoggedIn",
      "$CASTool.isCASUserLoggedIn"
    ],
    "body": [
      "\\$CASTool.isCASUserLoggedIn(${1:user}, ${2:req})"
    ],
    "description": ""
  },
  "$categories.fetchCategoriesInodes(List<Category> cats): List<String>": {
    "prefix": [
      "$",
      "categories.fetchCategoriesInodes",
      "$categories.fetchCategoriesInodes"
    ],
    "body": [
      "\\$categories.fetchCategoriesInodes(${1:cats})"
    ],
    "description": ""
  },
  "$categories.fetchCategoriesKeys(List<Category> cats): List<String>": {
    "prefix": [
      "$",
      "categories.fetchCategoriesKeys",
      "$categories.fetchCategoriesKeys"
    ],
    "body": [
      "\\$categories.fetchCategoriesKeys(${1:cats})"
    ],
    "description": ""
  },
  "$categories.fetchCategoriesNames(List<Category> cats): List<String>": {
    "prefix": [
      "$",
      "categories.fetchCategoriesNames",
      "$categories.fetchCategoriesNames"
    ],
    "body": [
      "\\$categories.fetchCategoriesNames(${1:cats})"
    ],
    "description": ""
  },
  "$categories.filterCategoriesByUserPermissions(List<Object> catInodes): List<Category>": {
    "prefix": [
      "$",
      "categories.filterCategoriesByUserPermissions",
      "$categories.filterCategoriesByUserPermissions"
    ],
    "body": [
      "\\$categories.filterCategoriesByUserPermissions(${1:catInodes})"
    ],
    "description": ""
  },
  "$categories.getActiveChildrenCategories(Category | Inode | String cat): List<Category>": {
    "prefix": [
      "$",
      "categories.getActiveChildrenCategories",
      "$categories.getActiveChildrenCategories"
    ],
    "body": [
      "\\$categories.getActiveChildrenCategories(${1:cat|inode})"
    ],
    "description": ""
  },
  "$categories.getActiveChildrenCategoriesByKey(String key): List<Category>": {
    "prefix": [
      "$",
      "categories.getActiveChildrenCategoriesByKey",
      "$categories.getActiveChildrenCategoriesByKey"
    ],
    "body": [
      "\\$categories.getActiveChildrenCategoriesByKey(${1:key})"
    ],
    "description": ""
  },
  "$categories.getActiveChildrenCategoriesByParent(ArrayList<String> o): List<Category>": {
    "prefix": [
      "$",
      "categories.getActiveChildrenCategoriesByParent",
      "$categories.getActiveChildrenCategoriesByParent"
    ],
    "body": [
      "\\$categories.getActiveChildrenCategoriesByParent(${1:o})"
    ],
    "description": ""
  },
  "$categories.getActiveChildrenCategoriesOrderByName(Category | Inode | String cat): List<Category>": {
    "prefix": [
      "$",
      "categories.getActiveChildrenCategoriesOrderByName",
      "$categories.getActiveChildrenCategoriesOrderByName"
    ],
    "body": [
      "\\$categories.getActiveChildrenCategoriesOrderByName(${1:cat})"
    ],
    "description": ""
  },
  "$categories.getAllActiveChildrenCategories(Inode | String | key inode): List<Map<String,Object>>": {
    "prefix": [
      "$",
      "categories.getAllActiveChildrenCategories",
      "$categories.getAllActiveChildrenCategories"
    ],
    "body": [
      "\\$categories.getAllActiveChildrenCategories(${1:inode|key})"
    ],
    "description": "Retrieves a plain list of all the children categories (any depth) of the given parent inode/key The list returned is a list of maps, each map has the category and the level of this category belongs E.G."
  },
  "$categories.getCategoryAPI(): CategoryAPI": {
    "prefix": [
      "$",
      "categories.getCategoryAPI",
      "$categories.getCategoryAPI",
      "getAPI"
    ],
    "body": [
      "\\$categories.getCategoryAPI()"
    ],
    "description": ""
  },
  "$categories.getCategoryByInode(String inode): Category": {
    "prefix": [
      "$",
      "categories.getCategoryByInode",
      "$categories.getCategoryByInode"
    ],
    "body": [
      "\\$categories.getCategoryByInode(${1:inode})"
    ],
    "description": ""
  },
  "$categories.getCategoryByKey(String key): Category": {
    "prefix": [
      "$",
      "categories.getCategoryByKey",
      "$categories.getCategoryByKey"
    ],
    "body": [
      "\\$categories.getCategoryByKey(${1:key})"
    ],
    "description": ""
  },
  "$categories.getCategoryKeyByContentlet(String contentletInode): String": {
    "prefix": [
      "$",
      "categories.getCategoryKeyByContentlet",
      "$categories.getCategoryKeyByContentlet"
    ],
    "body": [
      "\\$categories.getCategoryKeyByContentlet(${1:contentletInode})"
    ],
    "description": ""
  },
  "$categories.getChildrenCategories(Category | Inode | String cat): List<Category>": {
    "prefix": [
      "$",
      "categories.getChildrenCategories",
      "$categories.getChildrenCategories"
    ],
    "body": [
      "\\$categories.getChildrenCategories(${1:cat})"
    ],
    "description": ""
  },
  "$categories.getChildrenCategories(String inode, boolean includeGrandChildren, int maxDepth): List<Category>": {
    "prefix": [
      "$",
      "categories.getChildrenCategories",
      "$categories.getChildrenCategories"
    ],
    "body": [
      "\\$categories.getChildrenCategories(${1:inode}, ${2:includeGrandChildren}, ${3:maxDepth})"
    ],
    "description": "Retrieves the list of categories, their children categories and grand-children categories upto the specified maxDepth."
  },
  "$categories.getChildrenCategoriesByKey(String key): List<Category>": {
    "prefix": [
      "$",
      "categories.getChildrenCategoriesByKey",
      "$categories.getChildrenCategoriesByKey"
    ],
    "body": [
      "\\$categories.getChildrenCategoriesByKey(${1:key})"
    ],
    "description": ""
  },
  "$categories.getInodeCategories(Inode | String inodeObj): List<Category>": {
    "prefix": [
      "$",
      "categories.getInodeCategories",
      "$categories.getInodeCategories"
    ],
    "body": [
      "\\$categories.getInodeCategories(${1:inode})"
    ],
    "description": ""
  },
  "$categories.setCategoryAPI(CategoryAPI categoryAPI): void": {
    "prefix": [
      "$",
      "categories.setCategoryAPI",
      "$categories.setCategoryAPI"
    ],
    "body": [
      "\\$categories.setCategoryAPI(${1:categoryAPI})"
    ],
    "description": ""
  },
  "$cmsuser.getCategoryAPI(): CategoryAPI": {
    "prefix": [
      "$",
      "cmsuser.getCategoryAPI",
      "$cmsuser.getCategoryAPI",
      "getAPI"
    ],
    "body": [
      "\\$cmsuser.getCategoryAPI()"
    ],
    "description": ""
  },
  "$cmsuser.getLoggedInUser(HttpServletRequest request): User": {
    "prefix": [
      "$",
      "cmsuser.getLoggedInUser",
      "$cmsuser.getLoggedInUser"
    ],
    "body": [
      "\\$cmsuser.getLoggedInUser($request)"
    ],
    "description": "Retrieves the logged user from session"
  },
  "$cmsuser.getUserByEmail(String email): User": {
    "prefix": [
      "$",
      "cmsuser.getUserByEmail",
      "$cmsuser.getUserByEmail"
    ],
    "body": [
      "\\$cmsuser.getUserByEmail(${1:email})"
    ],
    "description": ""
  },
  "$cmsuser.getUserByUserId(String userId): User": {
    "prefix": [
      "$",
      "cmsuser.getUserByUserId",
      "$cmsuser.getUserByUserId"
    ],
    "body": [
      "\\$cmsuser.getUserByUserId(${1:userId})"
    ],
    "description": "get User by user id"
  },
  "$cmsuser.getUserGroups(User user): List<Role>": {
    "prefix": [
      "$",
      "cmsuser.getUserGroups",
      "$cmsuser.getUserGroups"
    ],
    "body": [
      "\\$cmsuser.getUserGroups(${1:user})"
    ],
    "description": "This method return all the groups joined by the specified user"
  },
  "$cmsuser.getUserRoles(User user): List<Role>": {
    "prefix": [
      "$",
      "cmsuser.getUserRoles",
      "$cmsuser.getUserRoles"
    ],
    "body": [
      "\\$cmsuser.getUserRoles(${1:user})"
    ],
    "description": "This method return all the roles joined by the specified user"
  },
  "$cmsuser.hasRole(String roleKey): boolean": {
    "prefix": [
      "$",
      "cmsuser.hasRole",
      "$cmsuser.hasRole"
    ],
    "body": [
      "\\$cmsuser.hasRole(${1:roleKey})"
    ],
    "description": "This method return true|false if the user has a specific role (by key)"
  },
  "$cmsuser.isCMSAdmin(User user): boolean": {
    "prefix": [
      "$",
      "cmsuser.isCMSAdmin",
      "$cmsuser.isCMSAdmin"
    ],
    "body": [
      "\\$cmsuser.isCMSAdmin(${1:user})"
    ],
    "description": "This method return true|false if the user has a CMSAdmin role"
  },
  "$cmsuser.isUserRole(User user, String roleName): boolean": {
    "prefix": [
      "$",
      "cmsuser.isUserRole",
      "$cmsuser.isUserRole"
    ],
    "body": [
      "\\$cmsuser.isUserRole(${1:user}, ${2:roleName})"
    ],
    "description": "This method return true|false if the user has a specific role"
  },
  "$cmsuser.setCategoryAPI(CategoryAPI categoryAPI): void": {
    "prefix": [
      "$",
      "cmsuser.setCategoryAPI",
      "$cmsuser.setCategoryAPI"
    ],
    "body": [
      "\\$cmsuser.setCategoryAPI(${1:categoryAPI})"
    ],
    "description": ""
  },
  "$config.getBooleanProperty(String name): boolean": {
    "prefix": [
      "$",
      "config.getBooleanProperty",
      "$config.getBooleanProperty"
    ],
    "body": [
      "\\$config.getBooleanProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getBooleanProperty(String name, boolean defaultVal): boolean": {
    "prefix": [
      "$",
      "config.getBooleanProperty",
      "$config.getBooleanProperty"
    ],
    "body": [
      "\\$config.getBooleanProperty(${1:name}, ${2:defaultVal})"
    ],
    "description": ""
  },
  "$config.getFloatProperty(String name): float": {
    "prefix": [
      "$",
      "config.getFloatProperty",
      "$config.getFloatProperty"
    ],
    "body": [
      "\\$config.getFloatProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getFloatProperty(String name, float defaultVal): float": {
    "prefix": [
      "$",
      "config.getFloatProperty",
      "$config.getFloatProperty"
    ],
    "body": [
      "\\$config.getFloatProperty(${1:name}, ${2:defaultVal})"
    ],
    "description": ""
  },
  "$config.getIntProperty(String name): int": {
    "prefix": [
      "$",
      "config.getIntProperty",
      "$config.getIntProperty"
    ],
    "body": [
      "\\$config.getIntProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getIntProperty(String name, int defValue): int": {
    "prefix": [
      "$",
      "config.getIntProperty",
      "$config.getIntProperty"
    ],
    "body": [
      "\\$config.getIntProperty(${1:name}, ${2:defValue})"
    ],
    "description": ""
  },
  "$config.getLongProperty(String name): long": {
    "prefix": [
      "$",
      "config.getLongProperty",
      "$config.getLongProperty"
    ],
    "body": [
      "\\$config.getLongProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getLongProperty(String name, int defValue): long": {
    "prefix": [
      "$",
      "config.getLongProperty",
      "$config.getLongProperty"
    ],
    "body": [
      "\\$config.getLongProperty(${1:name}, ${2:defValue})"
    ],
    "description": ""
  },
  "$config.getStringArrayProperty(String name): String[]": {
    "prefix": [
      "$",
      "config.getStringArrayProperty",
      "$config.getStringArrayProperty"
    ],
    "body": [
      "\\$config.getStringArrayProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getStringProperty(String name): String": {
    "prefix": [
      "$",
      "config.getStringProperty",
      "$config.getStringProperty"
    ],
    "body": [
      "\\$config.getStringProperty(${1:name})"
    ],
    "description": ""
  },
  "$config.getStringProperty(String name, String defValue): String": {
    "prefix": [
      "$",
      "config.getStringProperty",
      "$config.getStringProperty"
    ],
    "body": [
      "\\$config.getStringProperty(${1:name}, ${2:defValue})"
    ],
    "description": ""
  },
  "$containerAPI.doesUserHasPermission(String containerInode, int permission, boolean respectFrontendRoles): boolean": {
    "prefix": [
      "$",
      "containerAPI.doesUserHasPermission",
      "$containerAPI.doesUserHasPermission"
    ],
    "body": [
      "\\$containerAPI.doesUserHasPermission(${1:containerInode}, ${2:permission}, ${3:respectFrontendRoles})"
    ],
    "description": "This method checks if the logged in user (frontend) has the required permission over the passed container id"
  },
  "$containerAPI.doesUserHasPermissionToAddContent(String containerInode): boolean": {
    "prefix": [
      "$",
      "containerAPI.doesUserHasPermissionToAddContent",
      "$containerAPI.doesUserHasPermissionToAddContent"
    ],
    "body": [
      "\\$containerAPI.doesUserHasPermissionToAddContent(${1:containerInode})"
    ],
    "description": "This method checks if the logged in user has the required permission to ADD any content into the the passed container id"
  },
  "$containerAPI.doesUserHasPermissionToAddForm(String containerInode): boolean": {
    "prefix": [
      "$",
      "containerAPI.doesUserHasPermissionToAddForm",
      "$containerAPI.doesUserHasPermissionToAddForm"
    ],
    "body": [
      "\\$containerAPI.doesUserHasPermissionToAddForm(${1:containerInode})"
    ],
    "description": "This method checks if the logged in user has the required permission to ADD any form into the the passed container id"
  },
  "$containerAPI.doesUserHasPermissionToAddWidget(String containerInode): boolean": {
    "prefix": [
      "$",
      "containerAPI.doesUserHasPermissionToAddWidget",
      "$containerAPI.doesUserHasPermissionToAddWidget"
    ],
    "body": [
      "\\$containerAPI.doesUserHasPermissionToAddWidget(${1:containerInode})"
    ],
    "description": "This method checks if the logged in user has the required permission to ADD any widget into the the passed container id"
  },
  "$containerAPI.getBaseContentTypeUserHasPermissionToAdd(String containerInode): String": {
    "prefix": [
      "$",
      "containerAPI.getBaseContentTypeUserHasPermissionToAdd",
      "$containerAPI.getBaseContentTypeUserHasPermissionToAdd"
    ],
    "body": [
      "\\$containerAPI.getBaseContentTypeUserHasPermissionToAdd(${1:containerInode})"
    ],
    "description": ""
  },
  "$containerAPI.getPersonalizedContentList(String pageId, String containerId, String uuid): List<String>": {
    "prefix": [
      "$",
      "containerAPI.getPersonalizedContentList",
      "$containerAPI.getPersonalizedContentList"
    ],
    "body": [
      "\\$containerAPI.getPersonalizedContentList(${1:pageId}, ${2:containerId}, ${3:uuid})"
    ],
    "description": "This method returns the personalized list of content ids that match the persona of the visitor"
  },
  "$containerAPI.getStructureCode(String containerIdentifier, String structureId): String": {
    "prefix": [
      "$",
      "containerAPI.getStructureCode",
      "$containerAPI.getStructureCode"
    ],
    "body": [
      "\\$containerAPI.getStructureCode(${1:containerIdentifier}, ${2:structureId})"
    ],
    "description": ""
  },
  "$contents.canLock(String inode): boolean": {
    "prefix": [
      "$",
      "contents.canLock",
      "$contents.canLock"
    ],
    "body": [
      "\\$contents.canLock(${1:inode})"
    ],
    "description": "Returns if a contentlet can be locked by the current user"
  },
  "$contents.doesUserHasPermission(String contentInode, int permission): boolean": {
    "prefix": [
      "$",
      "contents.doesUserHasPermission",
      "$contents.doesUserHasPermission"
    ],
    "body": [
      "\\$contents.doesUserHasPermission(${1:contentInode}, ${2:permission})"
    ],
    "description": "This method checks if the logged in user (frontend) has the required permission over the passed contentlet id"
  },
  "$contents.doesUserHasPermission(String contentInode, int permission, boolean editMode): boolean": {
    "prefix": [
      "$",
      "contents.doesUserHasPermission",
      "$contents.doesUserHasPermission"
    ],
    "body": [
      "\\$contents.doesUserHasPermission(${1:contentInode}, ${2:permission}, ${3:editMode})"
    ],
    "description": "This method checks if the logged in user (frontend) has the required permission over the passed contentlet id"
  },
  "$contents.doesUserHasPermission(String contentInode, int permission, User user, boolean respectFrontendRoles): boolean": {
    "prefix": [
      "$",
      "contents.doesUserHasPermission",
      "$contents.doesUserHasPermission"
    ],
    "body": [
      "\\$contents.doesUserHasPermission(${1:contentInode}, ${2:permission}, ${3:user}, ${4:respectFrontendRoles})"
    ],
    "description": "This method checks if the logged in user (frontend) has the required permission over the passed contentlet id"
  },
  "$contents.findFieldValues(String structureName, String fieldName, User user): List<String>": {
    "prefix": [
      "$",
      "contents.findFieldValues",
      "$contents.findFieldValues"
    ],
    "body": [
      "\\$contents.findFieldValues(${1:structureName}, ${2:fieldName}, ${3:user})"
    ],
    "description": "This method return the possible values in a field of all the contents of the specified structure"
  },
  "$contents.getCategoryAPI(): CategoryAPI": {
    "prefix": [
      "$",
      "contents.getCategoryAPI",
      "$contents.getCategoryAPI",
      "getAPI"
    ],
    "body": [
      "\\$contents.getCategoryAPI()"
    ],
    "description": ""
  },
  "$contents.getContentByInode(String inode): Contentlet": {
    "prefix": [
      "$",
      "contents.getContentByInode",
      "$contents.getContentByInode"
    ],
    "body": [
      "\\$contents.getContentByInode(${1:inode})"
    ],
    "description": ""
  },
  "$contents.getContentIdentifiersFromLuceneHits(LuceneHits assets): List<String>": {
    "prefix": [
      "$",
      "contents.getContentIdentifiersFromLuceneHits",
      "$contents.getContentIdentifiersFromLuceneHits"
    ],
    "body": [
      "\\$contents.getContentIdentifiersFromLuceneHits(${1:assets})"
    ],
    "description": "This methods retrieves the identifier for a list of contents hits retrieved from lucene this method is used in the dynamic containers code to get the list of contents"
  },
  "$contents.getContentletAPI(): ContentletAPI": {
    "prefix": [
      "$",
      "contents.getContentletAPI",
      "$contents.getContentletAPI",
      "getAPI"
    ],
    "body": [
      "\\$contents.getContentletAPI()"
    ],
    "description": ""
  },
  "$contents.getContentletByUrl(HttpServletRequest request, String structureName, String fieldName): String": {
    "prefix": [
      "$",
      "contents.getContentletByUrl",
      "$contents.getContentletByUrl"
    ],
    "body": [
      "\\$contents.getContentletByUrl(${1:request}, ${2:structureName}, ${3:fieldName})"
    ],
    "description": "This methods matches the browsers URL to a contentlet field and returns the contentlet with the closest match."
  },
  "$contents.getContentletCategories(String inode): List<Category>": {
    "prefix": [
      "$",
      "contents.getContentletCategories",
      "$contents.getContentletCategories"
    ],
    "body": [
      "\\$contents.getContentletCategories(${1:inode})"
    ],
    "description": ""
  },
  "$contents.getEmptyList(): List": {
    "prefix": [
      "$",
      "contents.getEmptyList()",
      "$contents.getEmptyList()"
    ],
    "body": [
      "\\$contents.getEmptyList()"
    ],
    "description": ""
  },
  "$contents.getEmptyMap(): Map": {
    "prefix": [
      "$",
      "contents.getEmptyMap()",
      "$contents.getEmptyMap()"
    ],
    "body": [
      "\\$contents.getEmptyMap()"
    ],
    "description": ""
  },
  "$contents.getFieldByLogicalName(String structureType, String fieldName): Field": {
    "prefix": [
      "$",
      "contents.getFieldByLogicalName",
      "$contents.getFieldByLogicalName"
    ],
    "body": [
      "\\$contents.getFieldByLogicalName(${1:structureType}, ${2:fieldName})"
    ],
    "description": "This methods retrieves the field of an structure based on his logical name"
  },
  "$contents.getFieldByLogicalName(Structure st, String fieldName): Field": {
    "prefix": [
      "$",
      "contents.getFieldByLogicalName",
      "$contents.getFieldByLogicalName"
    ],
    "body": [
      "\\$contents.getFieldByLogicalName(${1:st}, ${2:fieldName})"
    ],
    "description": "This methods retrieves the field of an structure based on his logical name."
  },
  "$contents.getFieldByLogicalNameAndInode(String structureInode, String fieldName): Field": {
    "prefix": [
      "$",
      "contents.getFieldByLogicalNameAndInode",
      "$contents.getFieldByLogicalNameAndInode"
    ],
    "body": [
      "\\$contents.getFieldByLogicalNameAndInode(${1:structureInode}, ${2:fieldName})"
    ],
    "description": "This methods retrieves the field of an structure based on his logical name."
  },
  "$contents.getRelationshipByName(String relationshipName): Relationship": {
    "prefix": [
      "$",
      "contents.getRelationshipByName",
      "$contents.getRelationshipByName"
    ],
    "body": [
      "\\$contents.getRelationshipByName(${1:relationshipName})"
    ],
    "description": "This method retrieves the relationship by relation type value = relationship name"
  },
  "$contents.getRelationshipsOfContentlet(Contentlet cont): List<Relationship>": {
    "prefix": [
      "$",
      "contents.getRelationshipsOfContentlet",
      "$contents.getRelationshipsOfContentlet"
    ],
    "body": [
      "\\$contents.getRelationshipsOfContentlet(${1:cont})"
    ],
    "description": "This methods gets the list of all the relationship objects associated to the structure of the contentlet as a parent or a child"
  },
  "$contents.getRelationshipsOfContentlet(Contentlet cont, boolean hasParent): List<Relationship>": {
    "prefix": [
      "$",
      "contents.getRelationshipsOfContentlet",
      "$contents.getRelationshipsOfContentlet"
    ],
    "body": [
      "\\$contents.getRelationshipsOfContentlet(${1:cont}, ${2:hasParent})"
    ],
    "description": "This gets the list of all the relationship objects associated to the structure of the contentlet"
  },
  "$contents.getRelationshipsOfContentlet(String contentletInode): List<Relationship>": {
    "prefix": [
      "$",
      "contents.getRelationshipsOfContentlet",
      "$contents.getRelationshipsOfContentlet"
    ],
    "body": [
      "\\$contents.getRelationshipsOfContentlet(${1:contentletInode})"
    ],
    "description": ""
  },
  "$contents.getStructureByInode(String structureInode): Structure": {
    "prefix": [
      "$",
      "contents.getStructureByInode",
      "$contents.getStructureByInode"
    ],
    "body": [
      "\\$contents.getStructureByInode(${1:structureInode})"
    ],
    "description": "Get the Structure from cache by inode"
  },
  "$contents.getUrlMapForContentlet(Contentlet | Map<String,Object> contentlet): String": {
    "prefix": [
      "$",
      "contents.getUrlMapForContentlet",
      "$contents.getUrlMapForContentlet"
    ],
    "body": [
      "\\$contents.getUrlMapForContentlet(${1:contentlet})"
    ],
    "description": "Return the URL Map for the specified content if the structure associated to the content has the URL Map Pattern set."
  },
  "$contents.getUrlMapForContentlet(String identifier): String": {
    "prefix": [
      "$",
      "contents.getUrlMapForContentlet",
      "$contents.getUrlMapForContentlet"
    ],
    "body": [
      "\\$contents.getUrlMapForContentlet(String identifier)"
    ],
    "description": "Return the URL Map for the specified content identifier if the structure associated to the content has the URL Map Pattern set."
  },
  "$contents.isChild(Contentlet contentlet | String inode, Relationship | String relationship): static boolean | boolean": {
    "prefix": [
      "$",
      "contents.isChild",
      "$contents.isChild"
    ],
    "body": [
      "\\$contents.isChild(${1:contentlet|inode}, ${2:relationship|relationshipInode})"
    ],
    "description": "This methods checks if the given contentlet has the role of child of the given relationship"
  },
  "$contents.isContent(String inode): boolean": {
    "prefix": [
      "$",
      "contents.isContent",
      "$contents.isContent"
    ],
    "body": [
      "\\$contents.isContent(String inode)"
    ],
    "description": "Returns if a contentlet (found by Inode) is locked"
  },
  "$contents.isContentletIdentifierOrInode(String id): boolean": {
    "prefix": [
      "$",
      "contents.isContentletIdentifierOrInode",
      "$contents.isContentletIdentifierOrInode"
    ],
    "body": [
      "\\$contents.isContentletIdentifierOrInode(${1:id})"
    ],
    "description": "This method return if a identifier or inode is from a contentlet object."
  },
  "$contents.isLocked(String inode): boolean": {
    "prefix": [
      "$",
      "contents.isLocked",
      "$contents.isLocked"
    ],
    "body": [
      "\\$contents.isLocked(${1:inode})"
    ],
    "description": "Returns if a contentlet (found by Inode) is locked"
  },
  "$contents.isLocked(String identifier, long lang): boolean": {
    "prefix": [
      "$",
      "contents.isLocked",
      "$contents.isLocked"
    ],
    "body": [
      "\\$contents.isLocked(${1:identifier}, ${2:lang})"
    ],
    "description": "Returns if a contentlet (found by identifier) is locked."
  },
  "$contents.isParent(Contentlet contentlet | String inode, Relationship relationship | String relationshipInode): static boolean": {
    "prefix": [
      "$",
      "contents.isParent",
      "$contents.isParent"
    ],
    "body": [
      "\\$contents.isParent(${1:contentlet|inode}, ${2:relationship|relationshipInode})"
    ],
    "description": "This methods checks if the given contentlet has the role of parent of the given relationship"
  },
  "$contents.pageContent(String query, String sortBy, String perPage, String currentPageNumber): HashMap": {
    "prefix": [
      "$",
      "contents.pageContent",
      "$contents.pageContent"
    ],
    "body": [
      "\\$contents.pageContent(${1:query}, ${2:sortBy}, ${3:perPage}, ${4:currentPageNumber})"
    ],
    "description": "This method pulls dynamic lists of content in the form of maps for the front end of the web site using pagination."
  },
  "$contents.pullContent(String query, String lim, String sortBy): List": {
    "prefix": [
      "$",
      "contents.pullContent",
      "$contents.pullContent"
    ],
    "body": [
      "\\$contents.pullContent(${1:query}, ${2:lim}, ${3:sortBy})"
    ],
    "description": ""
  },
  "$contents.pullContent(String query, String lim, String sortBy, Boolean editMode): List": {
    "prefix": [
      "$",
      "contents.pullContent",
      "$contents.pullContent"
    ],
    "body": [
      "\\$contents.pullContent(${1:query}, ${2:lim}, ${3:sortBy}, ${4:editMode})"
    ],
    "description": ""
  },
  "$contents.pullPersonalizedContentByCategories(String query, String lim, String sortBy, List categoryList): List": {
    "prefix": [
      "$",
      "contents.pullPersonalizedContentByCategories",
      "$contents.pullPersonalizedContentByCategories"
    ],
    "body": [
      "\\$contents.pullPersonalizedContentByCategories(${1:query}, ${2:lim}, ${3:sortBy}, ${4:categoryList})"
    ],
    "description": ""
  },
  "$contents.randomizeList(List list, String limit): List": {
    "prefix": [
      "$",
      "contents.randomizeList",
      "$contents.randomizeList"
    ],
    "body": [
      "\\$contents.randomizeList(${1:list}, ${2:limit})"
    ],
    "description": ""
  },
  "$contents.searchWithLuceneQuery(String structureType, String luceneCondition, String sortBy, int maxResults): HashMap": {
    "prefix": [
      "$",
      "contents.searchWithLuceneQuery",
      "$contents.searchWithLuceneQuery"
    ],
    "body": [
      "\\$contents.searchWithLuceneQuery(${1:structureType}, ${2:luceneCondition}, ${3:sortBy}, ${4:maxResults})"
    ],
    "description": ""
  },
  "$contents.searchWithLuceneQuery(String structureType, String luceneCondition, String sortBy, int maxResults, int page, int pageSize): HashMap": {
    "prefix": [
      "$",
      "contents.searchWithLuceneQuery",
      "$contents.searchWithLuceneQuery"
    ],
    "body": [
      "\\$contents.searchWithLuceneQuery(${1:structureType}, ${2:luceneCondition}, ${3:sortBy}, ${4:maxResults}, ${5:page}, ${6:pageSize})"
    ],
    "description": ""
  },
  "$contents.searchWithLuceneQuery(String structureType, String luceneCondition, String sortBy, String pageStr, String rowsPerPage): HashMap": {
    "prefix": [
      "$",
      "contents.searchWithLuceneQuery",
      "$contents.searchWithLuceneQuery"
    ],
    "body": [
      "\\$contents.searchWithLuceneQuery(${1:structureType}, ${2:luceneCondition}, ${3:sortBy}, ${4:pageStr}, ${5:rowsPerPage})"
    ],
    "description": "This method searches inside the lucene index for contents, this methods uses the contentlet database names of the fields in the condition and the sort by field so you should convert the display names of the fields to the contentlet fields names before call this method"
  },
  "$contents.setCategoryAPI(CategoryAPI categoryAPI): void": {
    "prefix": [
      "$",
      "contents.setCategoryAPI",
      "$contents.setCategoryAPI"
    ],
    "body": [
      "\\$contents.setCategoryAPI(${1:categoryAPI})"
    ],
    "description": ""
  },
  "$contents.setContentletAPI(ContentletAPI conAPI): void": {
    "prefix": [
      "$",
      "contents.setContentletAPI",
      "$contents.setContentletAPI"
    ],
    "body": [
      "\\$contents.setContentletAPI(${1:conAPI})"
    ],
    "description": ""
  },
  "$crypt.crypt(String text): static String": {
    "prefix": [
      "$",
      "crypt.crypt",
      "$crypt.crypt"
    ],
    "body": [
      "\\$crypt.crypt(${1:text})"
    ],
    "description": "Encrypt a text"
  },
  "$crypt.decrypt(String text): static String": {
    "prefix": [
      "$",
      "crypt.decrypt",
      "$crypt.decrypt"
    ],
    "body": [
      "\\$crypt.decrypt(${1:text})"
    ],
    "description": "Decrypt a text"
  },
  "$dateviewapi.friendly(Date date): static String": {
    "prefix": [
      "$",
      "dateviewapi.friendly",
      "$dateviewapi.friendly"
    ],
    "body": [
      "\\$dateviewapi.friendly(${1:date})"
    ],
    "description": "Method of the API to show custom diff date result with the current date."
  },
  "$dateviewapi.getOffSet(): static int": {
    "prefix": [
      "$",
      "dateviewapi.getOffSet",
      "$dateviewapi.getOffSet"
    ],
    "body": [
      "\\$dateviewapi.getOffSet"
    ],
    "description": ""
  },
  "$dateviewapi.getOffSet(Date date): static int": {
    "prefix": [
      "$",
      "dateviewapi.getOffSet",
      "$dateviewapi.getOffSet"
    ],
    "body": [
      "\\$dateviewapi.getOffSet(${1:date})"
    ],
    "description": ""
  },
  "$macro.canUserEvaluate(): protected boolean": {
    "prefix": [
      "$",
      "macro.canUserEvaluate",
      "$macro.canUserEvaluate"
    ],
    "body": [
      "\\$macro.canUserEvaluate()"
    ],
    "description": ""
  },
  "$macro.getEvents(String categories, int limit, int | String startDayOffset, int | String daysToShow): List": {
    "prefix": [
      "$",
      "macro.getEvents",
      "$macro.getEvents"
    ],
    "body": [
      "\\$macro.getEvents(${1:categories}, ${2:limit}, ${3:startDayOffset}, ${4:daysToShow})"
    ],
    "description": "Get a list of x number of events, from a category inode list in a range of dates."
  },
  "$macro.getfileRepository(String folderPath, String searchFolder, HttpServletRequest request): List": {
    "prefix": [
      "$",
      "macro.getfileRepository",
      "$macro.getfileRepository"
    ],
    "body": [
      "\\$macro.getfileRepository(${1:folderPath}, ${2:searchFolder}, ${3:request})"
    ],
    "description": ""
  },
  "$macro.getFileSystemFolder(String folder): List": {
    "prefix": [
      "$",
      "macro.getFileSystemFolder",
      "$macro.getFileSystemFolder"
    ],
    "body": [
      "\\$macro.getFileSystemFolder(${1:folder})"
    ],
    "description": ""
  },
  "$macro.getFolderPath(String rootFolder, HttpServletRequest request): String": {
    "prefix": [
      "$",
      "macro.getFolderPath",
      "$macro.getFolderPath"
    ],
    "body": [
      "\\$macro.getFolderPath(${1:rootFolder}, ${2:request})"
    ],
    "description": ""
  },
  "$macro.getLinkRepository(String folderPath, HttpServletRequest request): List<Link>": {
    "prefix": [
      "$",
      "macro.getLinkRepository",
      "$macro.getLinkRepository"
    ],
    "body": [
      "\\$macro.getLinkRepository(${1:folderPath}, ${2:request})"
    ],
    "description": ""
  },
  "$macro.getMediaGalleryFolderFiles(String folderPath, Host host | String hostId): List<HashMap<String,IFileAsset>>": {
    "prefix": [
      "$",
      "macro.getMediaGalleryFolderFiles",
      "$macro.getMediaGalleryFolderFiles"
    ],
    "body": [
      "\\$macro.getMediaGalleryFolderFiles(${1:folderPath}, ${2:host|hostId})"
    ],
    "description": "Return a list of hashmap with the files to show in the media gallery"
  },
  "$macro.sortAlpha(Set<String> stringSet): static List<String>": {
    "prefix": [
      "$",
      "macro.sortAlpha",
      "$macro.sortAlpha"
    ],
    "body": [
      "\\$macro.sortAlpha(${1:stringSet})"
    ],
    "description": "returns a string set alphabetically ordered"
  },
  "$macro.topMostPopularTags(HashMap tagHashMap, int maxNumberOfTags): static HashMap": {
    "prefix": [
      "$",
      "macro.topMostPopularTags",
      "$macro.topMostPopularTags"
    ],
    "body": [
      "\\$macro.topMostPopularTags(${1:tagHashMap}, ${2:maxNumberOfTags})"
    ],
    "description": "returns a map of the top most popular tags, this map has the tag name as a key and the tag count as value"
  },
  "$dotlogger.debug(String s): void": {
    "prefix": [
      "$",
      "dotlogger.debug",
      "$dotlogger.debug"
    ],
    "body": [
      "\\$dotlogger.debug(${1:s})"
    ],
    "description": ""
  },
  "$dotlogger.error(String s): void": {
    "prefix": [
      "$",
      "dotlogger.error",
      "$dotlogger.error"
    ],
    "body": [
      "\\$dotlogger.error(${1:s})"
    ],
    "description": ""
  },
  "$dotlogger.info(String s): void": {
    "prefix": [
      "$",
      "dotlogger.info",
      "$dotlogger.info"
    ],
    "body": [
      "\\$dotlogger.info(${1:s})"
    ],
    "description": ""
  },
  "$dotlogger.printTemplateStack(): void": {
    "prefix": [
      "$",
      "dotlogger.printTemplateStack()",
      "$dotlogger.printTemplateStack()"
    ],
    "body": [
      "\\$dotlogger.printTemplateStack()"
    ],
    "description": "Outputs the stack trace of the templates to the info logger"
  },
  "$dotlogger.warn(String s): void": {
    "prefix": [
      "$",
      "dotlogger.warn",
      "$dotlogger.warn"
    ],
    "body": [
      "\\$dotlogger.warn(${1:s})"
    ],
    "description": ""
  },
  "$templatetool.getMaxUUID(Template template): static Map<String,Long>": {
    "prefix": [
      "$",
      "templatetool.getMaxUUID",
      "$templatetool.getMaxUUID"
    ],
    "body": [
      "\\$templatetool.getMaxUUID(${1:template})"
    ],
    "description": ""
  },
  "$templatetool.getTemplateLayout(String drawedBodyAsString): static TemplateLayout": {
    "prefix": [
      "$",
      "templatetool.getTemplateLayout",
      "$templatetool.getTemplateLayout"
    ],
    "body": [
      "\\$templatetool.getTemplateLayout(${1:drawedBodyAsString})"
    ],
    "description": ""
  },
  "$templatetool.getTemplateLayoutFromJSON(String json): static TemplateLayout": {
    "prefix": [
      "$",
      "templatetool.getTemplateLayoutFromJSON",
      "$templatetool.getTemplateLayoutFromJSON"
    ],
    "body": [
      "\\$templatetool.getTemplateLayoutFromJSON(${1:json})"
    ],
    "description": ""
  },
  "$templatetool.removeFromLayoutCache(String templateInode): static void": {
    "prefix": [
      "$",
      "templatetool.removeFromLayoutCache",
      "$templatetool.removeFromLayoutCache"
    ],
    "body": [
      "\\$templatetool.removeFromLayoutCache(${1:templateInode})"
    ],
    "description": ""
  },
  "$templatetool.theme(String themeFolderInode | themeFolderPath, String hostId): static Map<String,Object>": {
    "prefix": [
      "$",
      "templatetool.theme",
      "$templatetool.theme"
    ],
    "body": [
      "\\$templatetool.theme(${1:inode|path}, ${2:hostId})"
    ],
    "description": "Method that will create a map of required data for the Layout template, basically paths where the different elements of the theme can be found."
  },
  "$templatetool.themeLayout(String themeInode): static TemplateLayout": {
    "prefix": [
      "$",
      "templatetool.themeLayout",
      "$templatetool.themeLayout"
    ],
    "body": [
      "\\$templatetool.themeLayout(${1:themeInode})"
    ],
    "description": "Given a theme id we will parse it and return the Layout for the given template"
  },
  "$templatetool.themeLayout(String themeInode, Boolean isPreview): TemplateLayout": {
    "prefix": [
      "$",
      "templatetool.themeLayout",
      "$templatetool.themeLayout"
    ],
    "body": [
      "\\$templatetool.themeLayout(${1:themeInode}, ${2:isPreview})"
    ],
    "description": "Given a theme id we will parse it and return the Layout for the given template"
  },
  "$templatetool.themeLayout(String themeInode, User user, Boolean isPreview): static TemplateLayout": {
    "prefix": [
      "$",
      "templatetool.themeLayout",
      "$templatetool.themeLayout"
    ],
    "body": [
      "\\$templatetool.themeLayout(${1:themeInode}, ${2:user}, ${3:isPreview})"
    ],
    "description": "Given a theme id we will parse it and return the Layout for the given template"
  },
  "$estool.raw(String esQuery): SearchResponse": {
    "prefix": [
      "$",
      "estool.raw",
      "$estool.raw"
    ],
    "body": [
      "\\$estool.raw(${1:esQuery})"
    ],
    "description": ""
  },
  "$estool.search(String esQuery): ESSearchResults": {
    "prefix": [
      "$",
      "estool.search",
      "$estool.search"
    ],
    "body": [
      "\\$estool.search(${1:esQuery})"
    ],
    "description": ""
  },
  "$filetool.getFile(String identifier, boolean live): Contentlet": {
    "prefix": [
      "$",
      "filetool.getFile",
      "$filetool.getFile"
    ],
    "body": [
      "\\$filetool.getFile(${1:identifier}, ${2:live})"
    ],
    "description": ""
  },
  "$filetool.getFile(String identifier, boolean live, long languageId): Contentlet": {
    "prefix": [
      "$",
      "filetool.getFile",
      "$filetool.getFile"
    ],
    "body": [
      "\\$filetool.getFile(${1:identifier}, ${2:live}, ${3:languageId})"
    ],
    "description": ""
  },
  "$filetool.getFileAsContentlet(String identifier, boolean live, long languageId): Contentlet": {
    "prefix": [
      "$",
      "filetool.getFileAsContentlet",
      "$filetool.getFileAsContentlet"
    ],
    "body": [
      "\\$filetool.getFileAsContentlet(${1:identifier}, ${2:live}, ${3:languageId})"
    ],
    "description": ""
  },
  "$filetool.getNewFile(): IFileAsset": {
    "prefix": [
      "$",
      "filetool.getNewFile",
      "$filetool.getNewFile"
    ],
    "body": [
      "\\$filetool.getNewFile()"
    ],
    "description": ""
  },
  "$filetool.getURI(Contentlet contentlet | FileAsset file, long languageId): String": {
    "prefix": [
      "$",
      "filetool.getURI",
      "$filetool.getURI"
    ],
    "body": [
      "\\$filetool.getURI(${1:contentlet|file}, ${2:languageId})"
    ],
    "description": ""
  },
  "$filetool.getURI(FileAsset file): String": {
    "prefix": [
      "$",
      "filetool.getURI",
      "$filetool.getURI"
    ],
    "body": [
      "\\$filetool.getURI(${1:file})"
    ],
    "description": "DESCRIPTION"
  },
  "$folderAPI.findCurrentFolder(String path, Host host): Folder": {
    "prefix": [
      "$",
      "folderAPI.findCurrentFolder",
      "$folderAPI.findCurrentFolder"
    ],
    "body": [
      "\\$folderAPI.findCurrentFolder(${1:path}, ${3:host})"
    ],
    "description": ""
  },
  "$folderAPI.findMenuItems(Folder folder | String folderInode): List<Inode>": {
    "prefix": [
      "$",
      "folderAPI.findMenuItems",
      "$folderAPI.findMenuItems"
    ],
    "body": [
      "\\$folderAPI.findMenuItems(${1:folder|inode})"
    ],
    "description": ""
  },
  "$folderAPI.findMenuItems(String path, HttpServletRequest req): List<Inode>": {
    "prefix": [
      "$",
      "folderAPI.findMenuItems",
      "$folderAPI.findMenuItems"
    ],
    "body": [
      "\\$folderAPI.findMenuItems(${1:path}, ${2:req})"
    ],
    "description": ""
  },
  "$json.fetch(String url): Object": {
    "prefix": [
      "$",
      "json.fetch(String url)",
      "$json.fetch(String url)"
    ],
    "body": [
      "\\$json.fetch(${1:url})"
    ],
    "description": "Takes a url and reads the result."
  },
  "$json.fetch(String url, int timeout): Object": {
    "prefix": [
      "$",
      "json.fetch",
      "$json.fetch"
    ],
    "body": [
      "\\$json.fetch(${1:url}, ${2:timeout})"
    ],
    "description": "Will retrieve data from the remote URL returning for you the JSON Object or JSON Array."
  },
  "$json.fetch(String url, int timeout, Map<String,String> headers): Object": {
    "prefix": [
      "$",
      "json.fetch",
      "$json.fetch"
    ],
    "body": [
      "\\$json.fetch(${1:url}, ${2:timeout}, ${3:headers})"
    ],
    "description": ""
  },
  "$json.fetch(String url, Map<String,String> headers): Object": {
    "prefix": [
      "$",
      "json.fetch",
      "$json.fetch"
    ],
    "body": [
      "\\$json.fetch(${1:url}, ${2:headers})"
    ],
    "description": ""
  },
  "$json.generate(List list | Map map | Object o | String s)": {
    "prefix": [
      "$",
      "json.generate",
      "$json.generate"
    ],
    "body": [
      "\\$json.generate(${1:list|map|o|s})"
    ],
    "description": "Returns a JSONArray/JSONObject from a passed in array, map, or string"
  },
  "$json.get(String url, int timeout): Object": {
    "prefix": [
      "$",
      "json.get",
      "$json.get"
    ],
    "body": [
      "\\$json.get(${1:url}, ${2:timeout})"
    ],
    "description": ""
  },
  "$json.get(String url, int timeout, Map<String,String> headers): Object": {
    "prefix": [
      "$",
      "json.get",
      "$json.get"
    ],
    "body": [
      "\\$json.get(${1:url}, ${2:timeout}, ${3:headers})"
    ],
    "description": ""
  },
  "$json.post(String url, int timeout, Map<String,String> headers, Map<String,String> params | String rawData): Object": {
    "prefix": [
      "$",
      "json.post",
      "$json.post"
    ],
    "body": [
      "\\$json.post(${1:url}, ${2:timeout}, ${3:headers}, ${4:params|rawData})"
    ],
    "description": ""
  },
  "$json.post(String url, Map<String,String> headers, Map<String,String> params | String rawData): Object": {
    "prefix": [
      "$",
      "json.post",
      "$json.post"
    ],
    "body": [
      "\\$json.post(${1:url}, ${2:headers}, ${3:params|rawData})"
    ],
    "description": ""
  },
  "$json.put(String url, int timeout, Map<String,String> headers, Map<String,String> params | String rawData): Object": {
    "prefix": [
      "$",
      "json.put",
      "$json.put"
    ],
    "body": [
      "\\$json.put(${1:url}, ${2:timeout}, ${3:headers}, ${4:params|rawData})"
    ],
    "description": ""
  },
  "$json.put(String url, Map<String,String> headers, Map<String,String> params | String rawData): Object": {
    "prefix": [
      "$",
      "json.put",
      "$json.put"
    ],
    "body": [
      "\\$json.put(${1:url}, ${2:headers}, ${3:params|rawData})"
    ],
    "description": ""
  },
  "$langbackendwebapi.get(String key): String": {
    "prefix": [
      "$",
      "langbackendwebapi.get",
      "$langbackendwebapi.get"
    ],
    "body": [
      "\\$langbackendwebapi.get(${1:key})"
    ],
    "description": ""
  },
  "$text.canApplyToAllLanguages(Contentlet cc): static boolean": {
    "prefix": [
      "$",
      "text.canApplyToAllLanguages",
      "$text.canApplyToAllLanguages"
    ],
    "body": [
      "\\$text.canApplyToAllLanguages(${1:cc})"
    ],
    "description": "Return if the content can be use as a default to all languages."
  },
  "$text.get(String key): String": {
    "prefix": [
      "$",
      "text.get",
      "$text.get"
    ],
    "body": [
      "\\$text.get(${1:key})"
    ],
    "description": "Glosssary webapi"
  },
  "$text.get(String key, List args): String": {
    "prefix": [
      "$",
      "text.get",
      "$text.get"
    ],
    "body": [
      "\\$text.get(${1:key}, ${2:args})"
    ],
    "description": ""
  },
  "$text.get(String key, String languageId): String": {
    "prefix": [
      "$",
      "text.get",
      "$text.get"
    ],
    "body": [
      "\\$text.get(${1:key}, ${2:languageId})"
    ],
    "description": ""
  },
  "$text.getBoolean(String key): boolean": {
    "prefix": [
      "$",
      "text.getBoolean",
      "$text.getBoolean"
    ],
    "body": [
      "\\$text.getBoolean(${1:key})"
    ],
    "description": ""
  },
  "$text.getBoolean(String key, String languageId): boolean": {
    "prefix": [
      "$",
      "text.getBoolean",
      "$text.getBoolean"
    ],
    "body": [
      "\\$text.getBoolean(${1:key}, ${2:languageId})"
    ],
    "description": ""
  },
  "$text.getDefaultLanguage(): static Language": {
    "prefix": [
      "$",
      "text.getDefaultLanguage",
      "$text.getDefaultLanguage"
    ],
    "body": [
      "\\$text.getDefaultLanguage()"
    ],
    "description": "Get the default language"
  },
  "$text.getFloat(String key): float": {
    "prefix": [
      "$",
      "text.getFloat",
      "$text.getFloat"
    ],
    "body": [
      "\\$text.getFloat(${1:key})"
    ],
    "description": ""
  },
  "$text.getFloat(String key, String languageId): float": {
    "prefix": [
      "$",
      "text.getFloat",
      "$text.getFloat"
    ],
    "body": [
      "\\$text.getFloat(${1:key}, ${2:languageId})"
    ],
    "description": ""
  },
  "$text.getFromSessionLanguage(String key): String": {
    "prefix": [
      "$",
      "text.getFromSessionLanguage",
      "$text.getFromSessionLanguage"
    ],
    "body": [
      "\\$text.getFromSessionLanguage(${1:key})"
    ],
    "description": ""
  },
  "$text.getFromUserLanguage(String key): String": {
    "prefix": [
      "$",
      "text.getFromUserLanguage",
      "$text.getFromUserLanguage"
    ],
    "body": [
      "\\$text.getFromUserLanguage(${1:key})"
    ],
    "description": ""
  },
  "$text.getInt(String key): int": {
    "prefix": [
      "$",
      "text.getInt",
      "$text.getInt"
    ],
    "body": [
      "\\$text.getInt(${1:key})"
    ],
    "description": ""
  },
  "$text.getInt(String key, String languageId): int": {
    "prefix": [
      "$",
      "text.getInt",
      "$text.getInt"
    ],
    "body": [
      "\\$text.getInt(${1:key}, ${2:languageId})"
    ],
    "description": ""
  },
  "$text.getLanguage(String langId): static Language": {
    "prefix": [
      "$",
      "text.getLanguage",
      "$text.getLanguage"
    ],
    "body": [
      "\\$text.getLanguage(${1:langId})"
    ],
    "description": "Get Language by language code"
  },
  "$text.getLanguage(String languageCode, String countryCode): static Language": {
    "prefix": [
      "$",
      "text.getLanguage",
      "$text.getLanguage"
    ],
    "body": [
      "\\$text.getLanguage(${1:languageCode}, ${2:countryCode})"
    ],
    "description": "Get Language by language code and country code"
  },
  "$text.getLanguages(): static List<Language>": {
    "prefix": [
      "$",
      "text.getLanguages()",
      "$text.getLanguages()"
    ],
    "body": [
      "\\$text.getLanguages()"
    ],
    "description": "Get the list of availables languages"
  },
  "$text.setLanguage(String langId): void": {
    "prefix": [
      "$",
      "text.setLanguage",
      "$text.setLanguage"
    ],
    "body": [
      "\\$text.setLanguage(${1:langId})"
    ],
    "description": "Update fronend language"
  },
  "$mailer.getMailer(): Mailer": {
    "prefix": [
      "$",
      "mailer.getMailer()",
      "$mailer.getMailer()"
    ],
    "body": [
      "\\$mailer.getMailer()"
    ],
    "description": ""
  },
  "$mailer.sendEmail(String to, String from, String subject, String message, boolean html): String": {
    "prefix": [
      "$",
      "mailer.sendEmail",
      "$mailer.sendEmail"
    ],
    "body": [
      "\\$mailer.sendEmail(${1:to}, ${2:from}, ${3:subject}, ${4:message}, ${5:html})"
    ],
    "description": "Sends an email"
  },
  "$markdown.parse(String parse): String": {
    "prefix": [
      "$",
      "markdown.parse",
      "$markdown.parse"
    ],
    "body": [
      "\\$markdown.parse(${1:parse})"
    ],
    "description": "Parse a String for markdown"
  },
  "$markdown.parseFile(String path): String": {
    "prefix": [
      "$",
      "markdown.parseFile",
      "$markdown.parseFile"
    ],
    "body": [
      "\\$markdown.parseFile(${1:path})"
    ],
    "description": "This method allows you to parse a markdown docuemnt by Velocity"
  },
  "$markdown.parseFile(String path, boolean parseFirst)": {
    "prefix": [
      "$",
      "markdown.parseFile",
      "$markdown.parseFile"
    ],
    "body": [
      "\\$markdown.parseFile(${1:path}, ${2:parseFirst})"
    ],
    "description": "This method allows you to parse a markdown docuemnt that is first evaluated by Velocity"
  },
  "$messagetool.exists(String key): boolean": {
    "prefix": [
      "$",
      "messagetool.exists",
      "$messagetool.exists"
    ],
    "body": [
      "\\$messagetool.exists(${1:key})"
    ],
    "description": "Checks if a message string for a specified message key exists for the user's locale."
  },
  "$messagetool.exists(String key, String bundle): boolean": {
    "prefix": [
      "$",
      "messagetool.exists",
      "$messagetool.exists"
    ],
    "body": [
      "\\$messagetool.exists(${1:key}, ${2:bundle})"
    ],
    "description": "Checks if a message string for a specified message key exists for the user's locale."
  },
  "$messagetool.get(String key): String": {
    "prefix": [
      "$",
      "messagetool.get(String key)",
      "$messagetool.get(String key)"
    ],
    "body": [
      "\\$messagetool.get(String key)"
    ],
    "description": "Looks up and returns the localized message for the specified key."
  },
  "$messagetool.get(String key, List | Object[] args | String bundle): String": {
    "prefix": [
      "$",
      "messagetool.get",
      "$messagetool.get"
    ],
    "body": [
      "\\$messagetool.get(${1:key}, ${2:args|bundle})"
    ],
    "description": "Looks up and returns the localized message for the specified key."
  },
  "$messagetool.get(String key, String bundle, List | Object[] args): String": {
    "prefix": [
      "$",
      "messagetool.get",
      "$messagetool.get"
    ],
    "body": [
      "\\$messagetool.get(${1:key}, ${2:bundle}, ${3:args})"
    ],
    "description": "Looks up and returns the localized message for the specified key."
  },
  "$messagetool.send(String message, int timeToLifeInSeconds, List<String> users, MessageSeverity severity): void": {
    "prefix": [
      "$",
      "messagetool.send",
      "$messagetool.send"
    ],
    "body": [
      "\\$messagetool.send(${1:message}, ${2:timeToLifeInSeconds}, ${3:users}, ${4:severity})"
    ],
    "description": ""
  },
  "$messagetool.sendError(String message)": {
    "prefix": [
      "$",
      "messagetool.sendError",
      "$messagetool.sendError"
    ],
    "body": [
      "\\$messagetool.sendError(${1:message})"
    ],
    "description": ""
  },
  "$messagetool.sendError(String message, int timeToLifeInSeconds): void": {
    "prefix": [
      "$",
      "messagetool.sendError",
      "$messagetool.sendError"
    ],
    "body": [
      "\\$messagetool.sendError(${1:message}, ${2:timeToLifeInSeconds})"
    ],
    "description": ""
  },
  "$messagetool.sendError(String message, int timeToLifeInSeconds, List<String> users): void": {
    "prefix": [
      "$",
      "messagetool.sendError",
      "$messagetool.sendError"
    ],
    "body": [
      "\\$messagetool.sendError(${1:message}, ${2:timeToLifeInSeconds}, ${3:users})"
    ],
    "description": ""
  },
  "$messagetool.sendInfo(String message)": {
    "prefix": [
      "$",
      "messagetool.sendInfo",
      "$messagetool.sendInfo"
    ],
    "body": [
      "\\$messagetool.sendInfo(${1:message})"
    ],
    "description": ""
  },
  "$messagetool.sendInfo(String message, int timeToLifeInSeconds): void": {
    "prefix": [
      "$",
      "messagetool.sendInfo",
      "$messagetool.sendInfo"
    ],
    "body": [
      "\\$messagetool.sendInfo(${1:message}, ${2:timeToLifeInSeconds})"
    ],
    "description": ""
  },
  "$messagetool.sendInfo(String message, int timeToLifeInSeconds, List<String> users): void": {
    "prefix": [
      "$",
      "messagetool.sendInfo",
      "$messagetool.sendInfo"
    ],
    "body": [
      "\\$messagetool.sendInfo(${1:message}, ${2:timeToLifeInSeconds}, ${3:users})"
    ],
    "description": ""
  },
  "$messagetool.sendSuccess(String message)": {
    "prefix": [
      "$",
      "messagetool.sendSuccess",
      "$messagetool.sendSuccess"
    ],
    "body": [
      "\\$messagetool.sendSuccess(${1:message})"
    ],
    "description": ""
  },
  "$messagetool.sendSuccess(String message, int timeToLifeInSeconds): void": {
    "prefix": [
      "$",
      "messagetool.sendSuccess",
      "$messagetool.sendSuccess"
    ],
    "body": [
      "\\$messagetool.sendSuccess(${1:message}, ${2:timeToLifeInSeconds})"
    ],
    "description": ""
  },
  "$messagetool.sendSuccess(String message, int timeToLifeInSeconds, List<String> users): void": {
    "prefix": [
      "$",
      "messagetool.sendSuccess",
      "$messagetool.sendSuccess"
    ],
    "body": [
      "\\$messagetool.sendSuccess(${1:message}, ${2:timeToLifeInSeconds}, ${3:users})"
    ],
    "description": ""
  },
  "$messagetool.sendWarning(String message)": {
    "prefix": [
      "$",
      "messagetool.sendWarning",
      "$messagetool.sendWarning"
    ],
    "body": [
      "\\$messagetool.sendWarning(${1:message})"
    ],
    "description": ""
  },
  "$messagetool.sendWarning(String message, int timeToLifeInSeconds): void": {
    "prefix": [
      "$",
      "messagetool.sendWarning",
      "$messagetool.sendWarning"
    ],
    "body": [
      "\\$messagetool.sendWarning(${1:message}, ${2:timeToLifeInSeconds})"
    ],
    "description": ""
  },
  "$messagetool.sendWarning(String message, int timeToLifeInSeconds, List<String> users): void": {
    "prefix": [
      "$",
      "messagetool.sendWarning",
      "$messagetool.sendWarning"
    ],
    "body": [
      "\\$messagetool.sendWarning(${1:message}, ${2:timeToLifeInSeconds}, ${3:users})"
    ],
    "description": ""
  },
  "$personatool.find(String id): Persona": {
    "prefix": [
      "$",
      "personatool.find",
      "$personatool.find"
    ],
    "body": [
      "\\$personatool.find(${1:id})"
    ],
    "description": "Permission based find method"
  },
  "$personatool.forcePersona(String id): Persona": {
    "prefix": [
      "$",
      "personatool.forcePersona",
      "$personatool.forcePersona"
    ],
    "body": [
      "\\$personatool.forcePersona(${1:id})"
    ],
    "description": "Forces a specific persona into the visitor object."
  },
  "$personatool.getPersonas(): List<Persona>": {
    "prefix": [
      "$",
      "personatool.getPersonas",
      "$personatool.getPersonas"
    ],
    "body": [
      "\\$personatool.getPersonas()"
    ],
    "description": "gets personas on both the host being viewed and the system host (global personas)"
  },
  "$pluginapitool.findPlugins(): List<Plugin>": {
    "prefix": [
      "$",
      "pluginapitool.findPlugins",
      "$pluginapitool.findPlugins"
    ],
    "body": [
      "\\$pluginapitool.findPlugins()"
    ],
    "description": "finds all plugins in the database."
  },
  "$pluginapitool.loadPlugin(String id): Plugin": {
    "prefix": [
      "$",
      "pluginapitool.loadPlugin",
      "$pluginapitool.loadPlugin"
    ],
    "body": [
      "\\$pluginapitool.loadPlugin(${1:id})"
    ],
    "description": "Load a plugin by its primary key(ID)."
  },
  "$pluginapitool.loadPluginConfigKeys(String pluginId): List<String>": {
    "prefix": [
      "$",
      "pluginapitool.loadPluginConfigKeys",
      "$pluginapitool.loadPluginConfigKeys"
    ],
    "body": [
      "\\$pluginapitool.loadPluginConfigKeys(${1:pluginId})"
    ],
    "description": ""
  },
  "$pluginapitool.loadPluginConfigProperty(String pluginId, String key): String": {
    "prefix": [
      "$",
      "pluginapitool.loadPluginConfigProperty",
      "$pluginapitool.loadPluginConfigProperty"
    ],
    "body": [
      "\\$pluginapitool.loadPluginConfigProperty(${1:pluginId}, ${2:key})"
    ],
    "description": "loads a property from the plugin.config file of the specified plugin"
  },
  "$pluginapitool.loadProperty(String pluginId, String key): String": {
    "prefix": [
      "$",
      "pluginapitool.loadProperty",
      "$pluginapitool.loadProperty"
    ],
    "body": [
      "\\$pluginapitool.loadProperty(${1:pluginId}, ${2:key})"
    ],
    "description": "loads all keys from the plugin.config file of the specified plugin"
  },
  "$sql.getDbAccessorContentlet(): protected Contentlet": {
    "prefix": [
      "$",
      "sql.getDbAccessorContentlet()",
      "$sql.getDbAccessorContentlet()"
    ],
    "body": [
      "\\$sql.getDbAccessorContentlet()"
    ],
    "description": "Verifies that the piece of content (usually a Widget) that is calling this sql ViewTool was modified by a User which has the expected Scripting Developer Role."
  },
  "$sql.getParameterizedSQLResults(String dataSource, String sql, ArrayList<Object> parameterList, int startRow, int maxRow): ArrayList<HashMap<String,String>>": {
    "prefix": [
      "$",
      "sql.getParameterizedSQLResults",
      "$sql.getParameterizedSQLResults"
    ],
    "body": [
      "\\$sql.getParameterizedSQLResults(${1:dataSource}, ${2:sql}, ${3:parameterList}, ${4:startRow}, ${5:maxRow})"
    ],
    "description": "Executes the specified SQL query on a given Data Source."
  },
  "$sql.getSQLResults(String dataSource, String sql, int startRow, int maxRow): ArrayList<HashMap<String,String>>": {
    "prefix": [
      "$",
      "sql.getSQLResults",
      "$sql.getSQLResults"
    ],
    "body": [
      "\\$sql.getSQLResults(${1:dataSource}, ${2:sql}, ${3:startRow}, ${4:maxRow})"
    ],
    "description": "Executes the specified SQL query on a given Data Source."
  },
  "$sql.isSQLValid(String sql, Contentlet contentlet): protected boolean": {
    "prefix": [
      "$",
      "sql.isSQLValid",
      "$sql.isSQLValid"
    ],
    "body": [
      "\\$sql.isSQLValid(${1:sql}, ${2:contentlet})"
    ],
    "description": "Analyzes the words contained in the SQL query specified by the user/developer, and reports back when an invalid keyword or forbidden table is referenced."
  },
  "$sql.reportError(Map<String,String> errors): protected ArrayList<HashMap<String,String>>": {
    "prefix": [
      "$",
      "sql.reportError",
      "$sql.reportError"
    ],
    "body": [
      "\\$sql.reportError(${1:errors})"
    ],
    "description": "Utility method used to report errors."
  },
  "$sql.reportError(Map<String,String> errors, String debugMsg): protected ArrayList<HashMap<String,String>>": {
    "prefix": [
      "$",
      "sql.reportError",
      "$sql.reportError"
    ],
    "body": [
      "\\$sql.reportError(${1:errors}, ${2:debugMsg})"
    ],
    "description": "Utility method used to report errors."
  },
  "$stringsapi.formatPhoneNumber(String phoneNumber): String": {
    "prefix": [
      "$",
      "stringsapi.formatPhoneNumber",
      "$stringsapi.formatPhoneNumber"
    ],
    "body": [
      "\\$stringsapi.formatPhoneNumber(${1:phoneNumber})"
    ],
    "description": ""
  },
  "$stringsapi.getEmptyStringWriter(): StringWriter": {
    "prefix": [
      "$",
      "stringsapi.getEmptyStringWriter",
      "$stringsapi.getEmptyStringWriter"
    ],
    "body": [
      "\\$stringsapi.getEmptyStringWriter()"
    ],
    "description": ""
  },
  "$stringsapi.MatchCommaSeparated(String list, String string): Boolean": {
    "prefix": [
      "$",
      "stringsapi.MatchCommaSeparated",
      "$stringsapi.MatchCommaSeparated"
    ],
    "body": [
      "\\$stringsapi.MatchCommaSeparated(${1:list}, ${2:string})"
    ],
    "description": ""
  },
  "$structures.findField(Structure st, String fieldInode): Field": {
    "prefix": [
      "$",
      "structures.findField",
      "$structures.findField"
    ],
    "body": [
      "\\$structures.findField(${1:st}, ${2:fieldInode})"
    ],
    "description": ""
  },
  "$structures.findFieldByVarName(Structure st, String fieldVariableName): Field": {
    "prefix": [
      "$",
      "structures.findFieldByVarName",
      "$structures.findFieldByVarName"
    ],
    "body": [
      "\\$structures.findFieldByVarName(${1:st}, ${2:fieldVariableName})"
    ],
    "description": "Retrieves a field from a structure based on its field inode"
  },
  "$structures.findForms(boolean backendPermissions): List<Structure>": {
    "prefix": [
      "$",
      "structures.findForms",
      "$structures.findForms"
    ],
    "body": [
      "\\$structures.findForms(${1:backendPermissions})"
    ],
    "description": "Use this viewtool method to find all forms."
  },
  "$structures.findStructure(String inode): Structure": {
    "prefix": [
      "$",
      "structures.findStructure",
      "$structures.findStructure"
    ],
    "body": [
      "\\$structures.findStructure(${1:inode})"
    ],
    "description": "Retrieves a structure by its id/inode"
  },
  "$structures.findStructureByVelocityVarName(String velocityVarName): Structure": {
    "prefix": [
      "$",
      "structures.findStructureByVelocityVarName",
      "$structures.findStructureByVelocityVarName"
    ],
    "body": [
      "\\$structures.findStructureByVelocityVarName(${1:velocityVarName})"
    ],
    "description": "Retrieves a structure by its velocityvarname"
  },
  "$structures.findStructures(boolean backendPermissions): List<Structure>": {
    "prefix": [
      "$",
      "structures.findStructures",
      "$structures.findStructures"
    ],
    "body": [
      "\\$structures.findStructures(${1:backendPermissions})"
    ],
    "description": "Use this viewtool method to find all structures."
  },
  "$structures.findWidgets(boolean backendPermissions): List<Structure>": {
    "prefix": [
      "$",
      "structures.findWidgets",
      "$structures.findWidgets"
    ],
    "body": [
      "\\$structures.findWidgets(${1:backendPermissions})"
    ],
    "description": "Use this viewtool method to find all widgets."
  },
  "$structures.getFields(Structure st): List<Field>": {
    "prefix": [
      "$",
      "structures.getFields",
      "$structures.getFields"
    ],
    "body": [
      "\\$structures.getFields(${1:st})"
    ],
    "description": "Retrieves all the fields associated to a structure"
  },
  "$structures.getLayoutAsJson(String inodeOrVar): String": {
    "prefix": [
      "$",
      "structures.getLayoutAsJson",
      "$structures.getLayoutAsJson"
    ],
    "body": [
      "\\$structures.getLayoutAsJson(${1:inodeOrVar})"
    ],
    "description": "Return the Structure's Layout in a json format."
  },
  "$structures.getStructureRelationShips(Structure st): List<Relationship>": {
    "prefix": [
      "$",
      "structures.getStructureRelationShips",
      "$structures.getStructureRelationShips"
    ],
    "body": [
      "\\$structures.getStructureRelationShips(${1:st})"
    ],
    "description": "Retrieve the list of relationships associated to the structure"
  },
  "$structures.haveEditPermision(Structure st, User user): boolean": {
    "prefix": [
      "$",
      "structures.haveEditPermision",
      "$structures.haveEditPermision"
    ],
    "body": [
      "\\$structures.haveEditPermision(${1:st}, ${2:user})"
    ],
    "description": "Retrieves if the user have permission to edit on the structure"
  },
  "$structures.havePublishPermision(Structure st, User user): boolean": {
    "prefix": [
      "$",
      "structures.havePublishPermision",
      "$structures.havePublishPermision"
    ],
    "body": [
      "\\$structures.havePublishPermision(${1:st}, ${2:user})"
    ],
    "description": "Retrieves if the user have permission to publish on the structure"
  },
  "$structures.haveViewPermision(Structure st, User user): boolean": {
    "prefix": [
      "$",
      "structures.haveViewPermision",
      "$structures.haveViewPermision"
    ],
    "body": [
      "\\$structures.haveViewPermision(${1:st}, ${2:user})"
    ],
    "description": "Retrieves if the user have permission to view on the structure"
  },
  "$structures.isFieldConstant(Field field): boolean": {
    "prefix": [
      "$",
      "structures.isFieldConstant",
      "$structures.isFieldConstant"
    ],
    "body": [
      "\\$structures.isFieldConstant(${1:field})"
    ],
    "description": ""
  },
  "$structures.isFieldHidden(Field field): boolean": {
    "prefix": [
      "$",
      "structures.isFieldHidden",
      "$structures.isFieldHidden"
    ],
    "body": [
      "\\$structures.isFieldHidden(${1:field})"
    ],
    "description": ""
  },
  "$submitcontenttool.containsFieldVariable(List<FieldVariable> list, String fieldVariableName): boolean": {
    "prefix": [
      "$",
      "submitcontenttool.containsFieldVariable",
      "$submitcontenttool.containsFieldVariable"
    ],
    "body": [
      "\\$submitcontenttool.containsFieldVariable(${1:list}, ${2:fieldVariableName})"
    ],
    "description": "Validate if a FieldVariable is present in a FieldVariable List"
  },
  "$submitcontenttool.findFieldByVarName(Structure st, String fieldVariableName): Field": {
    "prefix": [
      "$",
      "submitcontenttool.findFieldByVarName",
      "$submitcontenttool.findFieldByVarName"
    ],
    "body": [
      "\\$submitcontenttool.findFieldByVarName(${1:st}, ${2:fieldVariableName})"
    ],
    "description": "Retrieves a field from a structure based on its field inode"
  },
  "$submitcontenttool.getFieldVariables(Field field): List<FieldVariable>": {
    "prefix": [
      "$",
      "submitcontenttool.getFieldVariables",
      "$submitcontenttool.getFieldVariables"
    ],
    "body": [
      "\\$submitcontenttool.getFieldVariables(${1:field})"
    ],
    "description": "Retrieves the field variables"
  },
  "$submitcontenttool.getFieldVariableValue(Field field | List<FieldVariable> fieldVariableList, String fieldVariableName): String": {
    "prefix": [
      "$",
      "submitcontenttool.getFieldVariableValue",
      "$submitcontenttool.getFieldVariableValue"
    ],
    "body": [
      "\\$submitcontenttool.getFieldVariableValue(${1:field|variableList}, ${2:fieldVariableName})"
    ],
    "description": "Retrieves the field variable value based on its Field variables and variable name"
  },
  "$submitcontenttool.getFieldVariableValue(String structureVarName, String fieldVarName, String fieldVariable): String": {
    "prefix": [
      "$",
      "submitcontenttool.getFieldVariableValue",
      "$submitcontenttool.getFieldVariableValue"
    ],
    "body": [
      "\\$submitcontenttool.getFieldVariableValue(${1:structureVarName}, ${2:fieldVarName}, ${3:fieldVariable})"
    ],
    "description": "Retrieves the field variable value based on its structure name, field name and variable name"
  },
  "$tags.accrueTags(String tags): void": {
    "prefix": [
      "$",
      "tags.accrueTags",
      "$tags.accrueTags"
    ],
    "body": [
      "\\$tags.accrueTags(${1:tags})"
    ],
    "description": "Method that accrues a given String of tag names with a CSV format to the current Visitor"
  },
  "$tags.getTagsByNonLoggedUser(): List": {
    "prefix": [
      "$",
      "tags.getTagsByNonLoggedUser",
      "$tags.getTagsByNonLoggedUser"
    ],
    "body": [
      "\\$tags.getTagsByNonLoggedUser()"
    ],
    "description": ""
  },
  "$tags.getTagsByUser(User user): List": {
    "prefix": [
      "$",
      "tags.getTagsByUser",
      "$tags.getTagsByUser"
    ],
    "body": [
      "\\$tags.getTagsByUser(${1:user})"
    ],
    "description": ""
  },
  "$useragent.getAgent(): UserAgent": {
    "prefix": [
      "$",
      "useragent.getAgent",
      "$useragent.getAgent"
    ],
    "body": [
      "\\$useragent.getAgent()"
    ],
    "description": ""
  },
  "$useragent.getBrowser(): Browser": {
    "prefix": [
      "$",
      "useragent.getBrowser",
      "$useragent.getBrowser"
    ],
    "body": [
      "\\$useragent.getBrowser()"
    ],
    "description": ""
  },
  "$useragent.getDeviceType(): DeviceType": {
    "prefix": [
      "$",
      "useragent.getDeviceType",
      "$useragent.getDeviceType"
    ],
    "body": [
      "\\$useragent.getDeviceType()"
    ],
    "description": ""
  },
  "$useragent.getEngine(): RenderingEngine": {
    "prefix": [
      "$",
      "useragent.getEngine",
      "$useragent.getEngine"
    ],
    "body": [
      "\\$useragent.getEngine()"
    ],
    "description": ""
  },
  "$useragent.getManufacturer(): Manufacturer": {
    "prefix": [
      "$",
      "useragent.getManufacturer",
      "$useragent.getManufacturer"
    ],
    "body": [
      "\\$useragent.getManufacturer()"
    ],
    "description": ""
  },
  "$useragent.getOs(): OperatingSystem": {
    "prefix": [
      "$",
      "useragent.getOs",
      "$useragent.getOs"
    ],
    "body": [
      "\\$useragent.getOs()"
    ],
    "description": ""
  },
  "$useragent.getType(): DeviceType": {
    "prefix": [
      "$",
      "useragent.getType",
      "$useragent.getType"
    ],
    "body": [
      "\\$useragent.getType()"
    ],
    "description": ""
  },
  "$useragent.getUserAgent(): UserAgent": {
    "prefix": [
      "$",
      "useragent.getUserAgent",
      "$useragent.getUserAgent"
    ],
    "body": [
      "\\$useragent.getUserAgent()"
    ],
    "description": ""
  },
  "$useragent.getVersion(): Version": {
    "prefix": [
      "$",
      "useragent.getVersion",
      "$useragent.getVersion"
    ],
    "body": [
      "\\$useragent.getVersion()"
    ],
    "description": ""
  },
  "$request.getActualParameter(String param): String": {
    "prefix": [
      "$",
      "request.getActualParameter",
      "$request.getActualParameter"
    ],
    "body": [
      "\\$request.getActualParameter(${1:param})"
    ],
    "description": ""
  },
  "$request.getContextPath(): String": {
    "prefix": [
      "$",
      "request.getContextPath",
      "$request.getContextPath"
    ],
    "body": [
      "\\$request.getContextPath()"
    ],
    "description": ""
  },
  "$request.getCustomUserAgentHeader(): String": {
    "prefix": [
      "$",
      "request.getCustomUserAgentHeader",
      "$request.getCustomUserAgentHeader"
    ],
    "body": [
      "\\$request.getCustomUserAgentHeader()"
    ],
    "description": ""
  },
  "$request.getHeader(String header): String": {
    "prefix": [
      "$",
      "request.getHeader",
      "$request.getHeader"
    ],
    "body": [
      "\\$request.getHeader(${1:header})"
    ],
    "description": ""
  },
  "$request.getParameter(String param): String": {
    "prefix": [
      "$",
      "request.getParameter",
      "$request.getParameter"
    ],
    "body": [
      "\\$request.getParameter(${1:param})"
    ],
    "description": ""
  },
  "$request.getRealPath(String path): String": {
    "prefix": [
      "$",
      "request.getRealPath",
      "$request.getRealPath"
    ],
    "body": [
      "\\$request.getRealPath(${1:path})"
    ],
    "description": ""
  },
  "$request.getRequestURI(): String": {
    "prefix": [
      "$",
      "request.getRequestURI",
      "$request.getRequestURI"
    ],
    "body": [
      "\\$request.getRequestURI()"
    ],
    "description": ""
  },
  "$request.getRequestURL(): StringBuffer": {
    "prefix": [
      "$",
      "request.getRequestURL",
      "$request.getRequestURL"
    ],
    "body": [
      "\\$request.getRequestURL()"
    ],
    "description": ""
  },
  "$request.getServletContext(): ServletContext": {
    "prefix": [
      "$",
      "request.getServletContext",
      "$request.getServletContext"
    ],
    "body": [
      "\\$request.getServletContext()"
    ],
    "description": ""
  },
  "$request.getSession(): HttpSession": {
    "prefix": [
      "$",
      "request.getSession",
      "$request.getSession"
    ],
    "body": [
      "\\$request.getSession()"
    ],
    "description": ""
  },
  "$request.getSession(boolean forceCreation): HttpSession": {
    "prefix": [
      "$",
      "request.getSession",
      "$request.getSession"
    ],
    "body": [
      "\\$request.getSession(${1:forceCreation})"
    ],
    "description": ""
  },
  "$request.login(String arg0, String arg1): void": {
    "prefix": [
      "$",
      "request.login",
      "$request.login"
    ],
    "body": [
      "\\$request.login(${1:arg0}, ${2:arg1})"
    ],
    "description": ""
  },
  "$request.logout(): void": {
    "prefix": [
      "$",
      "request.logout()",
      "$request.logout()"
    ],
    "body": [
      "\\$request.logout()"
    ],
    "description": ""
  },
  "$request.removeAttribute(String arg0): void": {
    "prefix": [
      "$",
      "request.removeAttribute",
      "$request.removeAttribute"
    ],
    "body": [
      "\\$request.removeAttribute(${1:arg0})"
    ],
    "description": ""
  },
  "$request.setAttribute(String key, Object value): void": {
    "prefix": [
      "$",
      "request.setAttribute",
      "$request.setAttribute"
    ],
    "body": [
      "\\$request.setAttribute(${1:key}, ${2:value})"
    ],
    "description": ""
  },
  "$request.setCustomUserAgentHeader(String customUserAgentHeader): void": {
    "prefix": [
      "$",
      "request.setCustomUserAgentHeader",
      "$request.setCustomUserAgentHeader"
    ],
    "body": [
      "\\$request.setCustomUserAgentHeader(${1:customUserAgentHeader})"
    ],
    "description": ""
  },
  "$request.setRequestUri(String uri): void": {
    "prefix": [
      "$",
      "request.setRequestUri",
      "$request.setRequestUri"
    ],
    "body": [
      "\\$request.setRequestUri(${1:uri})"
    ],
    "description": ""
  },
  "$request.wrapVelocityRequest(HttpServletRequest request): static VelocityRequestWrapper": {
    "prefix": [
      "$",
      "request.wrapVelocityRequest",
      "$request.wrapVelocityRequest"
    ],
    "body": [
      "\\$request.wrapVelocityRequest(${1:request})"
    ],
    "description": ""
  },
  "$request.authenticate(HttpServletResponse arg0): boolean": {
    "prefix": [
      "$",
      "request.authenticate",
      "$request.authenticate"
    ],
    "body": [
      "\\$request.authenticate(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getAsyncContext(): AsyncContext": {
    "prefix": [
      "$",
      "request.getAsyncContext",
      "$request.getAsyncContext"
    ],
    "body": [
      "\\$request.getAsyncContext()"
    ],
    "description": ""
  },
  "$request.getAttribute(String arg0): Object": {
    "prefix": [
      "$",
      "request.getAttribute",
      "$request.getAttribute"
    ],
    "body": [
      "\\$request.getAttribute(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getAttributeNames(): Enumeration": {
    "prefix": [
      "$",
      "request.getAttributeNames",
      "$request.getAttributeNames"
    ],
    "body": [
      "\\$request.getAttributeNames()"
    ],
    "description": ""
  },
  "$request.getAuthType(): String": {
    "prefix": [
      "$",
      "request.getAuthType",
      "$request.getAuthType"
    ],
    "body": [
      "\\$request.getAuthType()"
    ],
    "description": ""
  },
  "$request.getCharacterEncoding(): String": {
    "prefix": [
      "$",
      "request.getCharacterEncoding",
      "$request.getCharacterEncoding"
    ],
    "body": [
      "\\$request.getCharacterEncoding()"
    ],
    "description": ""
  },
  "$request.getContentLength(): int": {
    "prefix": [
      "$",
      "request.getContentLength",
      "$request.getContentLength"
    ],
    "body": [
      "\\$request.getContentLength()"
    ],
    "description": ""
  },
  "$request.getContentType(): String": {
    "prefix": [
      "$",
      "request.getContentType",
      "$request.getContentType"
    ],
    "body": [
      "\\$request.getContentType()"
    ],
    "description": ""
  },
  "$request.getCookies(): Cookie[]": {
    "prefix": [
      "$",
      "request.getCookies",
      "$request.getCookies"
    ],
    "body": [
      "\\$request.getCookies()"
    ],
    "description": ""
  },
  "$request.getDateHeader(String arg0): long": {
    "prefix": [
      "$",
      "request.getDateHeader",
      "$request.getDateHeader"
    ],
    "body": [
      "\\$request.getDateHeader(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getDispatcherType(): DispatcherType": {
    "prefix": [
      "$",
      "request.getDispatcherType",
      "$request.getDispatcherType"
    ],
    "body": [
      "\\$request.getDispatcherType()"
    ],
    "description": ""
  },
  "$request.getHeaderNames(): Enumeration": {
    "prefix": [
      "$",
      "request.getHeaderNames",
      "$request.getHeaderNames"
    ],
    "body": [
      "\\$request.getHeaderNames()"
    ],
    "description": ""
  },
  "$request.getInputStream():: ServletInputStream": {
    "prefix": [
      "$",
      "request.getInputStream",
      "$request.getInputStream"
    ],
    "body": [
      "\\$request.getInputStream()"
    ],
    "description": ""
  },
  "$request.getIntHeader(String arg0): int": {
    "prefix": [
      "$",
      "request.getIntHeader",
      "$request.getIntHeader"
    ],
    "body": [
      "\\$request.getIntHeader(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getLocalAddr(): String": {
    "prefix": [
      "$",
      "request.getLocalAddr",
      "$request.getLocalAddr"
    ],
    "body": [
      "\\$request.getLocalAddr()"
    ],
    "description": ""
  },
  "$request.getLocale(): Locale": {
    "prefix": [
      "$",
      "request.getLocale",
      "$request.getLocale"
    ],
    "body": [
      "\\$request.getLocale()"
    ],
    "description": ""
  },
  "$request.getLocales(): Enumeration": {
    "prefix": [
      "$",
      "request.getLocales",
      "$request.getLocales"
    ],
    "body": [
      "\\$request.getLocales()"
    ],
    "description": ""
  },
  "$request.getLocalName(): String": {
    "prefix": [
      "$",
      "request.getLocalName",
      "$request.getLocalName"
    ],
    "body": [
      "\\$request.getLocalName()"
    ],
    "description": ""
  },
  "$request.getLocalPort(): int": {
    "prefix": [
      "$",
      "request.getLocalPort",
      "$request.getLocalPort"
    ],
    "body": [
      "\\$request.getLocalPort()"
    ],
    "description": ""
  },
  "$request.getMethod(): String": {
    "prefix": [
      "$",
      "request.getMethod",
      "$request.getMethod"
    ],
    "body": [
      "\\$request.getMethod()"
    ],
    "description": ""
  },
  "$request.getParameterMap(): Map": {
    "prefix": [
      "$",
      "request.getParameterMap",
      "$request.getParameterMap"
    ],
    "body": [
      "\\$request.getParameterMap()"
    ],
    "description": ""
  },
  "$request.getParameterNames(): Enumeration": {
    "prefix": [
      "$",
      "request.getParameterNames",
      "$request.getParameterNames"
    ],
    "body": [
      "\\$request.getParameterNames()"
    ],
    "description": ""
  },
  "$request.getParameterValues(String arg0): String[]": {
    "prefix": [
      "$",
      "request.getParameterValues",
      "$request.getParameterValues"
    ],
    "body": [
      "\\$request.getParameterValues(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getPart(String arg0): Part": {
    "prefix": [
      "$",
      "request.getPart",
      "$request.getPart"
    ],
    "body": [
      "\\$request.getPart(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getParts(): Collection<Part>": {
    "prefix": [
      "$",
      "request.getParts",
      "$request.getParts"
    ],
    "body": [
      "\\$request.getParts()"
    ],
    "description": ""
  },
  "$request.getPathInfo(): String": {
    "prefix": [
      "$",
      "request.getPathInfo",
      "$request.getPathInfo"
    ],
    "body": [
      "\\$request.getPathInfo()"
    ],
    "description": ""
  },
  "$request.getPathTranslated(): String": {
    "prefix": [
      "$",
      "request.getPathTranslated",
      "$request.getPathTranslated"
    ],
    "body": [
      "\\$request.getPathTranslated()"
    ],
    "description": ""
  },
  "$request.getProtocol(): String": {
    "prefix": [
      "$",
      "request.getProtocol",
      "$request.getProtocol"
    ],
    "body": [
      "\\$request.getProtocol()"
    ],
    "description": ""
  },
  "$request.getQueryString(): String": {
    "prefix": [
      "$",
      "request.getQueryString",
      "$request.getQueryString"
    ],
    "body": [
      "\\$request.getQueryString()"
    ],
    "description": ""
  },
  "$request.getReader(): BufferedReader": {
    "prefix": [
      "$",
      "request.getReader",
      "$request.getReader"
    ],
    "body": [
      "\\$request.getReader()"
    ],
    "description": ""
  },
  "$request.getRealPath(String arg0): String": {
    "prefix": [
      "$",
      "request.getRealPath",
      "$request.getRealPath"
    ],
    "body": [
      "\\$request.getRealPath(${1:arg0})"
    ],
    "description": ""
  },
  "$request.getRemoteAddr(): String": {
    "prefix": [
      "$",
      "request.getRemoteAddr",
      "$request.getRemoteAddr"
    ],
    "body": [
      "\\$request.getRemoteAddr()"
    ],
    "description": ""
  },
  "$request.getRemoteHost(): String": {
    "prefix": [
      "$",
      "request.getRemoteHost",
      "$request.getRemoteHost"
    ],
    "body": [
      "\\$request.getRemoteHost()"
    ],
    "description": ""
  },
  "$request.getRemotePort(): int": {
    "prefix": [
      "$",
      "request.getRemotePort",
      "$request.getRemotePort"
    ],
    "body": [
      "\\$request.getRemotePort()"
    ],
    "description": ""
  },
  "$request.getRemoteUser(): String": {
    "prefix": [
      "$",
      "request.getRemoteUser",
      "$request.getRemoteUser"
    ],
    "body": [
      "\\$request.getRemoteUser()"
    ],
    "description": ""
  },
  "$request.getRequestDispatcher(String uri): RequestDispatcher": {
    "prefix": [
      "$",
      "request.getRequestDispatcher",
      "$request.getRequestDispatcher"
    ],
    "body": [
      "\\$request.getRequestDispatcher(${1:uri})"
    ],
    "description": ""
  },
  "$request.getRequestedSessionId(): String": {
    "prefix": [
      "$",
      "request.getRequestedSessionId",
      "$request.getRequestedSessionId"
    ],
    "body": [
      "\\$request.getRequestedSessionId()"
    ],
    "description": ""
  },
  "$request.getScheme(): String": {
    "prefix": [
      "$",
      "request.getScheme",
      "$request.getScheme"
    ],
    "body": [
      "\\$request.getScheme()"
    ],
    "description": ""
  },
  "$request.getServerName(): String": {
    "prefix": [
      "$",
      "request.getServerName",
      "$request.getServerName"
    ],
    "body": [
      "\\$request.getServerName()"
    ],
    "description": ""
  },
  "$request.getServerPort(): int": {
    "prefix": [
      "$",
      "request.getServerPort",
      "$request.getServerPort"
    ],
    "body": [
      "\\$request.getServerPort()"
    ],
    "description": ""
  },
  "$request.getServletPath(): String": {
    "prefix": [
      "$",
      "request.getServletPath()",
      "$request.getServletPath()"
    ],
    "body": [
      "\\$request.getServletPath()"
    ],
    "description": ""
  },
  "$request.getUserPrincipal(): Principal": {
    "prefix": [
      "$",
      "request.getUserPrincipal",
      "$request.getUserPrincipal"
    ],
    "body": [
      "\\$request.getUserPrincipal()"
    ],
    "description": ""
  },
  "$request.isAsyncStarted(): boolean": {
    "prefix": [
      "$",
      "request.isAsyncStarted",
      "$request.isAsyncStarted"
    ],
    "body": [
      "\\$request.isAsyncStarted()"
    ],
    "description": ""
  },
  "$request.isAsyncSupported(): boolean": {
    "prefix": [
      "$",
      "request.isAsyncSupported",
      "$request.isAsyncSupported"
    ],
    "body": [
      "\\$request.isAsyncSupported()"
    ],
    "description": ""
  },
  "$request.isRequestedSessionIdFromCookie(): boolean": {
    "prefix": [
      "$",
      "request.isRequestedSessionIdFromCookie",
      "$request.isRequestedSessionIdFromCookie"
    ],
    "body": [
      "\\$request.isRequestedSessionIdFromCookie()"
    ],
    "description": ""
  },
  "$request.isRequestedSessionIdFromUrl(): boolean": {
    "prefix": [
      "$",
      "request.isRequestedSessionIdFromUrl()",
      "$request.isRequestedSessionIdFromUrl()"
    ],
    "body": [
      "\\$request.isRequestedSessionIdFromUrl()"
    ],
    "description": ""
  },
  "$request.isRequestedSessionIdFromURL(): boolean": {
    "prefix": [
      "$",
      "request.isRequestedSessionIdFromURL",
      "$request.isRequestedSessionIdFromURL"
    ],
    "body": [
      "\\$request.isRequestedSessionIdFromURL()"
    ],
    "description": ""
  },
  "$request.isRequestedSessionIdValid(): boolean": {
    "prefix": [
      "$",
      "request.isRequestedSessionIdValid",
      "$request.isRequestedSessionIdValid"
    ],
    "body": [
      "\\$request.isRequestedSessionIdValid()"
    ],
    "description": ""
  },
  "$request.isSecure(): boolean": {
    "prefix": [
      "$",
      "request.isSecure",
      "$request.isSecure"
    ],
    "body": [
      "\\$request.isSecure()"
    ],
    "description": ""
  },
  "$request.isUserInRole(String arg0): boolean": {
    "prefix": [
      "$",
      "request.isUserInRole",
      "$request.isUserInRole"
    ],
    "body": [
      "\\$request.isUserInRole(${1:arg0})"
    ],
    "description": ""
  },
  "$request.setCharacterEncoding(String arg0): void": {
    "prefix": [
      "$",
      "request.setCharacterEncoding",
      "$request.setCharacterEncoding"
    ],
    "body": [
      "\\$request.setCharacterEncoding(${1:arg0})"
    ],
    "description": ""
  },
  "$request.startAsync(): AsyncContext": {
    "prefix": [
      "$",
      "request.startAsync",
      "$request.startAsync"
    ],
    "body": [
      "\\$request.startAsync()"
    ],
    "description": ""
  },
  "$request.startAsync(ServletRequest arg0, ServletResponse arg1): AsyncContext": {
    "prefix": [
      "$",
      "request.startAsync",
      "$request.startAsync"
    ],
    "body": [
      "\\$request.startAsync(${1:arg0}, ${2:arg1})"
    ],
    "description": ""
  },
  "$session.equals(Object obj): boolean": {
    "prefix": [
      "$",
      "session.equals",
      "$session.equals"
    ],
    "body": [
      "\\$session.equals(${1:obj})"
    ],
    "description": ""
  },
  "$session.getAttribute(String arg0): Object": {
    "prefix": [
      "$",
      "session.getAttribute",
      "$session.getAttribute"
    ],
    "body": [
      "\\$session.getAttribute(${1:arg0})"
    ],
    "description": ""
  },
  "$session.getAttributeNames(): Enumeration<String>": {
    "prefix": [
      "$",
      "session.getAttributeNames",
      "$session.getAttributeNames"
    ],
    "body": [
      "\\$session.getAttributeNames()"
    ],
    "description": ""
  },
  "$session.getCreationTime(): long": {
    "prefix": [
      "$",
      "session.getCreationTime",
      "$session.getCreationTime"
    ],
    "body": [
      "\\$session.getCreationTime()"
    ],
    "description": ""
  },
  "$session.getId(): String": {
    "prefix": [
      "$",
      "session.getId",
      "$session.getId"
    ],
    "body": [
      "\\$session.getId()"
    ],
    "description": ""
  },
  "$session.getLastAccessedTime(): long": {
    "prefix": [
      "$",
      "session.getLastAccessedTime",
      "$session.getLastAccessedTime"
    ],
    "body": [
      "\\$session.getLastAccessedTime()"
    ],
    "description": ""
  },
  "$session.getMaxInactiveInterval(): int": {
    "prefix": [
      "$",
      "session.getMaxInactiveInterval",
      "$session.getMaxInactiveInterval"
    ],
    "body": [
      "\\$session.getMaxInactiveInterval()"
    ],
    "description": ""
  },
  "$session.getServletContext(): ServletContext": {
    "prefix": [
      "$",
      "session.getServletContext",
      "$session.getServletContext"
    ],
    "body": [
      "\\$session.getServletContext()"
    ],
    "description": ""
  },
  "$session.getSessionContext(): HttpSessionContext": {
    "prefix": [
      "$",
      "session.getSessionContext",
      "$session.getSessionContext"
    ],
    "body": [
      "\\$session.getSessionContext()"
    ],
    "description": ""
  },
  "$session.getValue(String arg0): Object": {
    "prefix": [
      "$",
      "session.getValue",
      "$session.getValue"
    ],
    "body": [
      "\\$session.getValue(${1:arg0})"
    ],
    "description": ""
  },
  "$session.getValueNames(): String[]": {
    "prefix": [
      "$",
      "session.getValueNames",
      "$session.getValueNames"
    ],
    "body": [
      "\\$session.getValueNames()"
    ],
    "description": ""
  },
  "$session.hashCode(): int": {
    "prefix": [
      "$",
      "session.hashCode",
      "$session.hashCode"
    ],
    "body": [
      "\\$session.hashCode()"
    ],
    "description": ""
  },
  "$session.invalidate(): void": {
    "prefix": [
      "$",
      "session.invalidate",
      "$session.invalidate"
    ],
    "body": [
      "\\$session.invalidate()"
    ],
    "description": ""
  },
  "$session.isNew(): boolean": {
    "prefix": [
      "$",
      "session.isNew",
      "$session.isNew"
    ],
    "body": [
      "\\$session.isNew()"
    ],
    "description": ""
  },
  "$session.putValue(String arg0, Object arg1): void": {
    "prefix": [
      "$",
      "session.putValue",
      "$session.putValue"
    ],
    "body": [
      "\\$session.putValue(${1:arg0}, ${2:arg1})"
    ],
    "description": ""
  },
  "$session.removeAttribute(String arg0): void": {
    "prefix": [
      "$",
      "session.removeAttribute",
      "$session.removeAttribute"
    ],
    "body": [
      "\\$session.removeAttribute(${1:arg0})"
    ],
    "description": ""
  },
  "$session.removeValue(String arg0): void": {
    "prefix": [
      "$",
      "session.removeValue",
      "$session.removeValue"
    ],
    "body": [
      "\\$session.removeValue(${1:arg0})"
    ],
    "description": ""
  },
  "$session.setAttribute(String arg0, Object arg1): void": {
    "prefix": [
      "$",
      "session.setAttribute",
      "$session.setAttribute"
    ],
    "body": [
      "\\$session.setAttribute(${1:arg0}, ${2:arg1})"
    ],
    "description": ""
  },
  "$session.setMaxInactiveInterval(int arg0): void": {
    "prefix": [
      "$",
      "session.setMaxInactiveInterval",
      "$session.setMaxInactiveInterval"
    ],
    "body": [
      "\\$session.setMaxInactiveInterval(${1:arg0})"
    ],
    "description": ""
  },
  "$velutil.doesVelocityResourceExist(String templatePath): boolean": {
    "prefix": [
      "$",
      "velutil.doesVelocityResourceExist",
      "$velutil.doesVelocityResourceExist"
    ],
    "body": [
      "\\$velutil.doesVelocityResourceExist(${1:templatePath})"
    ],
    "description": ""
  },
  "$velutil.isVelocityFile(String path): boolean": {
    "prefix": [
      "$",
      "velutil.isVelocityFile",
      "$velutil.isVelocityFile"
    ],
    "body": [
      "\\$velutil.isVelocityFile(${1:path})"
    ],
    "description": ""
  },
  "$velutil.mergeTemplate(String templatePath): String": {
    "prefix": [
      "$",
      "velutil.mergeTemplate",
      "$velutil.mergeTemplate"
    ],
    "body": [
      "\\$velutil.mergeTemplate(${1:templatePath})"
    ],
    "description": ""
  },
  "$velutil.mergeTemplate(String templatePath, HttpServletResponse response): void": {
    "prefix": [
      "$",
      "velutil.mergeTemplate",
      "$velutil.mergeTemplate"
    ],
    "body": [
      "\\$velutil.mergeTemplate(${1:templatePath}, ${2:response})"
    ],
    "description": ""
  },
  "$webapi.canParseContent(String parsePath): boolean": {
    "prefix": [
      "$",
      "webapi.canParseContent",
      "$webapi.canParseContent"
    ],
    "body": [
      "\\$webapi.canParseContent(${1:parsePath})"
    ],
    "description": ""
  },
  "$webapi.canParseContent(String identifier, boolean isWorking): boolean": {
    "prefix": [
      "$",
      "webapi.canParseContent",
      "$webapi.canParseContent"
    ],
    "body": [
      "\\$webapi.canParseContent(${1:identifier}, ${2:isWorking})"
    ],
    "description": ""
  },
  "$webapi.capitalize(String str): String": {
    "prefix": [
      "$",
      "webapi.capitalize",
      "$webapi.capitalize"
    ],
    "body": [
      "\\$webapi.capitalize(${1:str})"
    ],
    "description": ""
  },
  "$webapi.castToInt(long num): int": {
    "prefix": [
      "$",
      "webapi.castToInt",
      "$webapi.castToInt"
    ],
    "body": [
      "\\$webapi.castToInt(${1:num})"
    ],
    "description": ""
  },
  "$webapi.contentHasLiveVersion(String identifier): boolean": {
    "prefix": [
      "$",
      "webapi.contentHasLiveVersion",
      "$webapi.contentHasLiveVersion"
    ],
    "body": [
      "\\$webapi.contentHasLiveVersion(${1:identifier})"
    ],
    "description": ""
  },
  "$webapi.dateToHTML(Date myDate): String": {
    "prefix": [
      "$",
      "webapi.dateToHTML",
      "$webapi.dateToHTML"
    ],
    "body": [
      "\\$webapi.dateToHTML(${1:myDate})"
    ],
    "description": ""
  },
  "$webapi.dateToHTML(Date myDate, String format): String": {
    "prefix": [
      "$",
      "webapi.dateToHTML",
      "$webapi.dateToHTML"
    ],
    "body": [
      "\\$webapi.dateToHTML(${1:myDate}, ${2:format})"
    ],
    "description": ""
  },
  "$webapi.dateToHTMLDateTimeRange(Date from, Date to): String": {
    "prefix": [
      "$",
      "webapi.dateToHTMLDateTimeRange",
      "$webapi.dateToHTMLDateTimeRange"
    ],
    "body": [
      "\\$webapi.dateToHTMLDateTimeRange(${1:from}, ${2:to})"
    ],
    "description": ""
  },
  "$webapi.dateToHTMLPrettyDay(int year, int month, int day): String": {
    "prefix": [
      "$",
      "webapi.dateToHTMLPrettyDay",
      "$webapi.dateToHTMLPrettyDay"
    ],
    "body": [
      "\\$webapi.dateToHTMLPrettyDay(${1:year}, ${2:month}, ${3:day})"
    ],
    "description": ""
  },
  "$webapi.dateToHTMLTimeRange(Date from, Date to): String": {
    "prefix": [
      "$",
      "webapi.dateToHTMLTimeRange",
      "$webapi.dateToHTMLTimeRange"
    ],
    "body": [
      "\\$webapi.dateToHTMLTimeRange(${1:from}, ${2:to})"
    ],
    "description": ""
  },
  "$webapi.dateToLongPrettyHTMLDate(Date myDate): Stirng": {
    "prefix": [
      "$",
      "webapi.dateToLongPrettyHTMLDate",
      "$webapi.dateToLongPrettyHTMLDate"
    ],
    "body": [
      "\\$webapi.dateToLongPrettyHTMLDate(${1:myDate})"
    ],
    "description": ""
  },
  "$webapi.doesUserHasPermissionOverFile(String fileInode, int permission): boolean": {
    "prefix": [
      "$",
      "webapi.doesUserHasPermissionOverFile",
      "$webapi.doesUserHasPermissionOverFile"
    ],
    "body": [
      "\\$webapi.doesUserHasPermissionOverFile(${1:fileInode}, ${2:permission})"
    ],
    "description": ""
  },
  "$webapi.encodeURL(String url): String": {
    "prefix": [
      "$",
      "webapi.encodeURL",
      "$webapi.encodeURL"
    ],
    "body": [
      "\\$webapi.encodeURL(${1:url})"
    ],
    "description": ""
  },
  "$webapi.endMonthDateString(): String": {
    "prefix": [
      "$",
      "webapi.endMonthDateString",
      "$webapi.endMonthDateString"
    ],
    "body": [
      "\\$webapi.endMonthDateString()"
    ],
    "description": ""
  },
  "$webapi.endWeekDateString(): String": {
    "prefix": [
      "$",
      "webapi.endWeekDateString",
      "$webapi.endWeekDateString"
    ],
    "body": [
      "\\$webapi.endWeekDateString()"
    ],
    "description": ""
  },
  "$webapi.equalsNumbers(float one, float two): boolean": {
    "prefix": [
      "$",
      "webapi.equalsNumbers",
      "$webapi.equalsNumbers"
    ],
    "body": [
      "\\$webapi.equalsNumbers(${1:one}, ${2:two})"
    ],
    "description": ""
  },
  "$webapi.findIdentifierById(String id): Identifier": {
    "prefix": [
      "$",
      "webapi.findIdentifierById",
      "$webapi.findIdentifierById"
    ],
    "body": [
      "\\$webapi.findIdentifierById(${1:id})"
    ],
    "description": ""
  },
  "$webapi.formatDate(Date date, String format): static String": {
    "prefix": [
      "$",
      "webapi.formatDate",
      "$webapi.formatDate"
    ],
    "body": [
      "\\$webapi.formatDate(${1:date}, ${2:format})"
    ],
    "description": ""
  },
  "$webapi.getActualYear(): int": {
    "prefix": [
      "$",
      "webapi.getActualYear",
      "$webapi.getActualYear"
    ],
    "body": [
      "\\$webapi.getActualYear()"
    ],
    "description": ""
  },
  "$webapi.getAssetInode(String path): String": {
    "prefix": [
      "$",
      "webapi.getAssetInode",
      "$webapi.getAssetInode"
    ],
    "body": [
      "\\$webapi.getAssetInode(${1:path})"
    ],
    "description": ""
  },
  "$webapi.getAssetInode(String path, Host host | String hostId): String": {
    "prefix": [
      "$",
      "webapi.getAssetInode",
      "$webapi.getAssetInode"
    ],
    "body": [
      "\\$webapi.getAssetInode(${1:path}, ${2:host|hostId})"
    ],
    "description": ""
  },
  "$webapi.getAssetPath(String path): String": {
    "prefix": [
      "$",
      "webapi.getAssetPath",
      "$webapi.getAssetPath"
    ],
    "body": [
      "\\$webapi.getAssetPath(${1:path})"
    ],
    "description": ""
  },
  "$webapi.getAssetPath(String path, Host host | String hostStr): String": {
    "prefix": [
      "$",
      "webapi.getAssetPath",
      "$webapi.getAssetPath"
    ],
    "body": [
      "\\$webapi.getAssetPath(${1:path}, ${2:host|hostStr})"
    ],
    "description": ""
  },
  "$webapi.getCategoriesByNonLoggedUser(): Object": {
    "prefix": [
      "$",
      "webapi.getCategoriesByNonLoggedUser",
      "$webapi.getCategoriesByNonLoggedUser"
    ],
    "body": [
      "\\$webapi.getCategoriesByNonLoggedUser()"
    ],
    "description": ""
  },
  "$webapi.getConfigVar(String varName): String": {
    "prefix": [
      "$",
      "webapi.getConfigVar",
      "$webapi.getConfigVar"
    ],
    "body": [
      "\\$webapi.getConfigVar(${1:varName})"
    ],
    "description": ""
  },
  "$webapi.getContentIdentifier(String parsePath): String": {
    "prefix": [
      "$",
      "webapi.getContentIdentifier",
      "$webapi.getContentIdentifier"
    ],
    "body": [
      "\\$webapi.getContentIdentifier(${1:parsePath})"
    ],
    "description": ""
  },
  "$webapi.getContentInode(String parsePath): String": {
    "prefix": [
      "$",
      "webapi.getContentInode",
      "$webapi.getContentInode"
    ],
    "body": [
      "\\$webapi.getContentInode(${1:parsePath})"
    ],
    "description": ""
  },
  "$webapi.getContentPermissions(String parsePath): String": {
    "prefix": [
      "$",
      "webapi.getContentPermissions",
      "$webapi.getContentPermissions"
    ],
    "body": [
      "\\$webapi.getContentPermissions(${1:parsePath})"
    ],
    "description": ""
  },
  "$webapi.getCurrentMonth(): String": {
    "prefix": [
      "$",
      "webapi.getCurrentMonth",
      "$webapi.getCurrentMonth"
    ],
    "body": [
      "\\$webapi.getCurrentMonth()"
    ],
    "description": ""
  },
  "$webapi.getIdentifierByInode(String childInode): Identifier": {
    "prefix": [
      "$",
      "webapi.getIdentifierByInode",
      "$webapi.getIdentifierByInode"
    ],
    "body": [
      "\\$webapi.getIdentifierByInode(${1:childInode})"
    ],
    "description": "This method return the identifier object from cache"
  },
  "$webapi.getIdentifierByURI(String URI): String": {
    "prefix": [
      "$",
      "webapi.getIdentifierByURI",
      "$webapi.getIdentifierByURI"
    ],
    "body": [
      "\\$webapi.getIdentifierByURI(${1:URI})"
    ],
    "description": ""
  },
  "$webapi.getIdentifierInode(String childInode): String": {
    "prefix": [
      "$",
      "webapi.getIdentifierInode",
      "$webapi.getIdentifierInode"
    ],
    "body": [
      "\\$webapi.getIdentifierInode(${1:childInode})"
    ],
    "description": ""
  },
  "$webapi.getLiveFileAsset(Identifier id | Inode inode): Inode": {
    "prefix": [
      "$",
      "webapi.getLiveFileAsset",
      "$webapi.getLiveFileAsset"
    ],
    "body": [
      "\\$webapi.getLiveFileAsset(${1:id|inode})"
    ],
    "description": ""
  },
  "$webapi.getLoggedUser(): User": {
    "prefix": [
      "$",
      "webapi.getLoggedUser",
      "$webapi.getLoggedUser"
    ],
    "body": [
      "\\$webapi.getLoggedUser()"
    ],
    "description": ""
  },
  "$webapi.getShortMonthName(int month): String": {
    "prefix": [
      "$",
      "webapi.getShortMonthName",
      "$webapi.getShortMonthName"
    ],
    "body": [
      "\\$webapi.getShortMonthName(${1:month})"
    ],
    "description": ""
  },
  "$webapi.getShortMonthName(String month): String": {
    "prefix": [
      "$",
      "webapi.getShortMonthName",
      "$webapi.getShortMonthName"
    ],
    "body": [
      "\\$webapi.getShortMonthName(${1:month})"
    ],
    "description": ""
  },
  "$webapi.getSubURIByDepth(int depth): String": {
    "prefix": [
      "$",
      "webapi.getSubURIByDepth",
      "$webapi.getSubURIByDepth"
    ],
    "body": [
      "\\$webapi.getSubURIByDepth(${1:depth})"
    ],
    "description": "This method gives to you the sub URI of a complete request URI given the deepness desired."
  },
  "$webapi.getUserEmail(): String": {
    "prefix": [
      "$",
      "webapi.getUserEmail",
      "$webapi.getUserEmail"
    ],
    "body": [
      "\\$webapi.getUserEmail()"
    ],
    "description": ""
  },
  "$webapi.getUserFullName(): String": {
    "prefix": [
      "$",
      "webapi.getUserFullName",
      "$webapi.getUserFullName"
    ],
    "body": [
      "\\$webapi.getUserFullName()"
    ],
    "description": ""
  },
  "$webapi.htmlEncode(String html): String": {
    "prefix": [
      "$",
      "webapi.htmlEncode",
      "$webapi.htmlEncode"
    ],
    "body": [
      "\\$webapi.htmlEncode(${1:html})"
    ],
    "description": ""
  },
  "$webapi.htmlLineBreak(String input): String": {
    "prefix": [
      "$",
      "webapi.htmlLineBreak",
      "$webapi.htmlLineBreak"
    ],
    "body": [
      "\\$webapi.htmlLineBreak(${1:input})"
    ],
    "description": ""
  },
  "$webapi.isBiggerThan(String float1, String float2): booleab": {
    "prefix": [
      "$",
      "webapi.isBiggerThan",
      "$webapi.isBiggerThan"
    ],
    "body": [
      "\\$webapi.isBiggerThan(${1:float1}, ${2:float2})"
    ],
    "description": ""
  },
  "$webapi.isCreateFormEmpty(Object form, HttpServletResponse response): static void": {
    "prefix": [
      "$",
      "webapi.isCreateFormEmpty",
      "$webapi.isCreateFormEmpty"
    ],
    "body": [
      "\\$webapi.isCreateFormEmpty(${1:form}, ${2:response})"
    ],
    "description": ""
  },
  "$webapi.isImage(String text): boolean": {
    "prefix": [
      "$",
      "webapi.isImage",
      "$webapi.isImage"
    ],
    "body": [
      "\\$webapi.isImage(${1:text})"
    ],
    "description": ""
  },
  "$webapi.isInArray(String | String[] value, String | String[] array): String": {
    "prefix": [
      "$",
      "webapi.isInArray",
      "$webapi.isInArray"
    ],
    "body": [
      "\\$webapi.isInArray(${1:value|values}, ${2:array})"
    ],
    "description": ""
  },
  "$webapi.isPartner(): boolean": {
    "prefix": [
      "$",
      "webapi.isPartner",
      "$webapi.isPartner"
    ],
    "body": [
      "\\$webapi.isPartner()"
    ],
    "description": ""
  },
  "$webapi.isSet(String input): boolean": {
    "prefix": [
      "$",
      "webapi.isSet",
      "$webapi.isSet"
    ],
    "body": [
      "\\$webapi.isSet(${1:input})"
    ],
    "description": ""
  },
  "$webapi.javaScriptify(String fixme): static String": {
    "prefix": [
      "$",
      "webapi.javaScriptify",
      "$webapi.javaScriptify"
    ],
    "body": [
      "\\$webapi.javaScriptify(${1:fixme})"
    ],
    "description": ""
  },
  "$webapi.obfuscateCreditCard(String ccnum): String": {
    "prefix": [
      "$",
      "webapi.obfuscateCreditCard",
      "$webapi.obfuscateCreditCard"
    ],
    "body": [
      "\\$webapi.obfuscateCreditCard(${1:ccnum})"
    ],
    "description": ""
  },
  "$webapi.parseInt(int | long | String num): int": {
    "prefix": [
      "$",
      "webapi.parseInt",
      "$webapi.parseInt"
    ],
    "body": [
      "\\$webapi.parseInt(${1:num})"
    ],
    "description": ""
  },
  "$webapi.parseLong(int | long | String num): long": {
    "prefix": [
      "$",
      "webapi.parseLong",
      "$webapi.parseLong"
    ],
    "body": [
      "\\$webapi.parseLong(${1:num})"
    ],
    "description": ""
  },
  "$webapi.prettyShortenString(String text, String maxLength): String": {
    "prefix": [
      "$",
      "webapi.prettyShortenString",
      "$webapi.prettyShortenString"
    ],
    "body": [
      "\\$webapi.prettyShortenString(${1:text}, ${2:maxLength})"
    ],
    "description": ""
  },
  "$webapi.resolveHostName(String hostName): Host": {
    "prefix": [
      "$",
      "webapi.resolveHostName",
      "$webapi.resolveHostName"
    ],
    "body": [
      "\\$webapi.resolveHostName(${1:hostName})"
    ],
    "description": ""
  },
  "$webapi.setErrorResponseCode(int code): void": {
    "prefix": [
      "$",
      "webapi.setErrorResponseCode",
      "$webapi.setErrorResponseCode"
    ],
    "body": [
      "\\$webapi.setErrorResponseCode(${1:code})"
    ],
    "description": "This Method set the HttpServletResponse status with the specified error code."
  },
  "$webapi.setVelocityVar(String varName, Object value): void": {
    "prefix": [
      "$",
      "webapi.setVelocityVar",
      "$webapi.setVelocityVar"
    ],
    "body": [
      "\\$webapi.setVelocityVar(${1:varName}, ${2:value})"
    ],
    "description": ""
  },
  "$webapi.splitString(String str, String sep): List<String>": {
    "prefix": [
      "$",
      "webapi.splitString",
      "$webapi.splitString"
    ],
    "body": [
      "\\$webapi.splitString(${1:str}, ${2:sep})"
    ],
    "description": ""
  },
  "$webapi.startMonthDateString(): String": {
    "prefix": [
      "$",
      "webapi.startMonthDateString",
      "$webapi.startMonthDateString"
    ],
    "body": [
      "\\$webapi.startMonthDateString()"
    ],
    "description": ""
  },
  "$webapi.startWeekDateString(): String": {
    "prefix": [
      "$",
      "webapi.startWeekDateString",
      "$webapi.startWeekDateString"
    ],
    "body": [
      "\\$webapi.startWeekDateString()"
    ],
    "description": ""
  },
  "$webapi.stringLength(String text): int": {
    "prefix": [
      "$",
      "webapi.stringLength",
      "$webapi.stringLength"
    ],
    "body": [
      "\\$webapi.stringLength(${1:text})"
    ],
    "description": ""
  },
  "$webapi.subString(String text, int begin, int end): String": {
    "prefix": [
      "$",
      "webapi.subString",
      "$webapi.subString"
    ],
    "body": [
      "\\$webapi.subString(${1:text}, ${2:begin}, ${3:end})"
    ],
    "description": ""
  },
  "$webapi.toCCFormat(String creditCard): String": {
    "prefix": [
      "$",
      "webapi.toCCFormat",
      "$webapi.toCCFormat"
    ],
    "body": [
      "\\$webapi.toCCFormat(${1:creditCard})"
    ],
    "description": ""
  },
  "$webapi.todayDateString(): String": {
    "prefix": [
      "$",
      "webapi.todayDateString",
      "$webapi.todayDateString"
    ],
    "body": [
      "\\$webapi.todayDateString()"
    ],
    "description": ""
  },
  "$webapi.toMonthFormat(int month): String": {
    "prefix": [
      "$",
      "webapi.toMonthFormat",
      "$webapi.toMonthFormat"
    ],
    "body": [
      "\\$webapi.toMonthFormat(${1:month})"
    ],
    "description": ""
  },
  "$webapi.toPriceFormat(double | float price): String": {
    "prefix": [
      "$",
      "webapi.toPriceFormat",
      "$webapi.toPriceFormat"
    ],
    "body": [
      "\\$webapi.toPriceFormat(${1:price})"
    ],
    "description": ""
  },
  "$webapi.trim(String input): String": {
    "prefix": [
      "$",
      "webapi.trim",
      "$webapi.trim"
    ],
    "body": [
      "\\$webapi.trim(${1:input})"
    ],
    "description": ""
  },
  "$webapi.trimToUpper(String input): String": {
    "prefix": [
      "$",
      "webapi.trimToUpper",
      "$webapi.trimToUpper"
    ],
    "body": [
      "\\$webapi.trimToUpper(${1:input})"
    ],
    "description": ""
  },
  "$webapi.xmlEscape(String x): String": {
    "prefix": [
      "$",
      "webapi.xmlEscape",
      "$webapi.xmlEscape"
    ],
    "body": [
      "\\$webapi.xmlEscape(${1:x})"
    ],
    "description": ""
  },
  "$website.getFolder(String parentFolder, String hostId): Folder": {
    "prefix": [
      "$",
      "website.getFolder",
      "$website.getFolder"
    ],
    "body": [
      "\\$website.getFolder(${1:parentFolder}, ${2:hostId})"
    ],
    "description": ""
  },
  "$website.getHost(String hostId): Host": {
    "prefix": [
      "$",
      "website.getHost",
      "$website.getHost"
    ],
    "body": [
      "\\$website.getHost(${1:hostId})"
    ],
    "description": "Get host based on the id, if can not resolved returns null"
  },
  "$website.getHostName(String hostId): String": {
    "prefix": [
      "$",
      "website.getHostName",
      "$website.getHostName"
    ],
    "body": [
      "\\$website.getHostName(${1:hostId})"
    ],
    "description": "Get host name based on the id, if can not resolved returns hostId"
  },
  "$website.getSubFolders(Folder parentFolder): List<Folder>": {
    "prefix": [
      "$",
      "website.getSubFolders",
      "$website.getSubFolders"
    ],
    "body": [
      "\\$website.getSubFolders(${1:parentFolder})"
    ],
    "description": ""
  },
  "$website.getSubFolders(String parentFolder, String hostId): List<Folder>": {
    "prefix": [
      "$",
      "website.getSubFolders",
      "$website.getSubFolders"
    ],
    "body": [
      "\\$website.getSubFolders(${1:parentFolder}, ${2:hostId})"
    ],
    "description": ""
  },
  "$dotwiki.confluence(String text): String": {
    "prefix": [
      "$",
      "dotwiki.confluence",
      "$dotwiki.confluence"
    ],
    "body": [
      "\\$dotwiki.confluence(${1:text})"
    ],
    "description": "Converts text into a partial html using the Confluence markup language"
  },
  "$dotwiki.confluenceToFullHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.confluenceToFullHTML",
      "$dotwiki.confluenceToFullHTML"
    ],
    "body": [
      "\\$dotwiki.confluenceToFullHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a full html using the Confluence markup language"
  },
  "$dotwiki.confluenceToHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.confluenceToHTML",
      "$dotwiki.confluenceToHTML"
    ],
    "body": [
      "\\$dotwiki.confluenceToHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a partial html using the Confluence markup language"
  },
  "$dotwiki.mediawiki(String text): String": {
    "prefix": [
      "$",
      "dotwiki.mediawiki",
      "$dotwiki.mediawiki"
    ],
    "body": [
      "\\$dotwiki.mediawiki(String text)"
    ],
    "description": "Converts text into a partial html using the MediaWiki markup language"
  },
  "$dotwiki.mediawikiToFullHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.mediawikiToFullHTML",
      "$dotwiki.mediawikiToFullHTML"
    ],
    "body": [
      "\\$dotwiki.mediawikiToFullHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a full html using the MediaWiki markup language"
  },
  "$dotwiki.mediawikiToHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.mediawikiToHTML",
      "$dotwiki.mediawikiToHTML"
    ],
    "body": [
      "\\$dotwiki.mediawikiToHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a partial html using the MediaWiki markup language"
  },
  "$dotwiki.textile(String text): String": {
    "prefix": [
      "$",
      "dotwiki.textile",
      "$dotwiki.textile"
    ],
    "body": [
      "\\$dotwiki.textile(${1:text})"
    ],
    "description": "Converts text into a partial html using the Textile markup language"
  },
  "$dotwiki.textileToFullHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.textileToFullHTML",
      "$dotwiki.textileToFullHTML"
    ],
    "body": [
      "\\$dotwiki.textileToFullHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a full html using the Textile markup language"
  },
  "$dotwiki.textileToHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.textileToHTML",
      "$dotwiki.textileToHTML"
    ],
    "body": [
      "\\$dotwiki.textileToHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a partial html using the Textile markup language"
  },
  "$dotwiki.tracwiki(String text): String": {
    "prefix": [
      "$",
      "dotwiki.tracwiki",
      "$dotwiki.tracwiki"
    ],
    "body": [
      "\\$dotwiki.tracwiki(${1:text})"
    ],
    "description": "Converts text into a partial html using the TrackWiki markup language"
  },
  "$dotwiki.tracwikiToFullHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.tracwikiToFullHTML",
      "$dotwiki.tracwikiToFullHTML"
    ],
    "body": [
      "\\$dotwiki.tracwikiToFullHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a full html using the TrackWiki markup language"
  },
  "$dotwiki.tracwikiToHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.tracwikiToHTML",
      "$dotwiki.tracwikiToHTML"
    ],
    "body": [
      "\\$dotwiki.tracwikiToHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a partial html using the TrackWiki markup language"
  },
  "$dotwiki.twiki(String text): String": {
    "prefix": [
      "$",
      "dotwiki.twiki",
      "$dotwiki.twiki"
    ],
    "body": [
      "\\$dotwiki.twiki(${1:text})"
    ],
    "description": "Converts text into a partial html using the TWiki markup language"
  },
  "$dotwiki.twikiToFullHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.twikiToFullHTML",
      "$dotwiki.twikiToFullHTML"
    ],
    "body": [
      "\\$dotwiki.twikiToFullHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a full html using the TWiki markup language"
  },
  "$dotwiki.twikiToHTML(String text, String cssPath): String": {
    "prefix": [
      "$",
      "dotwiki.twikiToHTML",
      "$dotwiki.twikiToHTML"
    ],
    "body": [
      "\\$dotwiki.twikiToHTML(${1:text}, ${2:cssPath})"
    ],
    "description": "Converts text into a partial html using the TWiki markup language"
  },
  "$dotwiki.wikiOtherLanguageToFullHTML(String text, String cssPath, String markupLanguage): String": {
    "prefix": [
      "$",
      "dotwiki.wikiOtherLanguageToFullHTML",
      "$dotwiki.wikiOtherLanguageToFullHTML"
    ],
    "body": [
      "\\$dotwiki.wikiOtherLanguageToFullHTML(${1:text}, ${2:cssPath}, ${3:markupLanguage})"
    ],
    "description": "Converts string into an full HTML using the markup language (MediaWiki, Confluence, Textile, TracWiki and TWiki) and css path specified"
  },
  "$dotwiki.wikiOtherLanguageToHTML(String text, String markupLanguage): String": {
    "prefix": [
      "$",
      "dotwiki.wikiOtherLanguageToHTML",
      "$dotwiki.wikiOtherLanguageToHTML"
    ],
    "body": [
      "\\$dotwiki.wikiOtherLanguageToHTML(${1:text}, ${2:markupLanguage})"
    ],
    "description": "Converts string into and html using one of the following markup languages: MediaWiki, Confluence, Textile, TracWiki and TWiki"
  },
  "$dotwiki.wikiOtherLanguageToHTML(String text, String cssPath, String markupLanguage): String": {
    "prefix": [
      "$",
      "dotwiki.wikiOtherLanguageToHTML",
      "$dotwiki.wikiOtherLanguageToHTML"
    ],
    "body": [
      "\\$dotwiki.wikiOtherLanguageToHTML(${1:text}, ${2:cssPath}, ${3:markupLanguage})"
    ],
    "description": "Converts string into a parcial HTML using the markup language (MediaWiki, Confluence, Textile, TracWiki and TWiki) and css path specified"
  },
  "$dotwiki.wikiToHTML(String text, boolean fullHTML, String cssPath, String markupLanguage): String": {
    "prefix": [
      "$",
      "dotwiki.wikiToHTML",
      "$dotwiki.wikiToHTML"
    ],
    "body": [
      "\\$dotwiki.wikiToHTML(${1:text}, ${2:fullHTML}, ${3:cssPath}, ${4:arkupLanguage})"
    ],
    "description": "Converts string into an full or parcial HTML, using the markup language (MediaWiki, Confluence, Textile, TracWiki and TWiki) and css path specified"
  },
  "$workflowtool.findAction(String id, User user): WorkflowAction": {
    "prefix": [
      "$",
      "workflowtool.findAction",
      "$workflowtool.findAction"
    ],
    "body": [
      "\\$workflowtool.findAction(${1:id}, ${2:user}) "
    ],
    "description": ""
  },
  "$workflowtool.findActionClass(String id): WorkflowActionClass": {
    "prefix": [
      "$",
      "workflowtool.findActionClass",
      "$workflowtool.findActionClass"
    ],
    "body": [
      "\\$workflowtool.findActionClass(${1:id})"
    ],
    "description": ""
  },
  "$workflowtool.findActionClasses(WorkflowAction action): List<WorkflowActionClass>": {
    "prefix": [
      "$",
      "workflowtool.findActionClasses",
      "$workflowtool.findActionClasses"
    ],
    "body": [
      "\\$workflowtool.findActionClasses(${1:action})"
    ],
    "description": ""
  },
  "$workflowtool.findActionlet(String clazz): WorkFlowActionlet": {
    "prefix": [
      "$",
      "workflowtool.findActionlet",
      "$workflowtool.findActionlet"
    ],
    "body": [
      "\\$workflowtool.findActionlet(${1:clazz})"
    ],
    "description": ""
  },
  "$workflowtool.findActionlets(): List<WorkFlowActionlet>": {
    "prefix": [
      "$",
      "workflowtool.findActionlets",
      "$workflowtool.findActionlets"
    ],
    "body": [
      "\\$workflowtool.findActionlets()"
    ],
    "description": ""
  },
  "$workflowtool.findActions(List<WorkflowStep> steps | WorkflowStep step, User user): List<WorkflowAction>": {
    "prefix": [
      "$",
      "workflowtool.findActions",
      "$workflowtool.findActions"
    ],
    "body": [
      "\\$workflowtool.findActions(${1:steps|step}, ${2:user})"
    ],
    "description": ""
  },
  "$workflowtool.findActions(List<WorkflowStep> steps | WorkflowStep step, User user, Permissionable permissionable): List<WorkflowAction>": {
    "prefix": [
      "$",
      "workflowtool.findActions",
      "$workflowtool.findActions"
    ],
    "body": [
      "\\$workflowtool.findActions(${1:steps|step}, ${2:user}, ${3:permissionable})"
    ],
    "description": ""
  },
  "$workflowtool.findAvailableActions(Contentlet contentlet, User user): List<WorkflowAction>": {
    "prefix": [
      "$",
      "workflowtool.findAvailableActions",
      "$workflowtool.findAvailableActions"
    ],
    "body": [
      "\\$workflowtool.findAvailableActions(${1:contentlet}, ${2:user})"
    ],
    "description": ""
  },
  "$workflowtool.findParamsForActionClass(WorkflowActionClass actionClass): Map<String,WorkflowActionClassParameter>": {
    "prefix": [
      "$",
      "workflowtool.findParamsForActionClass",
      "$workflowtool.findParamsForActionClass"
    ],
    "body": [
      "\\$workflowtool.findParamsForActionClass(${1:actionClass})"
    ],
    "description": ""
  },
  "$workflowtool.findScheme(String id): WorkflowScheme": {
    "prefix": [
      "$",
      "workflowtool.findScheme",
      "$workflowtool.findScheme"
    ],
    "body": [
      "\\$workflowtool.findScheme(${1:id})"
    ],
    "description": ""
  },
  "$workflowtool.findSchemes(boolean showArchived): List<WorkflowScheme>": {
    "prefix": [
      "$",
      "workflowtool.findSchemes",
      "$workflowtool.findSchemes"
    ],
    "body": [
      "\\$workflowtool.findSchemes(${1:showArchived})"
    ],
    "description": ""
  },
  "$workflowtool.findSchemesForStruct(Structure struct): List<WorkflowScheme>": {
    "prefix": [
      "$",
      "workflowtool.findSchemesForStruct",
      "$workflowtool.findSchemesForStruct"
    ],
    "body": [
      "\\$workflowtool.findSchemesForStruct(${1:struct})"
    ],
    "description": ""
  },
  "$workflowtool.findStep(String id): WorkflowStep": {
    "prefix": [
      "$",
      "workflowtool.findStep",
      "$workflowtool.findStep"
    ],
    "body": [
      "\\$workflowtool.findStep(${1:id})"
    ],
    "description": ""
  },
  "$workflowtool.findSteps(WorkflowScheme scheme): List<WorkflowStep>": {
    "prefix": [
      "$",
      "workflowtool.findSteps",
      "$workflowtool.findSteps"
    ],
    "body": [
      "\\$workflowtool.findSteps(${1:scheme})"
    ],
    "description": ""
  },
  "$workflowtool.findStepsByContentlet(Contentlet contentlet): List<WorkflowStep>": {
    "prefix": [
      "$",
      "workflowtool.findStepsByContentlet",
      "$workflowtool.findStepsByContentlet"
    ],
    "body": [
      "\\$workflowtool.findStepsByContentlet(${1:contentlet})"
    ],
    "description": ""
  },
  "$workflowtool.findTaskByContentlet(Contentlet contentlet): WorkflowTask": {
    "prefix": [
      "$",
      "workflowtool.findTaskByContentlet",
      "$workflowtool.findTaskByContentlet"
    ],
    "body": [
      "\\$workflowtool.findTaskByContentlet(${1:contentlet})"
    ],
    "description": ""
  },
  "$workflowtool.findTaskById(String id): WorkflowTask": {
    "prefix": [
      "$",
      "workflowtool.findTaskById",
      "$workflowtool.findTaskById"
    ],
    "body": [
      "\\$workflowtool.findTaskById(${1:id})"
    ],
    "description": ""
  },
  "$workflowtool.findWorkFlowComments(WorkflowTask task): List<WorkflowComment>": {
    "prefix": [
      "$",
      "workflowtool.findWorkFlowComments",
      "$workflowtool.findWorkFlowComments"
    ],
    "body": [
      "\\$workflowtool.findWorkFlowComments(${1:task})"
    ],
    "description": ""
  },
  "$workflowtool.findWorkflowHistory(WorkflowTask task): List<WorkflowHistory>": {
    "prefix": [
      "$",
      "workflowtool.findWorkflowHistory",
      "$workflowtool.findWorkflowHistory"
    ],
    "body": [
      "\\$workflowtool.findWorkflowHistory(${1:task})"
    ],
    "description": ""
  },
  "$workflowtool.fire(Map<String,Object> properties, String wfActionId): ContentMap": {
    "prefix": [
      "$",
      "workflowtool.fire",
      "$workflowtool.fire"
    ],
    "body": [
      "\\$workflowtool.fire(${1:properties}, ${2:wfActionId})"
    ],
    "description": "Fires a Workflow Action identified by wfActionId using the given map of properties of a contentlet."
  },
  "$workflowtool.fireWorkflowNoCheckin(Contentlet contentlet, User user): WorkflowProcessor": {
    "prefix": [
      "$",
      "workflowtool.fireWorkflowNoCheckin",
      "$workflowtool.fireWorkflowNoCheckin"
    ],
    "body": [
      "\\$workflowtool.fireWorkflowNoCheckin(${1:contentlet}, ${2:user})"
    ],
    "description": ""
  },
  "$workflowtool.fireWorkflowPostCheckin(WorkflowProcessor wflow): void": {
    "prefix": [
      "$",
      "workflowtool.fireWorkflowPostCheckin",
      "$workflowtool.fireWorkflowPostCheckin"
    ],
    "body": [
      "\\$workflowtool.fireWorkflowPostCheckin(${1:wflow})"
    ],
    "description": ""
  },
  "$workflowtool.fireWorkflowPreCheckin(Contentlet contentlet, User user): WorkflowProcessor": {
    "prefix": [
      "$",
      "workflowtool.fireWorkflowPreCheckin",
      "$workflowtool.fireWorkflowPreCheckin"
    ],
    "body": [
      "\\$workflowtool.fireWorkflowPreCheckin(${1:contentlet}, ${2:user})"
    ],
    "description": ""
  },
  "$xmltool.attr(Object o): String": {
    "prefix": [
      "$",
      "xmltool.attr",
      "$xmltool.attr"
    ],
    "body": [
      "\\$xmltool.attr(${1:o})"
    ],
    "description": "Returns the value of the specified attribute for the first/sole Node in the internal Node list for this instance, if that Node is an Element."
  },
  "$xmltool.attributes(): Map<String,String>": {
    "prefix": [
      "$",
      "xmltool.attributes",
      "$xmltool.attributes"
    ],
    "body": [
      "\\$xmltool.attributes()"
    ],
    "description": "Returns a Map of all attributes for the first/sole Node held internally by this instance."
  },
  "$xmltool.children(): XmlTool": {
    "prefix": [
      "$",
      "xmltool.children",
      "$xmltool.children"
    ],
    "body": [
      "\\$xmltool.children()"
    ],
    "description": "Returns a new XmlTool instance that wraps all the child Elements of all the current internally held nodes that are Elements themselves."
  },
  "$xmltool.configure(ValueParser parser): protected void": {
    "prefix": [
      "$",
      "xmltool.configure",
      "$xmltool.configure"
    ],
    "body": [
      "\\$xmltool.configure(${1:parser})"
    ],
    "description": "Looks for the \"file\" parameter and automatically uses read(String) to parse the file and set the resulting Document as the root node for this instance."
  },
  "$xmltool.find(Object o | String xpath): XmlTool": {
    "prefix": [
      "$",
      "xmltool.find",
      "$xmltool.find"
    ],
    "body": [
      "\\$xmltool.find(${1:o|xpath})"
    ],
    "description": "Converts the specified object to a String and calls find(String) with that. With string: Performs an XPath selection on the current set of Nodes held by this instance and returns a new XmlTool instance that wraps those results."
  },
  "$xmltool.get(Object o | Number n): Object": {
    "prefix": [
      "$",
      "xmltool.get",
      "$xmltool.get"
    ],
    "body": [
      "\\$xmltool.get(${1:o|xpath})"
    ],
    "description": "This will first attempt to find an attribute with the specified name and return its value."
  },
  "$xmltool.getFirst(): XmlTool": {
    "prefix": [
      "$",
      "xmltool.getFirst",
      "$xmltool.getFirst"
    ],
    "body": [
      "\\$xmltool.getFirst()"
    ],
    "description": "Returns an XmlTool that wraps only the first Node from this instance's internal Node list."
  },
  "$xmltool.getLast(): XmlTool": {
    "prefix": [
      "$",
      "xmltool.getLast",
      "$xmltool.getLast"
    ],
    "body": [
      "\\$xmltool.getLast()"
    ],
    "description": "Returns an XmlTool that wraps only the last Node from this instance's internal Node list."
  },
  "$xmltool.getName(): Object": {
    "prefix": [
      "$",
      "xmltool.getName",
      "$xmltool.getName"
    ],
    "body": [
      "\\$xmltool.getName()"
    ],
    "description": "Asks get(Object) for a \"name\" result."
  },
  "$xmltool.getNodeName(): String": {
    "prefix": [
      "$",
      "xmltool.getNodeName",
      "$xmltool.getNodeName"
    ],
    "body": [
      "\\$xmltool.getNodeName()"
    ],
    "description": "Returns the name of the root node."
  },
  "$xmltool.getParent(): XmlTool": {
    "prefix": [
      "$",
      "xmltool.getParent",
      "$xmltool.getParent"
    ],
    "body": [
      "\\$xmltool.getParent()"
    ],
    "description": "Returns a new XmlTool instance that wraps the parent Element of the first/sole Node being wrapped by this instance."
  },
  "$xmltool.getPath(): String": {
    "prefix": [
      "$",
      "xmltool.getPath",
      "$xmltool.getPath"
    ],
    "body": [
      "\\$xmltool.getPath()"
    ],
    "description": "Returns the XPath that identifies the first/sole Node represented by this instance."
  },
  "$xmltool.getText(): String": {
    "prefix": [
      "$",
      "xmltool.getText",
      "$xmltool.getText"
    ],
    "body": [
      "\\$xmltool.getText()"
    ],
    "description": "Returns the concatenated text content of all the internally held nodes."
  },
  "$xmltool.getTTL(): static long": {
    "prefix": [
      "$",
      "xmltool.getTTL",
      "$xmltool.getTTL"
    ],
    "body": [
      "\\$xmltool.getTTL()"
    ],
    "description": "Return the XmlTool Timte to Live in minutes"
  },
  "$xmltool.isEmpty(): boolean": {
    "prefix": [
      "$",
      "xmltool.isEmpty",
      "$xmltool.isEmpty"
    ],
    "body": [
      "\\$xmltool.isEmpty()"
    ],
    "description": "Returns true if there are no Nodes internally held by this instance."
  },
  "$xmltool.iterator(): Iterator<XmlTool>": {
    "prefix": [
      "$",
      "xmltool.iterator",
      "$xmltool.iterator"
    ],
    "body": [
      "\\$xmltool.iterator()"
    ],
    "description": "Returns an Iterator that returns new XmlTool instances for each Node held internally by this instance."
  },
  "$xmltool.node(): Node": {
    "prefix": [
      "$",
      "xmltool.node",
      "$xmltool.node"
    ],
    "body": [
      "\\$xmltool.node()"
    ],
    "description": "Returns the first/sole Node from this instance's internal Node list, if any."
  },
  "$xmltool.parents(): XmlTool": {
    "prefix": [
      "$",
      "xmltool.parents",
      "$xmltool.parents"
    ],
    "body": [
      "\\$xmltool.parents()"
    ],
    "description": "Returns a new XmlTool instance that wraps the parent Elements of each of the Nodes being wrapped by this instance."
  },
  "$xmltool.parse(Object o | String xml): XmlTool": {
    "prefix": [
      "$",
      "xmltool.parse",
      "$xmltool.parse"
    ],
    "body": [
      "\\$xmltool.parse(${1:o|xml})"
    ],
    "description": "This accepts XML in form, or parses the given XML string and uses the resulting Document as the root Node.."
  },
  "$xmltool.read(Object o): XmlTool": {
    "prefix": [
      "$",
      "xmltool.read",
      "$xmltool.read"
    ],
    "body": [
      "\\$xmltool.read(${1:o})"
    ],
    "description": "If safe mode is explicitly turned off for this tool, then this will accept either a URL or the string representation thereof."
  },
  "$xmltool.read(String file): protected void": {
    "prefix": [
      "$",
      "xmltool.read",
      "$xmltool.read"
    ],
    "body": [
      "\\$xmltool.read(${1:file})"
    ],
    "description": "Creates a URL from the string and passes it to read(URL)."
  },
  "$xmltool.read(URL url): protected void": {
    "prefix": [
      "$",
      "xmltool.read",
      "$xmltool.read"
    ],
    "body": [
      "\\$xmltool.read(${1:url})"
    ],
    "description": "Reads, parses and creates a Document from the given URL and uses it as the root Node for this instance."
  },
  "$xmltool.setRoot(Node node): protected void": {
    "prefix": [
      "$",
      "xmltool.setRoot",
      "$xmltool.setRoot"
    ],
    "body": [
      "\\$xmltool.setRoot(${1:node})"
    ],
    "description": "Sets a singular root Node for this instance."
  },
  "$xmltool.setTTL(long ttl_time): static void": {
    "prefix": [
      "$",
      "xmltool.setTTL",
      "$xmltool.setTTL"
    ],
    "body": [
      "\\$xmltool.setTTL(${1:ttl_time})"
    ],
    "description": "Set the cache Time To Live"
  },
  "$xmltool.size(): int": {
    "prefix": [
      "$",
      "xmltool.size",
      "$xmltool.size"
    ],
    "body": [
      "\\$xmltool.size()"
    ],
    "description": "Returns the number of Nodes internally held by this instance."
  },
  "$xslttool.canUserEvalute(): protected boolean": {
    "prefix": [
      "$",
      "xslttool.canUserEvalute()",
      "$xslttool.canUserEvalute()"
    ],
    "body": [
      "\\$xslttool.canUserEvalute()"
    ],
    "description": ""
  },
  "$xslttool.transform(String XMLPath, String XSLPath, int ttl): String": {
    "prefix": [
      "$",
      "xslttool.transform",
      "$xslttool.transform"
    ],
    "body": [
      "\\$xslttool.transform(${1:XMLPath}, ${2:XSLPath}, ${3:ttl})"
    ],
    "description": ""
  },
  "$xslttool.XSLTTransform(String XMLPath, String XSLPath, long ttl)": {
    "prefix": [
      "$",
      "xslttool.XSLTTransform",
      "$xslttool.XSLTTransform"
    ],
    "body": [
      "\\$xslttool.XSLTTransform(${1:XMLPath}, ${2:XSLPath}, ${3:ttl})"
    ],
    "description": "Transform the XML into the string according to the specification of the xsl file"
  },
  "$xsstool.escape(String value): String": {
    "prefix": [
      "$",
      "xsstool.escape",
      "$xsstool.escape"
    ],
    "body": [
      "\\$xsstool.escape(${1:value})"
    ],
    "description": "This method will HTML escape/sanitize a String for display to a users browser - convieniece method"
  },
  "$xsstool.escapeHTMLAttrib(String value): String": {
    "prefix": [
      "$",
      "xsstool.escapeHTMLAttrib",
      "$xsstool.escapeHTMLAttrib"
    ],
    "body": [
      "\\$xsstool.escapeHTMLAttrib(${1:value})"
    ],
    "description": "This method will HTML escape/sanitize a String for display to a users browser"
  },
  "$xsstool.hasXss(String value): boolean": {
    "prefix": [
      "$",
      "xsstool.hasXss",
      "$xsstool.hasXss"
    ],
    "body": [
      "\\$xsstool.hasXss(${1:value})"
    ],
    "description": "This method will test if a sting has XSS in it."
  },
  "$xsstool.strip(String string): String": {
    "prefix": [
      "$",
      "xsstool.strip",
      "$xsstool.strip"
    ],
    "body": [
      "\\$xsstool.strip(${1:string})"
    ],
    "description": "This method will take a String and remove any XSS code found in it"
  },
  "$xsstool.unEscape(String value): String": {
    "prefix": [
      "$",
      "xsstool.unEscape",
      "$xsstool.unEscape"
    ],
    "body": [
      "\\$xsstool.unEscape(${1:value})"
    ],
    "description": "This method will unescape sanitized HTML escape/sanitize a String for display to a users browser"
  },
  "$navtool.getNav(): NavResult": {
    "prefix": [
      "$",
      "navtool.getNav()",
      "$navtool.getNav()"
    ],
    "body": [
      "\\$navtool.getNav()"
    ],
    "description": ""
  },
  "$navtool.getNav(Host host, String path): protected NavResult": {
    "prefix": [
      "$",
      "navtool.getNav",
      "$navtool.getNav"
    ],
    "body": [
      "\\$navtool.getNav(${1:host}, ${2:path})"
    ],
    "description": ""
  },
  "$navtool.getNav(Host host, String path, long languageId, User systemUserParam): protected NavResultHydrated": {
    "prefix": [
      "$",
      "navtool.getNav",
      "$navtool.getNav"
    ],
    "body": [
      "\\$navtool.getNav(${1:host}, ${2:path}, ${2:languageId}, ${3:systemUserParam})"
    ],
    "description": ""
  },
  "$navtool.getNav(int level): NavResult": {
    "prefix": [
      "$",
      "navtool.getNav",
      "$navtool.getNav"
    ],
    "body": [
      "\\$navtool.getNav(${1:level})"
    ],
    "description": "Pass the level of the nav you wish to retrieve, based on the current path, level 0 being the root"
  },
  "$navtool.getNav(String path): NavResult": {
    "prefix": [
      "$",
      "navtool.getNav",
      "$navtool.getNav"
    ],
    "body": [
      "\\$navtool.getNav(${1:path})"
    ],
    "description": ""
  },
  "$navtool.getNav(String path, long languageId): NavResult": {
    "prefix": [
      "$",
      "navtool.getNav",
      "$navtool.getNav"
    ],
    "body": [
      "\\$navtool.getNav(${1:path}, ${2:languageId})"
    ],
    "description": ""
  },
  "$import.read(String url): String": {
    "prefix": [
      "$",
      "import.read",
      "$import.read"
    ],
    "body": [
      "\\$import.read(${1:url})"
    ],
    "description": ""
  },
  "$import.read(String url, int timeout): String": {
    "prefix": [
      "$",
      "import.read",
      "$import.read"
    ],
    "body": [
      "\\$import.read(${1:url}, ${2:timeout})"
    ],
    "description": "Returns the supplied URL rendered as a String."
  },
  "$import.read(String url, int timeout, Map<String,String> headers): String": {
    "prefix": [
      "$",
      "",
      "$"
    ],
    "body": [
      "\\$import.read(${1:url}, ${2:timeout}, ${3:headers})"
    ],
    "description": "Returns the supplied URL rendered as a String."
  },
  "$context.attachEventCartridge(EventCartridge ec): EventCartridge": {
    "prefix": [
      "$",
      "context.attachEventCartridge",
      "$context.attachEventCartridge"
    ],
    "body": [
      "\\$context.attachEventCartridge(${1:ec})"
    ],
    "description": ""
  },
  "$context.getAttribute(String key): Object": {
    "prefix": [
      "$",
      "context.getAttribute",
      "$context.getAttribute"
    ],
    "body": [
      "\\$context.getAttribute(String key)"
    ],
    "description": "Searches for the named attribute in request, session (if valid), and application scope(s) in order and returns the value associated or null."
  },
  "$context.getCurrentMacroCallDepth(): int": {
    "prefix": [
      "$",
      "context.getCurrentMacroCallDepth",
      "$context.getCurrentMacroCallDepth"
    ],
    "body": [
      "\\$context.getCurrentMacroCallDepth()"
    ],
    "description": "get the current macro call depth"
  },
  "$context.getCurrentMacroName(): String": {
    "prefix": [
      "$",
      "context.getCurrentMacroName",
      "$context.getCurrentMacroName"
    ],
    "body": [
      "\\$context.getCurrentMacroName()"
    ],
    "description": "get the current macro name"
  },
  "$context.getCurrentResource(): Resource": {
    "prefix": [
      "$",
      "context.getCurrentResource",
      "$context.getCurrentResource"
    ],
    "body": [
      "\\$context.getCurrentResource()"
    ],
    "description": "temporary fix to enable #include() to figure out current encoding."
  },
  "$context.getCurrentTemplateName(): String": {
    "prefix": [
      "$",
      "context.getCurrentTemplateName",
      "$context.getCurrentTemplateName"
    ],
    "body": [
      "\\$context.getCurrentTemplateName()"
    ],
    "description": "get the current template name"
  },
  "$context.getEventCartridge(): EventCartridge": {
    "prefix": [
      "$",
      "context.getEventCartridge",
      "$context.getEventCartridge"
    ],
    "body": [
      "\\$context.getEventCartridge()"
    ],
    "description": ""
  },
  "$context.getMacroLibraries(): List": {
    "prefix": [
      "$",
      "context.getMacroLibraries",
      "$context.getMacroLibraries"
    ],
    "body": [
      "\\$context.getMacroLibraries()"
    ],
    "description": "Get the macro library list for the current template."
  },
  "$context.getMacroNameStack(): Object[]": {
    "prefix": [
      "$",
      "context.getMacroNameStack",
      "$context.getMacroNameStack"
    ],
    "body": [
      "\\$context.getMacroNameStack()"
    ],
    "description": "get the current macro name stack"
  },
  "$context.getRequest(): HttpServletRequest": {
    "prefix": [
      "$",
      "context.getRequest",
      "$context.getRequest"
    ],
    "body": [
      "\\$context.getRequest()"
    ],
    "description": "Returns the current servlet request."
  },
  "$context.getResponse(): HttpServletResponse": {
    "prefix": [
      "$",
      "context.getResponse",
      "$context.getResponse"
    ],
    "body": [
      "\\$context.getResponse()"
    ],
    "description": "Returns the current servlet response."
  },
  "$context.getServletContext(): ServletContext": {
    "prefix": [
      "$",
      "context.getServletContext",
      "$context.getServletContext"
    ],
    "body": [
      "\\$context.getServletContext()"
    ],
    "description": "Returns the servlet context."
  },
  "$context.getTemplateNameStack(): Object[]": {
    "prefix": [
      "$",
      "context.getTemplateNameStack",
      "$context.getTemplateNameStack"
    ],
    "body": [
      "\\$context.getTemplateNameStack()"
    ],
    "description": "get the current template name stack"
  },
  "$context.getVelocityContext(): Context": {
    "prefix": [
      "$",
      "context.getVelocityContext",
      "$context.getVelocityContext"
    ],
    "body": [
      "\\$context.getVelocityContext()"
    ],
    "description": "Returns a reference to the Velocity context (this object)."
  },
  "$context.getVelocityEngine(): VelocityEngine": {
    "prefix": [
      "$",
      "context.getVelocityEngine",
      "$context.getVelocityEngine"
    ],
    "body": [
      "\\$context.getVelocityEngine()"
    ],
    "description": "Returns a reference to the VelocityEngine."
  },
  "$context.icacheGet(Object key): IntrospectionCacheData": {
    "prefix": [
      "$",
      "context.icacheGet",
      "$context.icacheGet"
    ],
    "body": [
      "\\$context.icacheGet(${1:key})"
    ],
    "description": "returns an IntrospectionCache Data (@see IntrospectionCacheData) object if exists for the key"
  },
  "$context.icachePut(Object key, IntrospectionCacheData o): void": {
    "prefix": [
      "$",
      "context.icachePut",
      "$context.icachePut"
    ],
    "body": [
      "\\$context.icachePut(${1:key}, ${2:o})"
    ],
    "description": "places an IntrospectionCache Data (@see IntrospectionCacheData) element in the cache for specified key"
  },
  "$context.internalGet(String key): Object": {
    "prefix": [
      "$",
      "context.internalGet",
      "$context.internalGet"
    ],
    "body": [
      "\\$context.internalGet(${1:key})"
    ],
    "description": "Looks up and returns the object with the specified key."
  },
  "$context.popCurrentMacroName(): void": {
    "prefix": [
      "$",
      "context.popCurrentMacroName",
      "$context.popCurrentMacroName"
    ],
    "body": [
      "\\$context.popCurrentMacroName()"
    ],
    "description": "remove the current macro name from stack"
  },
  "$context.popCurrentTemplateName(): void": {
    "prefix": [
      "$",
      "context.popCurrentTemplateName",
      "$context.popCurrentTemplateName"
    ],
    "body": [
      "\\$context.popCurrentTemplateName()"
    ],
    "description": "remove the current template name from stack"
  },
  "$context.pushCurrentMacroName(String s): void": {
    "prefix": [
      "$",
      "context.pushCurrentMacroName",
      "$context.pushCurrentMacroName"
    ],
    "body": [
      "\\$context.pushCurrentMacroName(${1:s})"
    ],
    "description": "set the current macro name on top of stack"
  },
  "$context.pushCurrentTemplateName(String s): void": {
    "prefix": [
      "$",
      "context.pushCurrentTemplateName",
      "$context.pushCurrentTemplateName"
    ],
    "body": [
      "\\$context.pushCurrentTemplateName(${1:s})"
    ],
    "description": "set the current template name on top of stack"
  },
  "$context.setCurrentResource(Resource r): void": {
    "prefix": [
      "$",
      "context.setCurrentResource",
      "$context.setCurrentResource"
    ],
    "body": [
      "\\$context.setCurrentResource(${1:r})"
    ],
    "description": ""
  },
  "$context.setMacroLibraries(List macroLibraries): void": {
    "prefix": [
      "$",
      "context.setMacroLibraries",
      "$context.setMacroLibraries"
    ],
    "body": [
      "\\$context.setMacroLibraries(${1:macroLibraries})"
    ],
    "description": "Set the macro library list for the current template."
  },
  "$context.setToolbox(Map box): void": {
    "prefix": [
      "$",
      "context.setToolbox",
      "$context.setToolbox"
    ],
    "body": [
      "\\$context.setToolbox(${1:box})"
    ],
    "description": "Sets the toolbox of view tools."
  },
  "$context.setToolbox(ToolboxContext box): void": {
    "prefix": [
      "$",
      "context.setToolbox",
      "$context.setToolbox"
    ],
    "body": [
      "\\$context.setToolbox(${1:box})"
    ],
    "description": "Deprecated. \nUse setToolbox(Map) instead."
  },
  "$cookietool.add(String name, String value): void": {
    "prefix": [
      "$",
      "cookietool.add",
      "$cookietool.add"
    ],
    "body": [
      "\\$cookietool.add(${1:name}, ${2:value})"
    ],
    "description": "Adds a new Cookie with the specified name and value to the HttpServletResponse."
  },
  "$cookietool.add(String name, String value, int maxAge): void": {
    "prefix": [
      "$",
      "cookietool.add",
      "$cookietool.add"
    ],
    "body": [
      "\\$cookietool.add(${1:name}, ${2:value}, ${3:maxAge})"
    ],
    "description": "Convenience method to add a new Cookie to the response and set an expiry time for it."
  },
  "$cookietool.get(String name): Cookie": {
    "prefix": [
      "$",
      "cookietool.get",
      "$cookietool.get"
    ],
    "body": [
      "\\$cookietool.get(${1:name})"
    ],
    "description": "Returns the Cookie with the specified name, if it exists."
  },
  "$cookietool.getAll(): Cookie[]": {
    "prefix": [
      "$",
      "cookietool.getAll",
      "$cookietool.getAll"
    ],
    "body": [
      "\\$cookietool.getAll()"
    ],
    "description": "Expose array of Cookies for this request to the template."
  },
  "$calendar.find(String id): Event": {
    "prefix": [
      "$",
      "calendar.find",
      "$calendar.find"
    ],
    "body": [
      "\\$calendar.find(${1:id})"
    ],
    "description": ""
  },
  "$calendar.findEvents(String hostId, Date fromDate, Date toDate, String tag, String keyword, String categoryInode, String sortBy, int offset, int limit): List<Event>": {
    "prefix": [
      "$",
      "calendar.findEvents",
      "$calendar.findEvents"
    ],
    "body": [
      "\\$calendar.findEvents(${1:hostId}, ${2:fromDate}, ${3:toDate}, ${4:tag}, ${5:keyword}, ${6:categoryInode}, ${7:sortBy}, ${8:offset}, ${9:limit})"
    ],
    "description": ""
  },
  "$calendar.findRelatedEvents(String parentEvent, Date fromDate, Date toDate): List<Event>": {
    "prefix": [
      "$",
      "calendar.findRelatedEvents",
      "$calendar.findRelatedEvents"
    ],
    "body": [
      "\\$calendar.findRelatedEvents(${1:parentEvent}, ${2:fromDate}, ${3:toDate})"
    ],
    "description": ""
  },
  "$dotcontent.count(String query): long": {
    "prefix": [
      "$",
      "dotcontent.count",
      "$dotcontent.count"
    ],
    "body": [
      "\\$dotcontent.count(${1:query})"
    ],
    "description": "Use this method to return the number of contents which match a particular query."
  },
  "$dotcontent.find(String inodeOrIdentifier): ContentMap": {
    "prefix": [
      "$",
      "dotcontent.find",
      "$dotcontent.find"
    ],
    "body": [
      "\\$dotcontent.find(${1:inodeOrIdentifier})"
    ],
    "description": "Will pull a single piece of content for you based on the inode or identifier."
  },
  "$dotcontent.getMostViewedContent(String structureVariableName, String startDate, String endDate): List<Map<String,String>>": {
    "prefix": [
      "$",
      "dotcontent.getMostViewedContent",
      "$dotcontent.getMostViewedContent"
    ],
    "body": [
      "\\$dotcontent.getMostViewedContent(${1:structureVariableName}, ${2:startDate}, ${3:endDate})"
    ],
    "description": "Gets the top viewed contents identifiers and numberOfViews for a particular structure for a specified date interval"
  },
  "$dotcontent.load(String inodeOrIdentifier): LazyLoaderContentMap": {
    "prefix": [
      "$",
      "dotcontent.load",
      "$dotcontent.load"
    ],
    "body": [
      "\\$dotcontent.load(${1:inodeOrIdentifier})"
    ],
    "description": "Will load a lazy version of the content map based on the inode or identifier."
  },
  "$dotcontent.pull(String query, int offset, int limit, String sort): PaginatedArrayList<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pull",
      "$dotcontent.pull"
    ],
    "body": [
      "\\$dotcontent.pull(${1:query}, ${2:offset}, ${3:limit}, ${4:sort})"
    ],
    "description": ""
  },
  "$dotcontent.pull(String query, int limit | String limit, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pull",
      "$dotcontent.pull"
    ],
    "body": [
      "\\$dotcontent.pull(${1:query}, ${2:limit}, ${3:sort})"
    ],
    "description": "Will return a ContentMap object which can be used on dotCMS front end."
  },
  "$dotcontent.pullPagenated(String query, int limit, int offset, String sort): PaginatedArrayList<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPagenated",
      "$dotcontent.pullPagenated"
    ],
    "body": [
      "\\$dotcontent.pullPagenated(${1:query}, ${2:limit}, ${3:offset}, ${4:sort})"
    ],
    "description": "Will return a ContentMap object which can be used on dotCMS front end."
  },
  "$dotcontent.pullPerPage(String query, int currentPage, int contentsPerPage, String sort): PaginatedContentList<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPerPage",
      "$dotcontent.pullPerPage"
    ],
    "body": [
      "\\$dotcontent.pullPerPage(${1:query}, ${2:currentPage}, ${3:contentsPerPage}, ${4:sort})"
    ],
    "description": "Works just similar to the pullPagenated."
  },
  "$dotcontent.pullPersonalized(String query, int limit): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPersonalized",
      "$dotcontent.pullPersonalized"
    ],
    "body": [
      "\\$dotcontent.pullPersonalized(${1:query}, ${2:limit})"
    ],
    "description": ""
  },
  "$dotcontent.pullPersonalized(String query, int limit, int offset, String secondarySort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPersonalized",
      "$dotcontent.pullPersonalized"
    ],
    "body": [
      "\\$dotcontent.pullPersonalized(${1:query}, ${2:limit}, ${3:offset}, ${4:secondarySort})"
    ],
    "description": ""
  },
  "$dotcontent.pullPersonalized(String query, int limit, String secondarySort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPersonalized",
      "$dotcontent.pullPersonalized"
    ],
    "body": [
      "\\$dotcontent.pullPersonalized(${1:query}, ${2:limit}, ${3:secondarySort})"
    ],
    "description": ""
  },
  "$dotcontent.pullPersonalized(String query, String limitStr): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPersonalized",
      "$dotcontent.pullPersonalized"
    ],
    "body": [
      "\\$dotcontent.pullPersonalized(${1:query}, ${2:limitStr})"
    ],
    "description": ""
  },
  "$dotcontent.pullPersonalized(String query, String limitStr, String secondarySort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullPersonalized",
      "$dotcontent.pullPersonalized"
    ],
    "body": [
      "\\$dotcontent.pullPersonalized(${1:query}, ${2:limitStr}, ${3:secondarySort})"
    ],
    "description": ""
  },
  "$dotcontent.pullRelated(String relationshipName, String contentletIdentifier, boolean pullParents, int limit): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelated",
      "$dotcontent.pullRelated"
    ],
    "body": [
      "\\$dotcontent.pullRelated(${1:relationshipName}, ${2:contentletIdentifier}, ${3:pullParents}, ${4:limit})"
    ],
    "description": "Will return a ContentMap object which can be used on dotCMS front end."
  },
  "$dotcontent.pullRelated(String relationshipName, String contentletIdentifier, boolean pullParents, int limit, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelated",
      "$dotcontent.pullRelated"
    ],
    "body": [
      "\\$dotcontent.pullRelated(${1:relationshipName}, ${2:contentletIdentifier}, ${3:pullParents}, ${4:limit}, ${5:sort})"
    ],
    "description": "Will return a ContentMap object which can be used on dotCMS front end."
  },
  "$dotcontent.pullRelated(String relationshipName, String contentletIdentifier, String condition, boolean pullParents, int limit, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelated",
      "$dotcontent.pullRelated"
    ],
    "body": [
      "\\$dotcontent.pullRelated(${1:relationshipName}, ${2:contentletIdentifier}, ${3:condition}, ${4:pullParents}, ${5:limit}, ${6:sort})"
    ],
    "description": "Will return a ContentMap object which can be used on dotCMS front end."
  },
  "$dotcontent.pullRelatedField(String contentletIdentifier, String fieldVariable, String condition): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelatedField",
      "$dotcontent.pullRelatedField"
    ],
    "body": [
      "\\$dotcontent.pullRelatedField(${1:contentletIdentifier}, ${2:fieldVariable}, ${3:condition})"
    ],
    "description": "Returns a list of related content given a RelationshipField and additional filtering criteria"
  },
  "$dotcontent.pullRelatedField(String contentletIdentifier, String fieldVariable, String condition, int limit, int offset, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelatedField",
      "$dotcontent.pullRelatedField"
    ],
    "body": [
      "\\$dotcontent.pullRelatedField(${1:contentletIdentifier}, ${2:fieldVariable}, ${3:condition}, ${4:limit}, ${5:offset}, ${6:sort})"
    ],
    "description": "Returns a list of related content given a RelationshipField and additional filtering criteria"
  },
  "$dotcontent.pullRelatedField(String contentletIdentifier, String fieldVariable, String condition, int limit, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelatedField",
      "$dotcontent.pullRelatedField"
    ],
    "body": [
      "\\$dotcontent.pullRelatedField(${1:contentletIdentifier}, ${2:fieldVariable}, ${3:condition}, ${4:limit}, ${5:sort})"
    ],
    "description": "Returns a list of related content given a RelationshipField and additional filtering criteria"
  },
  "$dotcontent.pullRelatedField(String contentletIdentifier, String fieldVariable, String condition, String sort): List<ContentMap>": {
    "prefix": [
      "$",
      "dotcontent.pullRelatedField",
      "$dotcontent.pullRelatedField"
    ],
    "body": [
      "\\$dotcontent.pullRelatedField(${1:contentletIdentifier}, ${2:fieldVariable}, ${3:condition}, ${4:sort})"
    ],
    "description": "Returns a list of related content given a RelationshipField and additional filtering criteria"
  },
  "$dotcontent.query(String query, int limit): List<ContentletSearch>": {
    "prefix": [
      "$",
      "dotcontent.query",
      "$dotcontent.query"
    ],
    "body": [
      "\\$dotcontent.query(${1:query}, ${2:limit})"
    ],
    "description": "Will return a ContentSearch object which can be used on dotCMS front end."
  },
  "$dotcontent.query(String query, int limit, String sort): List<ContentletSearch>": {
    "prefix": [
      "$",
      "dotcontent.query",
      "$dotcontent.query"
    ],
    "body": [
      "\\$dotcontent.query(${1:query}, ${2:limit}, ${3:sort})"
    ],
    "description": "Will return a ContentSearch object which can be used on dotCMS front end."
  },
  "$sitesearch.getAggregations(String indexName, String query): Map<String,Aggregation>": {
    "prefix": [
      "$",
      "sitesearch.getAggregations",
      "$sitesearch.getAggregations"
    ],
    "body": [
      "\\$sitesearch.getAggregations(${1:indexName}, ${2:query})"
    ],
    "description": "Returns the aggregations for a given query"
  },
  "$sitesearch.listSearchIndicies(): List<String>": {
    "prefix": [
      "$",
      "sitesearch.listSearchIndicies",
      "$sitesearch.listSearchIndicies"
    ],
    "body": [
      "\\$sitesearch.listSearchIndicies()"
    ],
    "description": "This method will return a list of the site search index names"
  },
  "$sitesearch.search(String query, int start, int rows): SiteSearchResults": {
    "prefix": [
      "$",
      "sitesearch.search",
      "$sitesearch.search"
    ],
    "body": [
      "\\$sitesearch.search(${1:query}, ${2:start}, ${3:rows})"
    ],
    "description": "Performs a search on the default site search index using the current host in the request"
  },
  "$sitesearch.search(String indexAlias, String query, int start, int rows)": {
    "prefix": [
      "$",
      "sitesearch.search",
      "$sitesearch.search"
    ],
    "body": [
      "\\$sitesearch.search(${1:indexAlias}, ${2:query}, ${3:start}, ${4:rows})"
    ],
    "description": "Performs a search on the site search index using the current host in the request"
  },
  "$UtilMethods.addDate(Date date, int amount, int field): static Date": {
    "prefix": [
      "$",
      "UtilMethods.addDate",
      "$UtilMethods.addDate"
    ],
    "body": [
      "\\$UtilMethods.addDate(${1:date}, ${2:amount}, ${3:field})"
    ],
    "description": ""
  },
  "$UtilMethods.addDays(Date date, int amount): static Date": {
    "prefix": [
      "$",
      "UtilMethods.addDays",
      "$UtilMethods.addDays"
    ],
    "body": [
      "\\$UtilMethods.addDays(${1:date}, ${2:amount})"
    ],
    "description": ""
  },
  "$UtilMethods.arrayToArrayList(Object[] oldArray): static ArrayList": {
    "prefix": [
      "$",
      "UtilMethods.arrayToArrayList",
      "$UtilMethods.arrayToArrayList"
    ],
    "body": [
      "\\$UtilMethods.arrayToArrayList(${1:oldArray})"
    ],
    "description": ""
  },
  "$UtilMethods.arrayToString(ArrayList array): static String": {
    "prefix": [
      "$",
      "UtilMethods.arrayToString",
      "$UtilMethods.arrayToString"
    ],
    "body": [
      "\\$UtilMethods.arrayToString(${1:array})"
    ],
    "description": ""
  },
  "$UtilMethods.arrayToString(Enumeration array): static String": {
    "prefix": [
      "$",
      "UtilMethods.arrayToString",
      "$UtilMethods.arrayToString"
    ],
    "body": [
      "\\$UtilMethods.arrayToString(${1:array})"
    ],
    "description": "formats an enumeration as \" thingy1, thingy, edu.bju.app.entity@123456 \""
  },
  "$UtilMethods.arrayToString(long[] array): static String": {
    "prefix": [
      "$",
      "UtilMethods.arrayToString",
      "$UtilMethods.arrayToString"
    ],
    "body": [
      "\\$UtilMethods.arrayToString(${1:array})"
    ],
    "description": "formats an array { 1, 2, 3 } as \" 1 2 3 \""
  },
  "$UtilMethods.arrayToString(Object[] array): static String": {
    "prefix": [
      "$",
      "UtilMethods.arrayToString",
      "$UtilMethods.arrayToString"
    ],
    "body": [
      "\\$UtilMethods.arrayToString(${1:array})"
    ],
    "description": "formats an array { 1, 2, 3 } as \" thingy1, thingy, edu.bju.app.entity@123456 \""
  },
  "$UtilMethods.capitalize(Object s | String s): static String": {
    "prefix": [
      "$",
      "UtilMethods.capitalize",
      "$UtilMethods.capitalize"
    ],
    "body": [
      "\\$UtilMethods.capitalize(${1:s})"
    ],
    "description": ""
  },
  "$UtilMethods.cleanFileSystemPathURI(String path): static String": {
    "prefix": [
      "$",
      "UtilMethods.cleanFileSystemPathURI",
      "$UtilMethods.cleanFileSystemPathURI"
    ],
    "body": [
      "\\$UtilMethods.cleanFileSystemPathURI(${1:path})"
    ],
    "description": ""
  },
  "$UtilMethods.closeDbSilently(): static void": {
    "prefix": [
      "$",
      "UtilMethods.closeDbSilently",
      "$UtilMethods.closeDbSilently"
    ],
    "body": [
      "\\$UtilMethods.closeDbSilently()"
    ],
    "description": ""
  },
  "$UtilMethods.compare(Comparable first, Comparable second): static int": {
    "prefix": [
      "$",
      "UtilMethods.compare",
      "$UtilMethods.compare"
    ],
    "body": [
      "\\$UtilMethods.compare(${1:first}, ${2:second})"
    ],
    "description": ""
  },
  "$UtilMethods.compare(int first | long first, int second | long second): static int": {
    "prefix": [
      "$",
      "UtilMethods.compare",
      "$UtilMethods.compare"
    ],
    "body": [
      "\\$UtilMethods.compare(${1:first}, ${2:second})"
    ],
    "description": ""
  },
  "$UtilMethods.compareDates(Date date1, Date date2): static int": {
    "prefix": [
      "$",
      "UtilMethods.compareDates",
      "$UtilMethods.compareDates"
    ],
    "body": [
      "\\$UtilMethods.compareDates(${1:date1}, ${2:date2})"
    ],
    "description": "Compares if two dates (yyyy/MM/dd)) have equals values"
  },
  "$UtilMethods.compareDates(String stringDate1, String stringDate2): static int": {
    "prefix": [
      "$",
      "UtilMethods.compareDates",
      "$UtilMethods.compareDates"
    ],
    "body": [
      "\\$UtilMethods.compareDates(${1:stringDate1}, ${2:stringDate2})"
    ],
    "description": "This method takes two strings as input and tries to parse and format them to the correct format needed by compareDates(Date,Date), this way we are not bound to use Date data types only."
  },
  "$UtilMethods.compareIgnoreCase(String first, String second): static int": {
    "prefix": [
      "$",
      "UtilMethods.compareIgnoreCase",
      "$UtilMethods.compareIgnoreCase"
    ],
    "body": [
      "\\$UtilMethods.compareIgnoreCase(${1:first}, ${2:second})"
    ],
    "description": ""
  },
  "$UtilMethods.compareVersions(String v1, String v2): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.compareVersions",
      "$UtilMethods.compareVersions"
    ],
    "body": [
      "\\$UtilMethods.compareVersions(${1:v1}, ${2:v2})"
    ],
    "description": ""
  },
  "$UtilMethods.concat(String string1, String string2): static String": {
    "prefix": [
      "$",
      "UtilMethods.concat",
      "$UtilMethods.concat"
    ],
    "body": [
      "\\$UtilMethods.concat(${1:string1}, ${2:string2})"
    ],
    "description": ""
  },
  "$UtilMethods.concatenate(Object... objects): static String": {
    "prefix": [
      "$",
      "UtilMethods.concatenate",
      "$UtilMethods.concatenate"
    ],
    "body": [
      "\\$UtilMethods.concatenate(${1:objects})"
    ],
    "description": "An optimized routine for concatenating String objects together."
  },
  "$UtilMethods.concatenateWithNulls(Object... objects): static String": {
    "prefix": [
      "$",
      "UtilMethods.concatenateWithNulls",
      "$UtilMethods.concatenateWithNulls"
    ],
    "body": [
      "\\$UtilMethods.concatenateWithNulls(${1:objects})"
    ],
    "description": "An optimized routine for concatenating String objects together."
  },
  "$UtilMethods.contains(String string1, String string2): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.contains",
      "$UtilMethods.contains"
    ],
    "body": [
      "\\$UtilMethods.contains(${1:string1}, ${2:string2})"
    ],
    "description": ""
  },
  "$UtilMethods.convertListToHashMap(List<E> arli, String methodToInvoke, Class T): static <T,E> HashMap<T,E>": {
    "prefix": [
      "$",
      "UtilMethods.convertListToHashMap",
      "$UtilMethods.convertListToHashMap"
    ],
    "body": [
      "\\$UtilMethods.convertListToHashMap(${1:arli}, ${2:methodToInvoke}, ${3:T})"
    ],
    "description": ""
  },
  "$UtilMethods.convertToFolderName(String st): static String": {
    "prefix": [
      "$",
      "UtilMethods.convertToFolderName",
      "$UtilMethods.convertToFolderName"
    ],
    "body": [
      "\\$UtilMethods.convertToFolderName(${1:st})"
    ],
    "description": ""
  },
  "$UtilMethods.convertToNumbers(String st): static String": {
    "prefix": [
      "$",
      "UtilMethods.convertToNumbers",
      "$UtilMethods.convertToNumbers"
    ],
    "body": [
      "\\$UtilMethods.convertToNumbers(${1:st})"
    ],
    "description": ""
  },
  "$UtilMethods.csvifyString(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.csvifyString",
      "$UtilMethods.csvifyString"
    ],
    "body": [
      "\\$UtilMethods.csvifyString(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToDayViewDate(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToDayViewDate",
      "$UtilMethods.dateToDayViewDate"
    ],
    "body": [
      "\\$UtilMethods.dateToDayViewDate(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToGoogleDate(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToGoogleDate",
      "$UtilMethods.dateToGoogleDate"
    ],
    "body": [
      "\\$UtilMethods.dateToGoogleDate(${1:x})"
    ],
    "description": "Takes a date and return a string with the date formatted as DD/MM/YYYY"
  },
  "$UtilMethods.dateToHTMLDate(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDate",
      "$UtilMethods.dateToHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDate(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDate(Date x, String format): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDate",
      "$UtilMethods.dateToHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDate(${1:x}, ${2:format})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDate(Date x, TimeZone tz): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDate",
      "$UtilMethods.dateToHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDate(${1:x}, ${2:tz})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDateRange(Date x, Date y): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDateRange",
      "$UtilMethods.dateToHTMLDateRange"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDateRange(${1:x}, ${2:y})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDateRange(Date x, Date y, TimeZone tz): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDateRange",
      "$UtilMethods.dateToHTMLDateRange"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDateRange(${1:x}, ${2:y}, ${3:tz})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDateTimeRange(Date x, Date y): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDateTimeRange",
      "$UtilMethods.dateToHTMLDateTimeRange"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDateTimeRange(${1:x}, ${2:y})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLDateTimeRange(Date x, Date y, TimeZone tz): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLDateTimeRange",
      "$UtilMethods.dateToHTMLDateTimeRange"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLDateTimeRange(${1:x}, ${3:y}, ${4:tz})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLTime(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLTime",
      "$UtilMethods.dateToHTMLTime"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLTime(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLTime(Date x, TimeZone tz): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLTime",
      "$UtilMethods.dateToHTMLTime"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLTime(${1:x}, ${2:tz})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToHTMLTimeRange(Date x, Date y): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToHTMLTimeRange",
      "$UtilMethods.dateToHTMLTimeRange"
    ],
    "body": [
      "\\$UtilMethods.dateToHTMLTimeRange(${1:x}, ${2:y})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToIntTime(Date x): static int": {
    "prefix": [
      "$",
      "UtilMethods.dateToIntTime",
      "$UtilMethods.dateToIntTime"
    ],
    "body": [
      "\\$UtilMethods.dateToIntTime(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToJDBC(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToJDBC",
      "$UtilMethods.dateToJDBC"
    ],
    "body": [
      "\\$UtilMethods.dateToJDBC(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToJSTime(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToJSTime",
      "$UtilMethods.dateToJSTime"
    ],
    "body": [
      "\\$UtilMethods.dateToJSTime(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToLongHTMLDateRange(Date x, Date y): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToLongHTMLDateRange",
      "$UtilMethods.dateToLongHTMLDateRange"
    ],
    "body": [
      "\\$UtilMethods.dateToLongHTMLDateRange(${1:x}, ${2:y})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToLongPrettyHTMLDate(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToLongPrettyHTMLDate",
      "$UtilMethods.dateToLongPrettyHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToLongPrettyHTMLDate(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToPrettyHTMLDate(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToPrettyHTMLDate",
      "$UtilMethods.dateToPrettyHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToPrettyHTMLDate(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToPrettyHTMLDate(Date x, TimeZone tz): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToPrettyHTMLDate",
      "$UtilMethods.dateToPrettyHTMLDate"
    ],
    "body": [
      "\\$UtilMethods.dateToPrettyHTMLDate(${1:x}, ${2:tz})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToPrettyHTMLDate2(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToPrettyHTMLDate2",
      "$UtilMethods.dateToPrettyHTMLDate2"
    ],
    "body": [
      "\\$UtilMethods.dateToPrettyHTMLDate2(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToShortJDBC(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToShortJDBC",
      "$UtilMethods.dateToShortJDBC"
    ],
    "body": [
      "\\$UtilMethods.dateToShortJDBC(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToShortJDBCForQuery(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToShortJDBCForQuery",
      "$UtilMethods.dateToShortJDBCForQuery"
    ],
    "body": [
      "\\$UtilMethods.dateToShortJDBCForQuery(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dateToYear(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dateToYear",
      "$UtilMethods.dateToYear"
    ],
    "body": [
      "\\$UtilMethods.dateToYear(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.dayify(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.dayify",
      "$UtilMethods.dayify"
    ],
    "body": [
      "\\$UtilMethods.dayify(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.decodeURL(String url): static String": {
    "prefix": [
      "$",
      "UtilMethods.decodeURL",
      "$UtilMethods.decodeURL"
    ],
    "body": [
      "\\$UtilMethods.decodeURL(${1:url})"
    ],
    "description": ""
  },
  "$UtilMethods.different(Object first, Object second): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.different",
      "$UtilMethods.different"
    ],
    "body": [
      "\\$UtilMethods.different(${1:first}, ${2:second})"
    ],
    "description": ""
  },
  "$UtilMethods.dollarFormat(float f): static String": {
    "prefix": [
      "$",
      "UtilMethods.dollarFormat",
      "$UtilMethods.dollarFormat"
    ],
    "body": [
      "\\$UtilMethods.dollarFormat({$f})"
    ],
    "description": ""
  },
  "$UtilMethods.doubleQuoteIt(String word): static String": {
    "prefix": [
      "$",
      "UtilMethods.doubleQuoteIt",
      "$UtilMethods.doubleQuoteIt"
    ],
    "body": [
      "\\$UtilMethods.doubleQuoteIt(${1:word})"
    ],
    "description": ""
  },
  "$UtilMethods.elapsedTimeToString(long milliseconds): static String": {
    "prefix": [
      "$",
      "UtilMethods.elapsedTimeToString",
      "$UtilMethods.elapsedTimeToString"
    ],
    "body": [
      "\\$UtilMethods.elapsedTimeToString(${1:milliseconds})"
    ],
    "description": ""
  },
  "$UtilMethods.encodeURIComponent(String uri): static String": {
    "prefix": [
      "$",
      "UtilMethods.encodeURIComponent",
      "$UtilMethods.encodeURIComponent"
    ],
    "body": [
      "\\$UtilMethods.encodeURIComponent(${1:uri})"
    ],
    "description": "It is mainly suitable for converting i18n URIs which will be used in html anchors/simple actions."
  },
  "$UtilMethods.encodeURL(String url): static String": {
    "prefix": [
      "$",
      "UtilMethods.encodeURL",
      "$UtilMethods.encodeURL"
    ],
    "body": [
      "\\$UtilMethods.encodeURL(${1:url})"
    ],
    "description": ""
  },
  "$UtilMethods.equal(Object first, Object second): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.equal",
      "$UtilMethods.equal"
    ],
    "body": [
      "\\$UtilMethods.equal(${1:first}, ${2:second})"
    ],
    "description": "\"null safe\" comparison of the two objects."
  },
  "$UtilMethods.escapeDoubleQuotes(String fixme): static String": {
    "prefix": [
      "$",
      "UtilMethods.escapeDoubleQuotes",
      "$UtilMethods.escapeDoubleQuotes"
    ],
    "body": [
      "\\$UtilMethods.escapeDoubleQuotes(${1:fixme})"
    ],
    "description": ""
  },
  "$UtilMethods.escapeHTMLSpecialChars(String valueSt): static String": {
    "prefix": [
      "$",
      "UtilMethods.escapeHTMLSpecialChars",
      "$UtilMethods.escapeHTMLSpecialChars"
    ],
    "body": [
      "\\$UtilMethods.escapeHTMLSpecialChars(${1:valueSt})"
    ],
    "description": ""
  },
  "$UtilMethods.escapeQuotes(String fixme): static String": {
    "prefix": [
      "$",
      "UtilMethods.escapeQuotes",
      "$UtilMethods.escapeQuotes"
    ],
    "body": [
      "\\$UtilMethods.escapeQuotes(${1:fixme})"
    ],
    "description": "Escape quotation marks so they work in javascript fields"
  },
  "$UtilMethods.escapeSingleQuotes(String fixme): static String": {
    "prefix": [
      "$",
      "UtilMethods.escapeSingleQuotes",
      "$UtilMethods.escapeSingleQuotes"
    ],
    "body": [
      "\\$UtilMethods.escapeSingleQuotes(${1:fixme})"
    ],
    "description": ""
  },
  "$UtilMethods.escapeUnicodeCharsForHTML(String valueSt): static String": {
    "prefix": [
      "$",
      "UtilMethods.escapeUnicodeCharsForHTML",
      "$UtilMethods.escapeUnicodeCharsForHTML"
    ],
    "body": [
      "\\$UtilMethods.escapeUnicodeCharsForHTML(${1:valueSt})"
    ],
    "description": ""
  },
  "$UtilMethods.espaceForVelocity(String text): static String": {
    "prefix": [
      "$",
      "UtilMethods.espaceForVelocity",
      "$UtilMethods.espaceForVelocity"
    ],
    "body": [
      "\\$UtilMethods.espaceForVelocity(${1:text})"
    ],
    "description": ""
  },
  "$UtilMethods.evaluateVelocity(String vtl, Context ctx): static String": {
    "prefix": [
      "$",
      "UtilMethods.evaluateVelocity",
      "$UtilMethods.evaluateVelocity"
    ],
    "body": [
      "\\$UtilMethods.evaluateVelocity(${1:vtl}, ${2:ctx})"
    ],
    "description": ""
  },
  "$UtilMethods.expandArray(long[] small, int numNewSlots): static long[]": {
    "prefix": [
      "$",
      "UtilMethods.expandArray",
      "$UtilMethods.expandArray"
    ],
    "body": [
      "\\$UtilMethods.expandArray(${1:small}, ${2:numNewSlots})"
    ],
    "description": ""
  },
  "$UtilMethods.expandArray(Object[] small, int numNewSlots): static Object[]": {
    "prefix": [
      "$",
      "UtilMethods.expandArray",
      "$UtilMethods.expandArray"
    ],
    "body": [
      "\\$UtilMethods.expandArray(${1:small}, ${2:numNewSlots})"
    ],
    "description": ""
  },
  "$UtilMethods.fixBreaks(String fixme): static String": {
    "prefix": [
      "$",
      "UtilMethods.fixBreaks",
      "$UtilMethods.fixBreaks"
    ],
    "body": [
      "\\$UtilMethods.fixBreaks(${1:fixme})"
    ],
    "description": ""
  },
  "$UtilMethods.formatId(long bjuId): static String": {
    "prefix": [
      "$",
      "UtilMethods.formatId",
      "$UtilMethods.formatId"
    ],
    "body": [
      "\\$UtilMethods.formatId(${1:bjuId})"
    ],
    "description": ""
  },
  "$UtilMethods.formatter(String original, String from, String to): static String": {
    "prefix": [
      "$",
      "UtilMethods.formatter",
      "$UtilMethods.formatter"
    ],
    "body": [
      "\\$UtilMethods.formatter(${1:original}, ${2:from}, ${3:to})"
    ],
    "description": ""
  },
  "$UtilMethods.formatterStringBuffer(StringBuffer original, String from, String to): static StringBuffer": {
    "prefix": [
      "$",
      "UtilMethods.formatterStringBuffer",
      "$UtilMethods.formatterStringBuffer"
    ],
    "body": [
      "\\$UtilMethods.formatterStringBuffer(${1:original}, ${2:from}, ${3:to})"
    ],
    "description": ""
  },
  "$UtilMethods.get(T instance, Supplier<T> supplier): static <T> T": {
    "prefix": [
      "$",
      "UtilMethods.get",
      "$UtilMethods.get"
    ],
    "body": [
      "\\$UtilMethods.get(${1:instance}, ${2:supplier})"
    ],
    "description": "If argument instance is set, returns it otherwise will invoke the supplier to get the default value"
  },
  "$UtilMethods.getActualYear(): static String": {
    "prefix": [
      "$",
      "UtilMethods.getActualYear",
      "$UtilMethods.getActualYear"
    ],
    "body": [
      "\\$UtilMethods.getActualYear()"
    ],
    "description": ""
  },
  "$UtilMethods.getCharsetConfiguration(): static String": {
    "prefix": [
      "$",
      "UtilMethods.getCharsetConfiguration",
      "$UtilMethods.getCharsetConfiguration"
    ],
    "body": [
      "\\$UtilMethods.getCharsetConfiguration()"
    ],
    "description": "Extracts the character set that has been configured by the admin, for this installation of dotCMS e.g."
  },
  "$UtilMethods.getClassName(Object source): static String": {
    "prefix": [
      "$",
      "UtilMethods.getClassName",
      "$UtilMethods.getClassName"
    ],
    "body": [
      "\\$UtilMethods.getClassName(${1:source})"
    ],
    "description": "returns the simple class name of the object (\"edu.bju.asq.action.LoginAction\" converts to \"LoginAction\") null input object returns UnknownClass"
  },
  "$UtilMethods.getCookie(Cookie[] cookies, String cookieName): static Cookie": {
    "prefix": [
      "$",
      "UtilMethods.getCookie",
      "$UtilMethods.getCookie"
    ],
    "body": [
      "\\$UtilMethods.getCookie(${1:cookies}, ${2:cookieName})"
    ],
    "description": ""
  },
  "$UtilMethods.getCookieValue(Cookie[] cookies, String cookieName): static String": {
    "prefix": [
      "$",
      "UtilMethods.getCookieValue",
      "$UtilMethods.getCookieValue"
    ],
    "body": [
      "\\$UtilMethods.getCookieValue(${1:cookies}, ${2:cookieName})"
    ],
    "description": ""
  },
  "$UtilMethods.getCurrentDate(): static Date": {
    "prefix": [
      "$",
      "UtilMethods.getCurrentDate",
      "$UtilMethods.getCurrentDate"
    ],
    "body": [
      "\\$UtilMethods.getCurrentDate()"
    ],
    "description": "Return is a date is equals or before the actual date"
  },
  "$UtilMethods.getDefaultCompany(): static Company": {
    "prefix": [
      "$",
      "UtilMethods.getDefaultCompany",
      "$UtilMethods.getDefaultCompany"
    ],
    "body": [
      "\\$UtilMethods.getDefaultCompany()"
    ],
    "description": ""
  },
  "$UtilMethods.getDotCMSStackTrace(): static String": {
    "prefix": [
      "$",
      "UtilMethods.getDotCMSStackTrace",
      "$UtilMethods.getDotCMSStackTrace"
    ],
    "body": [
      "\\$UtilMethods.getDotCMSStackTrace()"
    ],
    "description": ""
  },
  "$UtilMethods.getEventDateRange(Date date1, Date date2): static String": {
    "prefix": [
      "$",
      "UtilMethods.getEventDateRange",
      "$UtilMethods.getEventDateRange"
    ],
    "body": [
      "\\$UtilMethods.getEventDateRange(${1:date1}, ${2:date2})"
    ],
    "description": ""
  },
  "$UtilMethods.getFileExtension(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.getFileExtension",
      "$UtilMethods.getFileExtension"
    ],
    "body": [
      "\\$UtilMethods.getFileExtension(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.getFileName(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.getFileName",
      "$UtilMethods.getFileName"
    ],
    "body": [
      "\\$UtilMethods.getFileName(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.getInt(Integer integer, int fallThroughValue): static int": {
    "prefix": [
      "$",
      "UtilMethods.getInt",
      "$UtilMethods.getInt"
    ],
    "body": [
      "\\$UtilMethods.getInt(${1:integer}, ${2:fallThroughValue})"
    ],
    "description": ""
  },
  "$UtilMethods.getMonthFromNow(): static String": {
    "prefix": [
      "$",
      "UtilMethods.getMonthFromNow",
      "$UtilMethods.getMonthFromNow"
    ],
    "body": [
      "\\$UtilMethods.getMonthFromNow()"
    ],
    "description": ""
  },
  "$UtilMethods.getMonthName(int x): static String": {
    "prefix": [
      "$",
      "UtilMethods.getMonthName",
      "$UtilMethods.getMonthName"
    ],
    "body": [
      "\\$UtilMethods.getMonthName(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.getNextMonthName(int month): static String": {
    "prefix": [
      "$",
      "UtilMethods.getNextMonthName",
      "$UtilMethods.getNextMonthName"
    ],
    "body": [
      "\\$UtilMethods.getNextMonthName(${1:month})"
    ],
    "description": ""
  },
  "$UtilMethods.getNextMonthNumber(int month): static int": {
    "prefix": [
      "$",
      "UtilMethods.getNextMonthNumber",
      "$UtilMethods.getNextMonthNumber"
    ],
    "body": [
      "\\$UtilMethods.getNextMonthNumber(${1:month})"
    ],
    "description": ""
  },
  "$UtilMethods.getPageChannel(String uri): static String": {
    "prefix": [
      "$",
      "UtilMethods.getPageChannel",
      "$UtilMethods.getPageChannel"
    ],
    "body": [
      "\\$UtilMethods.getPageChannel(${1:uri})"
    ],
    "description": ""
  },
  "$UtilMethods.getParameterMap(HttpServletRequest req): static Map<String,Object>": {
    "prefix": [
      "$",
      "UtilMethods.getParameterMap",
      "$UtilMethods.getParameterMap"
    ],
    "body": [
      "\\$UtilMethods.getParameterMap(${1:req})"
    ],
    "description": ""
  },
  "$UtilMethods.getParentFolder(String childPath, Host host): static Folder": {
    "prefix": [
      "$",
      "UtilMethods.getParentFolder",
      "$UtilMethods.getParentFolder"
    ],
    "body": [
      "\\$UtilMethods.getParentFolder(${1:childPath}, ${2:host})"
    ],
    "description": ""
  },
  "$UtilMethods.getPaymentTypeName(int paymentType): static String": {
    "prefix": [
      "$",
      "UtilMethods.getPaymentTypeName",
      "$UtilMethods.getPaymentTypeName"
    ],
    "body": [
      "\\$UtilMethods.getPaymentTypeName(${1:paymentType})"
    ],
    "description": ""
  },
  "$UtilMethods.getPreviousMonthName(int x): static String": {
    "prefix": [
      "$",
      "UtilMethods.getPreviousMonthName",
      "$UtilMethods.getPreviousMonthName"
    ],
    "body": [
      "\\$UtilMethods.getPreviousMonthName(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.getPreviousMonthNumber(int month): static int": {
    "prefix": [
      "$",
      "UtilMethods.getPreviousMonthNumber",
      "$UtilMethods.getPreviousMonthNumber"
    ],
    "body": [
      "\\$UtilMethods.getPreviousMonthNumber(${1:month})"
    ],
    "description": ""
  },
  "$UtilMethods.getRandomNumber(int maxRange): static int": {
    "prefix": [
      "$",
      "UtilMethods.getRandomNumber",
      "$UtilMethods.getRandomNumber"
    ],
    "body": [
      "\\$UtilMethods.getRandomNumber(${1:maxRange})"
    ],
    "description": "Generate a ramdom number between 0 and maxRanger number"
  },
  "$UtilMethods.getShippingTypeName(int shippingType): static String": {
    "prefix": [
      "$",
      "UtilMethods.getShippingTypeName",
      "$UtilMethods.getShippingTypeName"
    ],
    "body": [
      "\\$UtilMethods.getShippingTypeName(int shippingType)"
    ],
    "description": ""
  },
  "$UtilMethods.getShortMonthName(int month): static String": {
    "prefix": [
      "$",
      "UtilMethods.getShortMonthName",
      "$UtilMethods.getShortMonthName"
    ],
    "body": [
      "\\$UtilMethods.getShortMonthName(${1:month})"
    ],
    "description": ""
  },
  "$UtilMethods.getShortMonthName(String month): static String": {
    "prefix": [
      "$",
      "UtilMethods.getShortMonthName",
      "$UtilMethods.getShortMonthName"
    ],
    "body": [
      "\\$UtilMethods.getShortMonthName(${1:month})"
    ],
    "description": ""
  },
  "$UtilMethods.getStackTrace(Throwable throwable): static String": {
    "prefix": [
      "$",
      "UtilMethods.getStackTrace",
      "$UtilMethods.getStackTrace"
    ],
    "body": [
      "\\$UtilMethods.getStackTrace(${1:throwable})"
    ],
    "description": "Get the stacktrace as String from an Exception."
  },
  "$UtilMethods.getStringFromReader(Reader rd): static String": {
    "prefix": [
      "$",
      "UtilMethods.getStringFromReader",
      "$UtilMethods.getStringFromReader"
    ],
    "body": [
      "\\$UtilMethods.getStringFromReader(${1:rd})"
    ],
    "description": ""
  },
  "$UtilMethods.getTemporaryDirPath(): static String": {
    "prefix": [
      "$",
      "UtilMethods.getTemporaryDirPath",
      "$UtilMethods.getTemporaryDirPath"
    ],
    "body": [
      "\\$UtilMethods.getTemporaryDirPath()"
    ],
    "description": ""
  },
  "$UtilMethods.getTimeList(int start, int duration): static List": {
    "prefix": [
      "$",
      "UtilMethods.getTimeList",
      "$UtilMethods.getTimeList"
    ],
    "body": [
      "\\$UtilMethods.getTimeList(${1:start}, ${2:duration})"
    ],
    "description": ""
  },
  "$UtilMethods.getURL(String URI): static StringBuffer": {
    "prefix": [
      "$",
      "UtilMethods.getURL",
      "$UtilMethods.getURL"
    ],
    "body": [
      "\\$UtilMethods.getURL(${1:URI})"
    ],
    "description": ""
  },
  "$UtilMethods.getUserEmail(User user): static String": {
    "prefix": [
      "$",
      "UtilMethods.getUserEmail",
      "$UtilMethods.getUserEmail"
    ],
    "body": [
      "\\$UtilMethods.getUserEmail(${1:user})"
    ],
    "description": ""
  },
  "$UtilMethods.getUserEmailAddress(String userId): static String": {
    "prefix": [
      "$",
      "UtilMethods.getUserEmailAddress",
      "$UtilMethods.getUserEmailAddress"
    ],
    "body": [
      "\\$UtilMethods.getUserEmailAddress(${1:userId})"
    ],
    "description": ""
  },
  "$UtilMethods.getUserFullName(String userId): static String": {
    "prefix": [
      "$",
      "UtilMethods.getUserFullName",
      "$UtilMethods.getUserFullName"
    ],
    "body": [
      "\\$UtilMethods.getUserFullName(${1:userId})"
    ],
    "description": ""
  },
  "$UtilMethods.getValidDirectoryName(String phrase): static String": {
    "prefix": [
      "$",
      "UtilMethods.getValidDirectoryName",
      "$UtilMethods.getValidDirectoryName"
    ],
    "body": [
      "\\$UtilMethods.getValidDirectoryName(${1:phrase})"
    ],
    "description": ""
  },
  "$UtilMethods.getValidFileName(String fileName): static String": {
    "prefix": [
      "$",
      "UtilMethods.getValidFileName",
      "$UtilMethods.getValidFileName"
    ],
    "body": [
      "\\$UtilMethods.getValidFileName(${1:fileName})"
    ],
    "description": ""
  },
  "$UtilMethods.getVelocityTemplate(String liveUrl): static Template": {
    "prefix": [
      "$",
      "UtilMethods.getVelocityTemplate",
      "$UtilMethods.getVelocityTemplate"
    ],
    "body": [
      "\\$UtilMethods.getVelocityTemplate(${1:liveUrl})"
    ],
    "description": "get the velocity template from the liveUrl, if the file is not publish, automatically is published"
  },
  "$UtilMethods.getVersionableClass(String tableName): static Class": {
    "prefix": [
      "$",
      "UtilMethods.getVersionableClass",
      "$UtilMethods.getVersionableClass"
    ],
    "body": [
      "\\$UtilMethods.getVersionableClass(${1:tableName})"
    ],
    "description": ""
  },
  "$UtilMethods.getVersionInfoType(String type): static Class": {
    "prefix": [
      "$",
      "UtilMethods.getVersionInfoType",
      "$UtilMethods.getVersionInfoType"
    ],
    "body": [
      "\\$UtilMethods.getVersionInfoType(${1:type})"
    ],
    "description": ""
  },
  "$UtilMethods.googleDateToDate(String d): static Date": {
    "prefix": [
      "$",
      "UtilMethods.googleDateToDate",
      "$UtilMethods.googleDateToDate"
    ],
    "body": [
      "\\$UtilMethods.googleDateToDate(${1:d})"
    ],
    "description": "Take a string and converts it to Date using the google mini search format"
  },
  "$UtilMethods.hasValue(String selectedValues, String value): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.hasValue",
      "$UtilMethods.hasValue"
    ],
    "body": [
      "\\$UtilMethods.hasValue(${1:selectedValues}, ${2:value})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlDateTimeToDate(String d): static Date": {
    "prefix": [
      "$",
      "UtilMethods.htmlDateTimeToDate",
      "$UtilMethods.htmlDateTimeToDate"
    ],
    "body": [
      "\\$UtilMethods.htmlDateTimeToDate(${1:d})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlDateToHTMLTime(Date x): static String": {
    "prefix": [
      "$",
      "UtilMethods.htmlDateToHTMLTime",
      "$UtilMethods.htmlDateToHTMLTime"
    ],
    "body": [
      "\\$UtilMethods.htmlDateToHTMLTime(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlifyString(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.htmlifyString",
      "$UtilMethods.htmlifyString"
    ],
    "body": [
      "\\$UtilMethods.htmlifyString(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlLineBreak(String original): static String": {
    "prefix": [
      "$",
      "UtilMethods.htmlLineBreak",
      "$UtilMethods.htmlLineBreak"
    ],
    "body": [
      "\\$UtilMethods.htmlLineBreak(${1:original})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlToDate(Date rDate): static Date": {
    "prefix": [
      "$",
      "UtilMethods.htmlToDate",
      "$UtilMethods.htmlToDate"
    ],
    "body": [
      "\\$UtilMethods.htmlToDate(${1:rDate})"
    ],
    "description": ""
  },
  "$UtilMethods.htmlToDate(String d): static Date": {
    "prefix": [
      "$",
      "UtilMethods.htmlToDate",
      "$UtilMethods.htmlToDate"
    ],
    "body": [
      "\\$UtilMethods.htmlToDate(${1:d})"
    ],
    "description": ""
  },
  "$UtilMethods.httpifyString(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.httpifyString",
      "$UtilMethods.httpifyString"
    ],
    "body": [
      "\\$UtilMethods.httpifyString(${1:x})"
    ],
    "description": "This method will take a url and make sure it has the protocol (http://) portion set."
  },
  "$UtilMethods.inString(String haystack, String needle): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.inString",
      "$UtilMethods.inString"
    ],
    "body": [
      "\\$UtilMethods.inString(${1:haystack}, ${2:needle})"
    ],
    "description": ""
  },
  "$UtilMethods.isAdminMode(HttpServletRequest request, HttpServletResponse response): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isAdminMode",
      "$UtilMethods.isAdminMode"
    ],
    "body": [
      "\\$UtilMethods.isAdminMode(${1:request}, ${2:response})"
    ],
    "description": ""
  },
  "$UtilMethods.isDateInRange(Date date, Date fromDate, Date toDate): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isDateInRange",
      "$UtilMethods.isDateInRange"
    ],
    "body": [
      "\\$UtilMethods.isDateInRange(${1:date}, ${2:fromDate}, ${3:toDate})"
    ],
    "description": ""
  },
  "$UtilMethods.isEmpty(String x): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isEmpty",
      "$UtilMethods.isEmpty"
    ],
    "body": [
      "\\$UtilMethods.isEmpty(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.isESPortFree(String host, int port): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isESPortFree",
      "$UtilMethods.isESPortFree"
    ],
    "body": [
      "\\$UtilMethods.isESPortFree(${1:host}, ${2:port})"
    ],
    "description": "Validate if the Elastic search tcp port is free or its being used"
  },
  "$UtilMethods.isImage(String x): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isImage",
      "$UtilMethods.isImage"
    ],
    "body": [
      "\\$UtilMethods.isImage(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.isInt(String intString): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isInt",
      "$UtilMethods.isInt"
    ],
    "body": [
      "\\$UtilMethods.isInt(${1:intString})"
    ],
    "description": ""
  },
  "$UtilMethods.isLong(String longString): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isLong",
      "$UtilMethods.isLong"
    ],
    "body": [
      "\\$UtilMethods.isLong(${1:longString})"
    ],
    "description": ""
  },
  "$UtilMethods.isNotSet(char[] chars) | String string: static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isNotSet",
      "$UtilMethods.isNotSet"
    ],
    "body": [
      "\\$UtilMethods.isNotSet(${1:chars|string})"
    ],
    "description": ""
  },
  "$UtilMethods.isNumeric(String str): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isNumeric",
      "$UtilMethods.isNumeric"
    ],
    "body": [
      "\\$UtilMethods.isNumeric(${1:str})"
    ],
    "description": ""
  },
  "$UtilMethods.isPortFree(int pp): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isPortFree",
      "$UtilMethods.isPortFree"
    ],
    "body": [
      "\\$UtilMethods.isPortFree(${1:pp})"
    ],
    "description": ""
  },
  "$UtilMethods.isSetCrumb(String x): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isSetCrumb",
      "$UtilMethods.isSetCrumb"
    ],
    "body": [
      "\\$UtilMethods.isSetCrumb(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.isSetHTML(String x): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isSetHTML",
      "$UtilMethods.isSetHTML"
    ],
    "body": [
      "\\$UtilMethods.isSetHTML(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.isSetOrGet(T toEvaluate, T defaultValue): static <T> T": {
    "prefix": [
      "$",
      "UtilMethods.isSetOrGet",
      "$UtilMethods.isSetOrGet"
    ],
    "body": [
      "\\$UtilMethods.isSetOrGet(${1:toEvaluate}, ${2:defaultValue})"
    ],
    "description": "If toEvaluate is set then return it, otherwise return defaultValue"
  },
  "$UtilMethods.isUrlLive(String url, Host host): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isUrlLive",
      "$UtilMethods.isUrlLive"
    ],
    "body": [
      "\\$UtilMethods.isUrlLive(${1:url}, ${2:host})"
    ],
    "description": ""
  },
  "$UtilMethods.isUrlLive(String url, String hostId): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isUrlLive",
      "$UtilMethods.isUrlLive"
    ],
    "body": [
      "\\$UtilMethods.isUrlLive(${1:url}, ${2:hostId})"
    ],
    "description": ""
  },
  "$UtilMethods.isUrlPreview(String url, Host host | String hostId): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isUrlPreview",
      "$UtilMethods.isUrlPreview"
    ],
    "body": [
      "\\$UtilMethods.isUrlPreview(${1:url}, ${2:host|hostId})"
    ],
    "description": ""
  },
  "$UtilMethods.isValidEmail(String email | Object email): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isValidEmail",
      "$UtilMethods.isValidEmail"
    ],
    "body": [
      "\\$UtilMethods.isValidEmail(${1:email})"
    ],
    "description": ""
  },
  "$UtilMethods.isValidURL(String url): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.isValidURL",
      "$UtilMethods.isValidURL"
    ],
    "body": [
      "\\$UtilMethods.isValidURL(${1:url})"
    ],
    "description": ""
  },
  "$UtilMethods.javaScriptify(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.javaScriptify",
      "$UtilMethods.javaScriptify"
    ],
    "body": [
      "\\$UtilMethods.javaScriptify(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.javaScriptifyVariable(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.javaScriptifyVariable",
      "$UtilMethods.javaScriptifyVariable"
    ],
    "body": [
      "\\$UtilMethods.javaScriptifyVariable(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.jdbcDateToHtml(String jdbcdate): static String": {
    "prefix": [
      "$",
      "UtilMethods.jdbcDateToHtml",
      "$UtilMethods.jdbcDateToHtml"
    ],
    "body": [
      "\\$UtilMethods.jdbcDateToHtml(${1:jdbcdate})"
    ],
    "description": ""
  },
  "$UtilMethods.jdbcToDate(String d): static Date": {
    "prefix": [
      "$",
      "UtilMethods.jdbcToDate",
      "$UtilMethods.jdbcToDate"
    ],
    "body": [
      "\\$UtilMethods.jdbcToDate(${1:d})"
    ],
    "description": ""
  },
  "$UtilMethods.join(List<String> | String[] strList, String separator): static String": {
    "prefix": [
      "$",
      "UtilMethods.join",
      "$UtilMethods.join"
    ],
    "body": [
      "\\$UtilMethods.join(${1:strList}, ${2:separator})"
    ],
    "description": ""
  },
  "$UtilMethods.join(String[] strArray, String separator, boolean empty): static String": {
    "prefix": [
      "$",
      "UtilMethods.join",
      "$UtilMethods.join"
    ],
    "body": [
      "\\$UtilMethods.join(${1:strArray}, ${2:separator}, ${3:empty})"
    ],
    "description": ""
  },
  "$UtilMethods.listToString(String stringList): static String": {
    "prefix": [
      "$",
      "UtilMethods.listToString",
      "$UtilMethods.listToString"
    ],
    "body": [
      "\\$UtilMethods.listToString(${1:stringList})"
    ],
    "description": "This method create a list of element for the getLuceneDocumentForContentlet to facilitate the search of multiple elements the contentlet search"
  },
  "$UtilMethods.makeHtmlSafe(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makeHtmlSafe",
      "$UtilMethods.makeHtmlSafe"
    ],
    "body": [
      "\\$UtilMethods.makeHtmlSafe(${1:unsafeString})"
    ],
    "description": ""
  },
  "$UtilMethods.makeHtmlSafeDontConvertNewLines(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makeHtmlSafeDontConvertNewLines",
      "$UtilMethods.makeHtmlSafeDontConvertNewLines"
    ],
    "body": [
      "\\$UtilMethods.makeHtmlSafeDontConvertNewLines(${1:unsafeString})"
    ],
    "description": "new lines stay as single character '\\n's -- they are not translated into\ns"
  },
  "$UtilMethods.makeJavaSafe(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makeJavaSafe",
      "$UtilMethods.makeJavaSafe"
    ],
    "body": [
      "\\$UtilMethods.makeJavaSafe(${1:unsafeString})"
    ],
    "description": ""
  },
  "$UtilMethods.makePdfSafe(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makePdfSafe",
      "$UtilMethods.makePdfSafe"
    ],
    "body": [
      "\\$UtilMethods.makePdfSafe(${1:unsafeString})"
    ],
    "description": ""
  },
  "$UtilMethods.makeUnixSafe(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makeUnixSafe",
      "$UtilMethods.makeUnixSafe"
    ],
    "body": [
      "\\$UtilMethods.makeUnixSafe(${1:unsafeString})"
    ],
    "description": ""
  },
  "$UtilMethods.makeXmlSafe(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.makeXmlSafe",
      "$UtilMethods.makeXmlSafe"
    ],
    "body": [
      "\\$UtilMethods.makeXmlSafe(${1:unsafeString})"
    ],
    "description": ""
  },
  "$UtilMethods.mod(Integer x, Integer y): static int": {
    "prefix": [
      "$",
      "UtilMethods.mod",
      "$UtilMethods.mod"
    ],
    "body": [
      "\\$UtilMethods.mod(${1:x}, ${2:y})"
    ],
    "description": "Get the modelu of x % y"
  },
  "$UtilMethods.multiply(Number num1, Number num2): static Number": {
    "prefix": [
      "$",
      "UtilMethods.multiply",
      "$UtilMethods.multiply"
    ],
    "body": [
      "\\$UtilMethods.multiply(${1:num1}, ${2:num2})"
    ],
    "description": "Multiplies two numbers of types double, float, long or integer (the number objects do not have to be of the same tableName)"
  },
  "$UtilMethods.notEqual(Object first, Object second): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.notEqual",
      "$UtilMethods.notEqual"
    ],
    "body": [
      "\\$UtilMethods.notEqual(${1:first}, ${2:second})"
    ],
    "description": ""
  },
  "$UtilMethods.now(): static Date": {
    "prefix": [
      "$",
      "UtilMethods.now",
      "$UtilMethods.now"
    ],
    "body": [
      "\\$UtilMethods.now()"
    ],
    "description": ""
  },
  "$UtilMethods.obfuscateCreditCard(String ccnum): static String": {
    "prefix": [
      "$",
      "UtilMethods.obfuscateCreditCard",
      "$UtilMethods.obfuscateCreditCard"
    ],
    "body": [
      "\\$UtilMethods.obfuscateCreditCard(${1:ccnum})"
    ],
    "description": ""
  },
  "$UtilMethods.obfuscateEmail(String email): static String": {
    "prefix": [
      "$",
      "UtilMethods.obfuscateEmail",
      "$UtilMethods.obfuscateEmail"
    ],
    "body": [
      "\\$UtilMethods.obfuscateEmail(${1:email})"
    ],
    "description": ""
  },
  "$UtilMethods.obfuscateEmailHrefClass(String email, String className): static String": {
    "prefix": [
      "$",
      "UtilMethods.obfuscateEmailHrefClass",
      "$UtilMethods.obfuscateEmailHrefClass"
    ],
    "body": [
      "\\$UtilMethods.obfuscateEmailHrefClass(${1:email}, ${2:className})"
    ],
    "description": ""
  },
  "$UtilMethods.obfuscateString(String toOfuscate, int size): static String": {
    "prefix": [
      "$",
      "UtilMethods.obfuscateString",
      "$UtilMethods.obfuscateString"
    ],
    "body": [
      "\\$UtilMethods.obfuscateString(${1:toOfuscate}, ${2:size})"
    ],
    "description": ""
  },
  "$UtilMethods.padToLength(String baseString, int finalLength): static String": {
    "prefix": [
      "$",
      "UtilMethods.padToLength",
      "$UtilMethods.padToLength"
    ],
    "body": [
      "\\$UtilMethods.padToLength(${1:baseString}, ${2:finalLength})"
    ],
    "description": "padToLength(\"bob\", 6) -> \"bob \" padToLength(\"bob\", 6, \" \") -> \"bob   \" padToLengthL(\"bob\", 6) -> \" bob\" padToLengthL(\"bob\", 6, \" \") -> \"   bob\" padToLengthL(\"bob\", 8, \".\") -> \".....bob\""
  },
  "$UtilMethods.padToLength(String baseString, int finalLength, String padString): static String": {
    "prefix": [
      "$",
      "UtilMethods.padToLength",
      "$UtilMethods.padToLength"
    ],
    "body": [
      "\\$UtilMethods.padToLength(${1:baseString}, ${2:finalLength}, ${3:padString})"
    ],
    "description": ""
  },
  "$UtilMethods.padToLengthL(String baseString, int finalLength): static String": {
    "prefix": [
      "$",
      "UtilMethods.padToLengthL",
      "$UtilMethods.padToLengthL"
    ],
    "body": [
      "\\$UtilMethods.padToLengthL(${1:baseString}, ${2:finalLength})"
    ],
    "description": ""
  },
  "$UtilMethods.padToLengthL(String baseString, int finalLength, String padString): static String": {
    "prefix": [
      "$",
      "UtilMethods.padToLengthL",
      "$UtilMethods.padToLengthL"
    ],
    "body": [
      "\\$UtilMethods.padToLengthL(${1:baseString}, ${2:finalLength}, ${3:padString})"
    ],
    "description": ""
  },
  "$UtilMethods.parseDate(String possibleDate, String format): static Date": {
    "prefix": [
      "$",
      "UtilMethods.parseDate",
      "$UtilMethods.parseDate"
    ],
    "body": [
      "\\$UtilMethods.parseDate(${1:possibleDate}, ${2:format})"
    ],
    "description": "takes a string and attempts to parse it using the given format."
  },
  "$UtilMethods.parseDirtyDouble(String num): static double": {
    "prefix": [
      "$",
      "UtilMethods.parseDirtyDouble",
      "$UtilMethods.parseDirtyDouble"
    ],
    "body": [
      "\\$UtilMethods.parseDirtyDouble({$num})"
    ],
    "description": "Accepts any format string (that includes digits) and creates a double out of it (primarily used for currency)."
  },
  "$UtilMethods.parseDouble(String possibleDouble, double backupValue): static double": {
    "prefix": [
      "$",
      "UtilMethods.parseDouble",
      "$UtilMethods.parseDouble"
    ],
    "body": [
      "\\$UtilMethods.parseDouble(${1:possibleDouble}, ${2:backupValue})"
    ],
    "description": "takes a string and attempts to parse it."
  },
  "$UtilMethods.parseLong(String possibleLong, long backupValue): static long": {
    "prefix": [
      "$",
      "UtilMethods.parseLong",
      "$UtilMethods.parseLong"
    ],
    "body": [
      "\\$UtilMethods.parseLong(${1:possibleLong}, ${2:backupValue})"
    ],
    "description": "takes a string and attempts to parse it."
  },
  "$UtilMethods.pidmsToDate(String d): static Date": {
    "prefix": [
      "$",
      "UtilMethods.pidmsToDate",
      "$UtilMethods.pidmsToDate"
    ],
    "body": [
      "\\$UtilMethods.pidmsToDate(${1:d})"
    ],
    "description": ""
  },
  "$UtilMethods.pluralize(long num, String word): static String": {
    "prefix": [
      "$",
      "UtilMethods.pluralize",
      "$UtilMethods.pluralize"
    ],
    "body": [
      "\\$UtilMethods.pluralize(${1:num}, ${2:word})"
    ],
    "description": "pluralize(1, hour) => hour pluralize(2, hour) => 2 hours"
  },
  "$UtilMethods.popVelocityContext(VelocityContext vctx): static Context": {
    "prefix": [
      "$",
      "UtilMethods.popVelocityContext",
      "$UtilMethods.popVelocityContext"
    ],
    "body": [
      "\\$UtilMethods.popVelocityContext(${1:vctx})"
    ],
    "description": ""
  },
  "$UtilMethods.prettyByteify(long memory): static String": {
    "prefix": [
      "$",
      "UtilMethods.prettyByteify",
      "$UtilMethods.prettyByteify"
    ],
    "body": [
      "\\$UtilMethods.prettyByteify(${1:memory})"
    ],
    "description": ""
  },
  "$UtilMethods.prettyMemory(long memory): static String": {
    "prefix": [
      "$",
      "UtilMethods.prettyMemory",
      "$UtilMethods.prettyMemory"
    ],
    "body": [
      "\\$UtilMethods.prettyMemory(${1:memory})"
    ],
    "description": ""
  },
  "$UtilMethods.prettyShortenString(String text, int maxLength): static String": {
    "prefix": [
      "$",
      "UtilMethods.prettyShortenString",
      "$UtilMethods.prettyShortenString"
    ],
    "body": [
      "\\$UtilMethods.prettyShortenString(${1:text}, ${2:maxLength})"
    ],
    "description": ""
  },
  "$UtilMethods.prettyString(String text): static String": {
    "prefix": [
      "$",
      "UtilMethods.prettyString",
      "$UtilMethods.prettyString"
    ],
    "body": [
      "\\$UtilMethods.prettyString(${1:text})"
    ],
    "description": ""
  },
  "$UtilMethods.prettyString(String text, String alternateText): static String": {
    "prefix": [
      "$",
      "UtilMethods.prettyString",
      "$UtilMethods.prettyString"
    ],
    "body": [
      "\\$UtilMethods.prettyString(${1:text}, ${2:alternateText})"
    ],
    "description": ""
  },
  "$UtilMethods.pushVelocityContext(Context ctx): static Context": {
    "prefix": [
      "$",
      "UtilMethods.pushVelocityContext",
      "$UtilMethods.pushVelocityContext"
    ],
    "body": [
      "\\$UtilMethods.pushVelocityContext(${1:ctx})"
    ],
    "description": ""
  },
  "$UtilMethods.random(int maxValue): static int": {
    "prefix": [
      "$",
      "UtilMethods.random",
      "$UtilMethods.random"
    ],
    "body": [
      "\\$UtilMethods.random(${1:maxValue})"
    ],
    "description": ""
  },
  "$UtilMethods.random(int minValue, int maxValue): static int": {
    "prefix": [
      "$",
      "UtilMethods.random",
      "$UtilMethods.random"
    ],
    "body": [
      "\\$UtilMethods.random(${1:minValue}, ${2:maxValue})"
    ],
    "description": ""
  },
  "$UtilMethods.randomList(List<Object> list): static List<Object>": {
    "prefix": [
      "$",
      "UtilMethods.randomList",
      "$UtilMethods.randomList"
    ],
    "body": [
      "\\$UtilMethods.randomList(${1:list})"
    ],
    "description": ""
  },
  "$UtilMethods.randomList(List<Object> list, int number): static List<Object>": {
    "prefix": [
      "$",
      "UtilMethods.randomList",
      "$UtilMethods.randomList"
    ],
    "body": [
      "\\$UtilMethods.randomList(${1:list}, ${2:number})"
    ],
    "description": ""
  },
  "$UtilMethods.removeBrowserCache(HttpServletResponse response): static void": {
    "prefix": [
      "$",
      "UtilMethods.removeBrowserCache",
      "$UtilMethods.removeBrowserCache"
    ],
    "body": [
      "\\$UtilMethods.removeBrowserCache(${1:response})"
    ],
    "description": ""
  },
  "$UtilMethods.removeCharacters(String unsafeString, String charactersToRemove): static String": {
    "prefix": [
      "$",
      "UtilMethods.removeCharacters",
      "$UtilMethods.removeCharacters"
    ],
    "body": [
      "\\$UtilMethods.removeCharacters(${1:unsafeString}, ${2:charactersToRemove})"
    ],
    "description": ""
  },
  "$UtilMethods.replace(String original, String from, String to): static String": {
    "prefix": [
      "$",
      "UtilMethods.replace",
      "$UtilMethods.replace"
    ],
    "body": [
      "\\$UtilMethods.replace(${1:original}, ${2:from}, ${3:to})"
    ],
    "description": ""
  },
  "$UtilMethods.replaceStringBuffer(StringBuffer original, String from, String to): static StringBuffer": {
    "prefix": [
      "$",
      "UtilMethods.replaceStringBuffer",
      "$UtilMethods.replaceStringBuffer"
    ],
    "body": [
      "\\$UtilMethods.replaceStringBuffer(${1:original}, ${2:from}, ${3:to})"
    ],
    "description": ""
  },
  "$UtilMethods.shortDateToLuceneDate(String d): static String": {
    "prefix": [
      "$",
      "UtilMethods.shortDateToLuceneDate",
      "$UtilMethods.shortDateToLuceneDate"
    ],
    "body": [
      "\\$UtilMethods.shortDateToLuceneDate(${1:d})"
    ],
    "description": "Deprecated. \nWhen a query contains a date with format MM/dd/yyyy, it is not necessary to format dates, Lucene accepts this format as well"
  },
  "$UtilMethods.shortenString(String s, int l): static String": {
    "prefix": [
      "$",
      "UtilMethods.shortenString",
      "$UtilMethods.shortenString"
    ],
    "body": [
      "\\$UtilMethods.shortenString(${1:s}, ${2:l})"
    ],
    "description": ""
  },
  "$UtilMethods.shortstring(String text, int maxNumberOfChars, boolean includeEllipsis): static String": {
    "prefix": [
      "$",
      "UtilMethods.shortstring",
      "$UtilMethods.shortstring"
    ],
    "body": [
      "\\$UtilMethods.shortstring(${1:text}, ${2:maxNumberOfChars}, ${3:includeEllipsis})"
    ],
    "description": "Takes a string of text and trims it to the maxNumberOfChars (null input string yields an empty string)."
  },
  "$UtilMethods.similarStrings(String a, String b): static boolean": {
    "prefix": [
      "$",
      "UtilMethods.similarStrings",
      "$UtilMethods.similarStrings"
    ],
    "body": [
      "\\$UtilMethods.similarStrings(${1:a}, ${2:b})"
    ],
    "description": ""
  },
  "$UtilMethods.simplifyExtendedAsciiCharacters(String unsafeString): static String": {
    "prefix": [
      "$",
      "UtilMethods.simplifyExtendedAsciiCharacters",
      "$UtilMethods.simplifyExtendedAsciiCharacters"
    ],
    "body": [
      "\\$UtilMethods.simplifyExtendedAsciiCharacters(${1:unsafeString})"
    ],
    "description": "removes Microsoft Word's unusual characters and replaces them with their simple equivalents"
  },
  "$UtilMethods.specialSplit(Reader reader, char delim, char textQualifier): static List<String[]>": {
    "prefix": [
      "$",
      "UtilMethods.specialSplit",
      "$UtilMethods.specialSplit"
    ],
    "body": [
      "\\$UtilMethods.specialSplit(${1:reader}, ${2:delim}, ${3:textQualifier})"
    ],
    "description": "Special split function, to split csv files exported from access, excel, ..."
  },
  "$UtilMethods.specialSplit(String text, String delim, String textQualifier): static String[]": {
    "prefix": [
      "$",
      "UtilMethods.specialSplit",
      "$UtilMethods.specialSplit"
    ],
    "body": [
      "\\$UtilMethods.specialSplit(${1:text}, ${2:delim}, ${3:textQualifier})"
    ],
    "description": "Special split function, to split csv files exported from access"
  },
  "$UtilMethods.sqlify(String fixme): static String": {
    "prefix": [
      "$",
      "UtilMethods.sqlify",
      "$UtilMethods.sqlify"
    ],
    "body": [
      "\\$UtilMethods.sqlify(${1:fixme})"
    ],
    "description": "Escape quotation marks so they work in javascript fields"
  },
  "$UtilMethods.stripUnicode(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.stripUnicode",
      "$UtilMethods.stripUnicode"
    ],
    "body": [
      "\\$UtilMethods.stripUnicode(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.toCamelCase(String fieldName): static String": {
    "prefix": [
      "$",
      "UtilMethods.toCamelCase",
      "$UtilMethods.toCamelCase"
    ],
    "body": [
      "\\$UtilMethods.toCamelCase(${1:fieldName})"
    ],
    "description": ""
  },
  "$UtilMethods.toCommaDelimitedString(List<E> arli): static <E> String": {
    "prefix": [
      "$",
      "UtilMethods.toCommaDelimitedString",
      "$UtilMethods.toCommaDelimitedString"
    ],
    "body": [
      "\\$UtilMethods.toCommaDelimitedString(${1:arli})"
    ],
    "description": ""
  },
  "$UtilMethods.toMap(Object obj): static Map<String,Object>": {
    "prefix": [
      "$",
      "UtilMethods.toMap",
      "$UtilMethods.toMap"
    ],
    "body": [
      "\\$UtilMethods.toMap(${1:obj})"
    ],
    "description": "This methods receives an object and builds a map based on the object simple properties (integers, longs, strings, floats, doubles, dates, chars, booleans) of the object"
  },
  "$UtilMethods.toPercentageFormat(double weight): static String": {
    "prefix": [
      "$",
      "UtilMethods.toPercentageFormat",
      "$UtilMethods.toPercentageFormat"
    ],
    "body": [
      "\\$UtilMethods.toPercentageFormat(${1:weight})"
    ],
    "description": ""
  },
  "$UtilMethods.toPercentageFormat(float weight): static String": {
    "prefix": [
      "$",
      "UtilMethods.toPercentageFormat",
      "$UtilMethods.toPercentageFormat"
    ],
    "body": [
      "\\$UtilMethods.toPercentageFormat(${1:weight})"
    ],
    "description": ""
  },
  "$UtilMethods.toPriceFormat(double price | float price): static String": {
    "prefix": [
      "$",
      "UtilMethods.toPriceFormat",
      "$UtilMethods.toPriceFormat"
    ],
    "body": [
      "\\$UtilMethods.toPriceFormat(${1:price})"
    ],
    "description": ""
  },
  "$UtilMethods.toString(int | long | Object var): String": {
    "prefix": [
      "$",
      "UtilMethods.toString",
      "$UtilMethods.toString"
    ],
    "body": [
      "\\$UtilMethods.toString(${1:var})"
    ],
    "description": ""
  },
  "$UtilMethods.toWeightFormat(double weight): static String": {
    "prefix": [
      "$",
      "UtilMethods.toWeightFormat",
      "$UtilMethods.toWeightFormat"
    ],
    "body": [
      "\\$UtilMethods.toWeightFormat(${1:weight})"
    ],
    "description": ""
  },
  "$UtilMethods.toWeightFormat(float weight): static String": {
    "prefix": [
      "$",
      "UtilMethods.toWeightFormat",
      "$UtilMethods.toWeightFormat"
    ],
    "body": [
      "\\$UtilMethods.toWeightFormat(${1:weight})"
    ],
    "description": ""
  },
  "$UtilMethods.toXNumberFormat(double number, int decimals): static String": {
    "prefix": [
      "$",
      "UtilMethods.toXNumberFormat",
      "$UtilMethods.toXNumberFormat"
    ],
    "body": [
      "\\$UtilMethods.toXNumberFormat(${1:number}, ${2:decimals})"
    ],
    "description": ""
  },
  "$UtilMethods.trimCharArray(char[] myArray): static char[]": {
    "prefix": [
      "$",
      "UtilMethods.trimCharArray",
      "$UtilMethods.trimCharArray"
    ],
    "body": [
      "\\$UtilMethods.trimCharArray(${1:myArray})"
    ],
    "description": "Removes leading and trailing whitespaces from a char array"
  },
  "$UtilMethods.truncatify(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.truncatify",
      "$UtilMethods.truncatify"
    ],
    "body": [
      "\\$UtilMethods.truncatify(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.truncatify(String x, int len): static String": {
    "prefix": [
      "$",
      "UtilMethods.truncatify",
      "$UtilMethods.truncatify"
    ],
    "body": [
      "\\$UtilMethods.truncatify(${1:x}, ${2:len})"
    ],
    "description": ""
  },
  "$UtilMethods.truncFull(String x, int len): static String": {
    "prefix": [
      "$",
      "UtilMethods.truncFull",
      "$UtilMethods.truncFull"
    ],
    "body": [
      "\\$UtilMethods.truncFull(${1:x}, ${2:len})"
    ],
    "description": ""
  },
  "$UtilMethods.validateFileName(String fileName): static String": {
    "prefix": [
      "$",
      "UtilMethods.validateFileName",
      "$UtilMethods.validateFileName"
    ],
    "body": [
      "\\$UtilMethods.validateFileName(${1:fileName})"
    ],
    "description": ""
  },
  "$UtilMethods.webifyString(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.webifyString",
      "$UtilMethods.webifyString"
    ],
    "body": [
      "\\$UtilMethods.webifyString(${1:x})"
    ],
    "description": ""
  },
  "$UtilMethods.wrapLines(String original, int wrap): static String": {
    "prefix": [
      "$",
      "UtilMethods.wrapLines",
      "$UtilMethods.wrapLines"
    ],
    "body": [
      "\\$UtilMethods.wrapLines(${1:original}, ${2:wrap})"
    ],
    "description": ""
  },
  "$UtilMethods.xmlEscape(String description): static String": {
    "prefix": [
      "$",
      "UtilMethods.xmlEscape",
      "$UtilMethods.xmlEscape"
    ],
    "body": [
      "\\$UtilMethods.xmlEscape(${1:description})"
    ],
    "description": ""
  },
  "$UtilMethods.xmlifyString(String x): static String": {
    "prefix": [
      "$",
      "UtilMethods.xmlifyString",
      "$UtilMethods.xmlifyString"
    ],
    "body": [
      "\\$UtilMethods.xmlifyString(${1:x})"
    ],
    "description": ""
  },
  "$dotExperiment.getUser(HttpServletRequest request): User": {
    "prefix": [
      "$",
      "dotExperiment.getUser",
      "$dotExperiment.getUser"
    ],
    "body": [
      "\\$dotExperiment.getUser(${1:request})"
    ],
    "description": "*"
  },
  "$dotExperiment.code(): String": {
    "prefix": [
      "$",
      "dotExperiment.code",
      "$dotExperiment.code"
    ],
    "body": [
      "\\$dotExperiment.code()"
    ],
    "description": ""
  },
  "$dotcache.clear(): void": {
    "prefix": [
      "$",
      "dotcache.clear()",
      "$dotcache.clear()"
    ],
    "body": [
      "\\$dotcache.clear()"
    ],
    "description": "Clears all objects from the cache memory associated to this ViewTool."
  },
  "$dotcache.get(String key): Serializable": {
    "prefix": [
      "$",
      "dotcache.get(String key)",
      "$dotcache.get(String key)"
    ],
    "body": [
      "\\$dotcache.get(String key)"
    ],
    "description": "Gets a given Serializable object cached in memory based on the specified key."
  },
  "$dotcache.put(String key, Object value): void": {
    "prefix": [
      "$",
      "dotcache.put",
      "$dotcache.put"
    ],
    "body": [
      "\\$dotcache.put(${1:key}, ${2:value})"
    ],
    "description": "Puts a given value in the cache memory based on the specified key."
  },
  "$dotcache.put(String key, Object value, int ttl): void": {
    "prefix": [
      "$",
      "dotcache.put",
      "$dotcache.put"
    ],
    "body": [
      "\\$dotcache.put(${1:key}, ${2:value}, ${3:ttl})"
    ],
    "description": "Puts a given value in the cache memory based on the specified key for a specific amount of time."
  },
  "$dotcache.putDebounce(String key, Object value, int ttl): void": {
    "prefix": [
      "$",
      "dotcache.putDebounce",
      "$dotcache.putDebounce"
    ],
    "body": [
      "\\$dotcache.putDebounce(${1:key}, ${2:value}, ${3:ttl})"
    ],
    "description": "This puts into the cache once a second"
  },
  "$dotcache.remove(String key): void": {
    "prefix": [
      "$",
      "dotcache.remove",
      "$dotcache.remove"
    ],
    "body": [
      "\\$dotcache.remove(${1:key})"
    ],
    "description": "Removes an object from the cache memory based on its key."
  },
  "$ai.isAiEnabled(): boolean": {
    "prefix": [
      "$",
      "ai.isAiEnabled()",
      "$ai.isAiEnabled()"
    ],
    "body": [
      "\\$ai.isAiEnabled()"
    ],
    "description": "*Check if AI is enabled by verifying if the API key is set in the configuration."
  },
  "$ai.generateText(String | Map<String, Object> prompt): JSONObject": {
    "prefix": [
      "$",
      "ai.generateText",
      "$ai.generateText"
    ],
    "body": [
      "\\$ai.generateText(${1:prompt})"
    ],
    "description": "*Generate a response from the AI prompt service with adding config data to original prompt (rolePrompt, textPrompt, imagePrompt)"
  },
  "$ai.generateImage(String | Map<String, Object> prompt)": {
    "prefix": [
      "$",
      "ai.generateImage",
      "$ai.generateImage"
    ],
    "body": [
      "\\$ai.generateImage(${1:prompt})"
    ],
    "description": "*Processes image request by calling ImageService. If response is OK creates temp file and adds its name in"
  },
  "$ai.getEmbeddings(): EmbeddingsTool": {
    "prefix": [
      "$",
      "ai.getEmbeddings",
      "$ai.getEmbeddings"
    ],
    "body": [
      "\\$ai.getEmbeddings()"
    ],
    "description": "*Processes embedding request by calling EmbeddingsTool."
  },
  "$ai.getSearch(): SearchTool": {
    "prefix": [
      "$",
      "ai.getSearch",
      "$ai.getSearch"
    ],
    "body": [
      "\\$ai.getSearch()"
    ],
    "description": "*Processes search request by calling SearchTool."
  },
  "$ai.getCompletions(): CompletionsTool": {
    "prefix": [
      "$",
      "ai.getCompletions",
      "$ai.getCompletions"
    ],
    "body": [
      "\\$ai.getCompletions()"
    ],
    "description": "*Processes completions request by calling CompletionsTool."
  },
  "$analytics.runReportFromJson(String query): ReportResponse": {
    "prefix": [
      "$",
      "analytics.runReportFromJson",
      "$analytics.runReportFromJson"
    ],
    "body": [
      "\\$analytics.runReportFromJson(${1:query})"
    ],
    "description": "*Runs an analytics report based on the string json query."
  },
  "$analytics.runReportFromMap(Map<String, Object> query): ReportResponse": {
    "prefix": [
      "$",
      "analytics.runReportFromMap",
      "$analytics.runReportFromMap"
    ],
    "body": [
      "\\$analytics.runReportFromMap(${1:query})"
    ],
    "description": "*Runs an analytics report based on Map query."
  },
  "$analytics.createCubeJSQueryBuilder(): CubeJSQuery.Builder": {
    "prefix": [
      "$",
      "analytics.createCubeJSQueryBuilder()",
      "$analytics.createCubeJSQueryBuilder()"
    ],
    "body": [
      "\\$analytics.createCubeJSQueryBuilder()"
    ],
    "description": "*Creates a CubeJSQuery.Builder instance"
  },
  "$analytics.runRawReport(CubeJSQuery query): ReportResponse": {
    "prefix": [
      "$",
      "analytics.runRawReport",
      "$analytics.runRawReport"
    ],
    "body": [
      "\\$analytics.runRawReport(${1:query})"
    ],
    "description": "*Runs an analytics report based cube js raw json string query"
  },
  "$dotsecrets.get(String key): Object": {
    "prefix": [
      "$",
      "dotsecrets.get",
      "$dotsecrets.get"
    ],
    "body": [
      "\\$dotsecrets.get(${1:key})"
    ],
    "description": "*Gets a secret as an object|string, based on the current host (if configured)"
  },
  "$dotsecrets.getSystemSecret(String key): Object": {
    "prefix": [
      "$",
      "dotsecrets.getSystemSecret",
      "$dotsecrets.getSystemSecret"
    ],
    "body": [
      "\\$dotsecrets.getSystemSecret(${1:key})"
    ],
    "description": "*Gets a secret as an object|string, based on the system host (if configured)"
  },
  "$dotsecrets..getSystemSecret(String key, Object defaultValue): Object": {
    "prefix": [
      "$",
      "dotsecrets..getSystemSecret",
      "$dotsecrets..getSystemSecret"
    ],
    "body": [
      "\\$dotsecrets..getSystemSecret(${1:key}, ${2:defaultValue})"
    ],
    "description": "*Gets a secret as an object|string, based on the system host (if configured)"
  },
  "$dotsecrets.getCharArray(String key): char[]": {
    "prefix": [
      "$",
      "dotsecrets.getCharArray",
      "$dotsecrets.getCharArray"
    ],
    "body": [
      "\\$dotsecrets.getCharArray(${1:key})"
    ],
    "description": "*"
  },
  "$dotsecrets.getCharArraySystemSecret(String key): char[]": {
    "prefix": [
      "$",
      "dotsecrets.getCharArraySystemSecret",
      "$dotsecrets.getCharArraySystemSecret"
    ],
    "body": [
      "\\$dotsecrets.getCharArraySystemSecret(${1:key})"
    ],
    "description": "*"
  },
  "$dotsecrets.getCharArraySystemSecret(String key, char[] defaultValue): char[]": {
    "prefix": [
      "$",
      "dotsecrets.getCharArraySystemSecret",
      "$dotsecrets.getCharArraySystemSecret"
    ],
    "body": [
      "\\$dotsecrets.getCharArraySystemSecret(${1:key}, ${2:defaultValue})"
    ],
    "description": "*"
  },
  "#macro (macroName $args...)": {
    "prefix": [
      "#",
      "macro",
      "#macro"
    ],
    "body": [
      "#macro (${1:macroName} \\$${2:arg})",
      "",
      "#end"
    ]
  },
  "#set ($var = )": {
    "prefix": [
      "#",
      "set",
      "#set"
    ],
    "body": [
      "#set (\\$${1:var} = ${2:value})"
    ]
  },
  "#set ($dotJSON.prop = )": {
    "prefix": [
      "$",
      "dotJSON",
      "#dotJSON"
    ],
    "body": [
      "#set (\\$dotJSON.${1:var} = ${2:val})"
    ]
  },
  "#dotParse(String path)": {
    "prefix": [
      "#",
      "dotParse",
      "#dotParse"
    ],
    "body": [
      "#dotParse('${1:path}')"
    ]
  },
  "#dotInclude(String path)": {
    "prefix": [
      "#",
      "dotInclude",
      "#dotInclude"
    ],
    "body": [
      "#dotInclude('${1:path}')"
    ]
  },
  "#dotcache(String name, int ttl)": {
    "prefix": [
      "#",
      "dotcache",
      "#dotcache"
    ],
    "body": [
      "#dotcache(${1:name}, ${2:ttl})"
    ]
  },
  "#editContentlet(String inode)": {
    "prefix": [
      "#",
      "editContentlet",
      "#editContentlet"
    ],
    "body": [
      "#editContentlet(\\$${1:inode})"
    ]
  }
}